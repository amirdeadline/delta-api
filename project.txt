This is Delta_SASE Project Django tenant DRF files and their contents

/root/delta_api/delta_sase
├── base
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       ├── 0001_initial.cpython-310.pyc
│   │       └── __init__.cpython-310.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-310.pyc
│   │   ├── apps.cpython-310.pyc
│   │   ├── __init__.cpython-310.pyc
│   │   ├── middleware.cpython-310.pyc
│   │   ├── models.cpython-310.pyc
│   │   ├── serializers.cpython-310.pyc
│   │   ├── urls.cpython-310.pyc
│   │   └── views.cpython-310.pyc
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── config
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── dashboard
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── debug.log
├── delta_sase
│   ├── asgi.py
│   ├── celery.py
│   ├── context_processors.py
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-310.pyc
│   │   ├── settings.cpython-310.pyc
│   │   ├── urls_public.cpython-310.pyc
│   │   ├── urls_tenants.cpython-310.pyc
│   │   └── wsgi.cpython-310.pyc
│   ├── settings.py
│   ├── tasks.py
│   ├── urls_public.py
│   ├── urls.py
│   ├── urls_tenants.py
│   ├── views.py
│   └── wsgi.py
├── manage.py
├── notes.txt
├── objects_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── policies_security_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── project.txt
├── README.md
├── requirements2.txt
├── requirments.txt
├── resources_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       ├── 0001_initial.cpython-310.pyc
│   │       └── __init__.cpython-310.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-310.pyc
│   │   ├── apps.cpython-310.pyc
│   │   ├── __init__.cpython-310.pyc
│   │   ├── models.cpython-310.pyc
│   │   ├── serializers.cpython-310.pyc
│   │   ├── urls.cpython-310.pyc
│   │   └── views.cpython-310.pyc
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── scripts
│   ├── api_calls.py
│   ├── create_customer.py
│   ├── create_support.py
│   ├── create_tenant.py
│   ├── db_cleanup.py
│   ├── queries.sql
│   └── tests
│       └── tenants_app.py
├── snapshot.json
├── standards_network_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── standards_security_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── standards_service_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── standards_system_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── tenant.json
└── tenants_app
    ├── admin.py
    ├── apps.py
    ├── default_settings.py
    ├── forms.py
    ├── __init__.py
    ├── management
    │   ├── commands
    │   │   ├── create_public.py
    │   │   ├── create_reserve.py
    │   │   ├── __init__.py
    │   │   └── __pycache__
    │   │       ├── create_public.cpython-310.pyc
    │   │       ├── create_reserve.cpython-310.pyc
    │   │       └── __init__.cpython-310.pyc
    │   ├── __init__.py
    │   └── __pycache__
    │       └── __init__.cpython-310.pyc
    ├── middleware.py
    ├── migrations
    │   ├── 0001_initial.py
    │   ├── __init__.py
    │   └── __pycache__
    │       ├── 0001_initial.cpython-310.pyc
    │       └── __init__.cpython-310.pyc
    ├── models.py
    ├── postgres.py
    ├── __pycache__
    │   ├── admin.cpython-310.pyc
    │   ├── apps.cpython-310.pyc
    │   ├── default_settings.cpython-310.pyc
    │   ├── __init__.cpython-310.pyc
    │   ├── middleware.cpython-310.pyc
    │   ├── models.cpython-310.pyc
    │   ├── serializers.cpython-310.pyc
    │   ├── urls.cpython-310.pyc
    │   └── views.cpython-310.pyc
    ├── serializers.py
    ├── signals.py
    ├── tenant_create.py
    ├── tests.py
    ├── urls.py
    └── views.py

36 directories, 163 files


#####start /root/delta_api/delta_sase/snapshot.json#####
{
    "snapshot_id":111111,
    "created_at":"04/28/2024 18:42",
    "created_by":"admin1",
    "scope":"/tenant/1111/site/",
    "config": {

    }
}
#####end /root/delta_api/delta_sase/snapshot.json#####
______________________________
#####start /root/delta_api/delta_sase/tenant.json#####
{
   "created_at":"18/04/2024 13:51:01",
   "created_by":"amir@deltasase.com",
   "tenant_id":"112233",
   "tenant_name":"test Tenant",
   "customer_id":"556688",
   "customer_name":"TEST Customer",
   "parent":"",
   "products":["SDWAN","SASE_RU","SASE_Branch"],
   "licenses":{
       "sdwan":{
          
       }
   },
   "configuration":{
       "settings":{
           "general":{

           },
           "logging":{
               "Customer 1 syslog":{
                  "address":"",
                  "port":"",
                  "protocol":"tcp",
                  "security": {
                     "tls_enabled": true,
                     "tls_certificate": "syslog-server2-cert.pem",
                     "tls_key": "syslog-server2-key.pem",
                     "ca_certificate": "ca-cert.pem"
                 },
                  "events":[]
               }
           },
           "administrators":{
               "admin": {
                   "username": "admin",
                   "password_hash": "hashed_password",
                   "permissions": "full",
                   "mfa_enabled": true,
                   "allowed_addresses":["any"]
               },
               "operator": {
                   "username": "operator",
                   "password_hash": "hashed_password",
                   "permissions": "read-only",
                   "mfa_enabled": false,
                   "allowed_addresses":["any"]
               }
           },
           "api_tokens":{

           },
           "integrations":{
               "infoblox":{
                  
               },
               "aws":{
                  
               },
               "azure":{
                  
               },
               "gcp":{
                  
               },
               "service now":{
                  
               },
               "kubernetes":{
         
               }
           }
       },
       "resources":{
           "machine_groups":{
              "MachineGroup1_mobiles":{
                 "machines":{
                    "Machine1":{
                       "id":"111",
                       "type":"",
                       "vendor":"",
                       "model":"",
                       "os":"android",
                       "serial_number":"125ffe54",
                       "certificate":"",
                       "admins":[""],
                       "users":[""]
                    }
                 },
                 "machine_compliance_standard":"Default Compliance Standard"
              },
              "MachineGroup2_laptops":{
                 "machines":{
                    "Machine2":{
                       "id":"2222",
                       "model":"del 5440",
                       "os":"win11",
                       "serial_number":"ddd5ffde54",
                       "certificate":"",
                       "admins":"testadminuser",
                       "users":"testuser"
                    }
                 },
                 "machine_compliance_standard":"Default Compliance Standard"
              }
           },
           "transports":{
              "1":"Internet",
              "2":"MPLS1"
           },
           "service_providers":{
              "Comcast":{
                 
              },
              "ISP2":{
                 
              }
           },
           "vrfs":{
              "LAN1":{
                 "table_id":101,
                 "rd":"65001:65558",
                 "vni":"33333"
              }
           },
           "dsn_devices":{
               "FCb223156533":{
                   "registered": true,
                   "child_tenant":""
               },
               "FCb223156534":{
                   "registered": true,
                   "child_tenant":""
               }
           },
           "servers":{
              "dhcp_servers":{
                 
              },
              "dns_servers":{
                 "google dns":{
                    "domain_prefix":"*",
                    "address":"8.8.8.8",
                    "dnssec":{
                       "active":false,
                       "unsigned_check":false,
                       "timecheck":false,
                       "class":"",
                       "key_tag":"",
                       "algorythm":"",
                       "digest_type":"",
                       "digest":""
                    },
                    "public_key":"",
                    "tags":[]
                 }
              },
              "syslog_servers":{
                 
              },
              "mail_servers":{
                 
              },
              "application_servers":{
                 
              },
              "print_servers":{
                 
              },
              "collaboration_servers":{
                 
              },
              "ipfix_collectors":{
                 
              },
              "web_servers":{
                 
              },
              "ldap_servers":{
                 
              },
              "active_directories":{
                 
              },
              "file_servers":{
                 
              }
           }
       },
       "standards":{
           "secuirty_standards": {
               "compliance_standards":{
                   "Default Compliance Standard": {
                       "operating_system": {
                           "type": "Windows",
                           "version": "11",
                           "supported_until": "2030-01-01"
                       },
                       "security_features": {
                           "firewall": "enabled",
                           "antivirus": "active",
                           "antispyware": "active",
                           "latest_security_patches": "installed",
                           "disk_encryption": {
                           "enabled": true,
                           "type": "BitLocker"
                           }
                       },
                       "system_policies": {
                           "password_policy": {
                           "minimum_length": 8,
                           "complexity": "high",
                           "expiration_days": 90,
                           "history_count": 5
                           },
                           "screen_lock": {
                           "enabled": true,
                           "timeout_seconds": 300
                           }
                       },
                       "network_settings": {
                           "vpn_required": true,
                           "wifi_security": {
                           "encryption_type": "WPA3"
                           }
                       },
                       "hardware_compliance": {
                           "tpm_version": "2.0",
                           "disk_type": "SSD",
                           "minimum_ram_gb": 8,
                           "bios_firmware": {
                           "version": "latest",
                           "secure_boot_enabled": true
                           }
                       },
                       "required_software": [
                           {
                           "name": "CompanySecurityAgent",
                           "version": "latest"
                           },
                           {
                           "name": "RemoteManagementTool",
                           "version": "latest"
                           }
                       ],
                       "user_compliance": {
                           "mandatory_training_completed": true,
                           "phishing_test_passed": true
                       }
                   }
               },
               "antivirus":{
                   "Default Antivirus Standard":{
                       "scan_engine": "real-time",
                       "scan_type": "full-scan",
                       "action_on_detection": {
                       "default_action": "block",
                       "notification": "log_event",
                       "secondary_action": "quarantine"
                       },
                       "update_settings": {
                       "update_interval": "hourly",
                       "update_source": "official_vendor_site",
                       "automatic_updates": true
                       },
                       "exclusions": {
                       "file_types": [".txt", ".jpg"],
                       "applications": ["trusted_app"]
                       }
                   }
               },
               "dlp": {
                   "Default DLP Standard":{
                       "enabled": true,
                       "content_inspection": {
                           "deep_inspection": true,
                           "data_types": ["credit_cards", "social_security_numbers", "confidential_emails"],
                           "actions": {
                           "on_detection": ["alert", "quarantine", "block"],
                           "exceptions": [
                               {
                               "user_groups": ["executive_team"],
                               "action": "log_only"
                               }
                           ]
                       }
                       },
                       "network_protection": {
                           "protocols": ["http", "https", "ftp"],
                           "inspect_encrypted_traffic": true
                       },
                       "endpoint_protection": {
                           "monitor_clipboard_content": true,
                           "block_sensitive_data_transfer": ["usb", "bluetooth", "email"]
                       },
                       "storage_protection": {
                           "cloud_storage": ["Google Drive", "Dropbox"],
                           "actions": ["encrypt", "block"]
                       }
                   }
               },
               "ids_ips":{
                   "Default IDS Standard":{
                       "enabled": true,
                       "signature_based_detection": {
                       "update_interval": "daily",
                       "signatures": [
                           {
                           "id": "2001",
                           "name": "SQL Injection Attempt",
                           "severity": "high",
                           "action": "alert_and_block"
                           }
                       ]
                       },
                       "anomaly_based_detection": {
                       "enabled": true,
                       "threshold": 5,
                       "actions": ["alert_admin", "restrict_access"]
                       },
                       "automated_response": {
                       "rules": [
                           {
                           "trigger": "high_severity_alert",
                           "actions": ["isolate_infected_system", "initiate_scan", "notify_security_team"]
                           },
                           {
                           "trigger": "repeated_login_failures",
                           "actions": ["temporary_account_lock", "alert_user_and_admin"]
                           }
                       ]
                       },
                       "integration": {
                       "with_siem": true,
                       "with_ticketing_system": true
                       }
                   }
               },
               "ssl":{
                   "Default SSL Standard":{
                       "decryption_policy": "selective",
                       "targets": [
                       {
                           "domain": "example.com",
                           "action": "decrypt"
                       },
                       {
                           "domain": "sensitivebanking.com",
                           "action": "no-decrypt"
                       }
                       ],
                       "certificate_handling": {
                       "trust_known_certificates": true,
                       "inspect_untrusted_certificates": true
                       },
                       "exclusions": {
                       "categories": ["financial", "health"]
                       }
                   }
               },
               "inspection":{
                   "actions": {
                       "malware": "block",
                       "protocol_anomalies": "alert",
                       "file_type_mismatch": "block"
                   },
                   "content_inspection": {
                       "enabled": true,
                       "rules": [
                       {
                           "content_type": "executable_files",
                           "action": "scan"
                       },
                       {
                           "content_type": "multimedia_files",
                           "action": "log"
                       }
                       ]
                   },
                   "deep_inspection": {
                       "enabled": true,
                       "byte_limit": 5000000,
                       "time_limit": 10
                   }
               },
               "malware":{
                   "Default Malware Protection Standard":{
                       "sandboxing": {
                           "enabled": true,
                           "action_on_detection": {
                               "block": true,
                               "quarantine": true,
                               "notify_admin": true
                           },
                           "analysis_servers": [
                               {
                                   "ip_address": "10.10.10.10",
                                   "port": 443,
                                   "protocol": "HTTPS"
                               },
                               {
                                   "ip_address": "10.10.10.11",
                                   "port": 443,
                                   "protocol": "HTTPS"
                               }
                           ]
                       },
                       "behavioral_analysis": {
                           "enabled": true,
                           "action_on_detection": {
                               "alert": true,
                               "kill_process": true,
                               "notify_user": true
                           },
                           "analysis_engine": {
                               "ip_address": "10.10.20.10",
                               "port": 8080,
                               "protocol": "HTTP"
                           }
                       }
                   }
               }
           },
           "service_standards":{
               "dns_service":{
                   "dns standard 1":{
                       "active":true,
                       "caching":true,
                       "port":"53",
                       "interface_tags":[
                           "dns_listen"
                       ],
                       "certificate":{
                           "public_key":"",
                           "private_key":"",
                           "trusted_ca":""
                       },
                       "forwarding_servers": {
                           "1": {
                           "domain_prefix": "*.test.com",
                           "address": "8.8.8.8",
                           "dnssec": {
                               "active": true,
                               "unsigned_check": false, 
                               "timecheck": false,      
                               "class": "IN",           
                               "key_tag": "12345",      
                               "algorithm": "RSASHA256",
                               "digest_type": "2",      
                               "digest": "digest_value" 
                           },
                           "public_key": "server_public_key.pem", 
                           "tag": "primary_server",               
                           "source_address_tag":"dns_forward",
                           "source_interface_tag":"dns_forward",
                           "server": "dns_server_name" 
                           }
                       },
                       "cache_size": "4096",
                       "max_ttl": "86400",      
                       "min_ttl": "3600",       
                       "neg_ttl": "300",        
                       "max_entries": "10000",  
                       "logging": "enabled",   
                       "static_entries":{
                           "test.net":"15.2.2.4"
                       }
                   }
               },
               "dhcp_server":{
                   "Test DHCP Server Standard":{
                       "enabled": true,
                       "start_count": 5,
                       "end_count": 10,
                       "default_lease_time": 3600,
                       "max_lease_time": 7200,
                       "domain_name": "localdomain",
                       "dns_servers": ["172.16.100.10", "8.8.8.8"],
                       "ntp_servers": ["time.google.com"],
                       "options": {
                           "option_150": ["172.16.100.10"],
                           "custom_option_1": {
                               "code": 160,
                               "data": "custom_data",
                               "type": "string"
                           }
                       },
                       "win_servers": ["172.16.100.15"],
                       "netbios_name_servers": ["172.16.100.15"],
                       "netbios_node_type": 2
                   }
               },
               "dhcp_relay":{
                   "Test DHCP Relay Standard":{
                       "enabled": true,
                       "relay_ip": ["172.31.1.1", "172.31.2.1"],
                       "source_interface": "self",
                       "options":{
                           "option_82": true
                       },
                       "giaddr_policy": "preserve",
                       "rate_limit":""
                   }
               }
           },
           "system_standards":{
               "syslog_standard":{
                   "Test Syslog_config": {
                       "enabled": true,
                       "servers": [
                       {
                           "ip_address": "192.168.100.106",
                           "port": 514,
                           "transport_protocol": "UDP",
                           "facility": "local4",
                           "severity": "info",
                           "security": {
                           "tls_enabled": true,
                           "tls_certificate": "/etc/ssl/certs/syslog-server-cert.pem",
                           "tls_key": "/etc/ssl/private/syslog-server-key.pem",
                           "ca_certificate": "/etc/ssl/certs/ca-cert.pem"
                           }
                       }
                       ]
                   }
               },
               "ipfix_standard":{
                   "Default IPFIX config": {
                       "enabled": true,
                       "export_interval": 60,
                       "collector": {
                       "ip_address": "192.168.100.101",
                       "port": 4739,
                       "transport_protocol": "UDP"
                       },
                       "interfaces":[],
                       "template_refresh_time": 600,
                       "option_template": true,
                       "record_fields": [
                       "sourceIPv4Address",
                       "destinationIPv4Address",
                       "sourceTransportPort",
                       "destinationTransportPort",
                       "protocolIdentifier",
                       "packetDeltaCount",
                       "octetDeltaCount",
                       "flowStartSysUpTime",
                       "flowEndSysUpTime"
                       ]
                   }
               },
               "snmp_standard":{
                   "SNMPv3_config": {
                       "enabled": true,
                       "users": [
                       {
                           "username": "adminUser",
                           "authentication_protocol": "SHA",
                           "authentication_password": "authPassword",
                           "encryption_protocol": "AES",
                           "encryption_password": "encPassword",
                           "security_level": "authPriv"
                       }
                       ],
                       "trap_receiver": {
                       "ip_address": "192.168.100.105",
                       "port": 162
                       },
                       "engine_id": "800000A1030000E112345678",
                       "contact": "network.admin@example.com",
                       "location": "Headquarters"
                   },
                   "SNMP_config": {
                       "enabled": true,
                       "version": "v2c",
                       "community_string": "public",
                       "trap_receiver": {
                       "ip_address": "192.168.100.102",
                       "port": 162
                       },
                       "authentication_traps": true,
                       "contact": "network.admin@example.com",
                       "location": "Data Center 1"
                   }
               },
               "ntp_standard":{
                   "default NTP Standard":{
                       "10": {
                           "address": "time.google.com",
                           "version": "4",
                           "auth_key": "",
                           "max_poll": "10",
                           "min_poll": "6"
                       },
                       "11": {
                           "address": "time2.google.com",
                           "version": "4",
                           "auth_key": "",
                           "max_poll": "10",
                           "min_poll": "6"
                       }
                   }
               }
           },
           "network_standards":{
               "sla_standard":{
                   "Default SLA Standard":{
                       "id":123123123,
                       "description":"",
                       "interval":"",
                       "threshold":"",
                       "wait_time":"",
                       "loss":"",
                       "jitter":"",
                       "Mos":"",
                       "tags":[]
                   },
                   "Internet SLA Standard":{
                       "description":"",
                       "interval":"",
                       "threshold":"",
                       "wait_time":"",
                       "loss":"",
                       "jitter":"",
                       "Mos":"",
                       "tags":[]
                   }
               },
               "underlay_standard":{
                   "ISP1": {
                       "description":"",
                       "up_bw":10,
                       "down_bw":50,
                       "shaping":true,
                       "metered":false,
                       "tags":[],
                       "transport":"1",
                       "sla_target":"",
                       "sla_standard":""
                   },
                   "LTE/5G": {
                       "description":"",
                       "up_bw":10,
                       "down_bw":50,
                       "shaping":true,
                       "metered":true,
                       "tags":[],
                       "transport":"1",
                       "sla_target":"",
                       "sla_standard":""
                   }
               },
               "ike_standard":{
                   "IKE proposal 1": {
                       "version": "2",
                       "authentication_method": "pre-shared-key",
                       "psk": "mySecretKey",
                       "random_psk": false,
                       "local_identity": "local@deltasase.com",
                       "remote_identity": "remote@deltasase.com",
                       "dh_group": "group20",
                       "encryption_algorithm": "aes-256",
                       "hash_algorithm": "sha256",
                       "lifetime_seconds": 86400,
                       "mobike":false,
                       "nat_t":true
                   }
               },
               "ipsec_standard":{
                   "IPsec template 1": {
                       "encryption_algorithm": "aes-256",
                       "integrity_algorithm": "sha1",
                       "dh_group": "group2",
                       "pfs_group": "group2",
                       "lifetime_seconds": 3600,
                       "lifetime_kilobytes": 50000
                   }
               }
           }
       },
       "objects":{
           "zones":{
              "lan":{
                 "description":""
              },
              "internet":{
                 "description":""
              },
              "sdwan":{
                 "description":""
              },
              "sase":{
                 "description":""
              },
              "control":{
                 "description":""
              },
              "lan2":{
                 "description":""
              }
           },
           "addresses":{
              "test address subnet1":{
                 "type": "subnet",
                 "address": "2.2.2.2/30",
                 "tags": []
              },
                 "test address":{
                 "type": "address",
                 "address": "20.2.2.2",
                 "tags": []
              },
              "test address range":{
                 "type": "range",
                 "address": "2.2.2.2-2.2.2.6",
                 "tags": []
              }
           },
           "address groups":{
              "test address group":{
                 "addresses": ["test address", "test address subnet1"],
                 "tags": []
              }
           },
           "urls":{
              "test address url":{
                 "type": "url",
                 "address": "test.com",
                 "tags": []
              },
              "test address url prefix":{
                 "type": "url_prefix",
                 "address": "*.test.com",
                 "tags": []
              }
           },
           "url_groups":{
              "test address group":{
                 "addresses": ["test address url", "test address url prefix"],
                 "tags": []
              }
           },
           "applications":{
              "1":{
                 "app_name": "MyCustomApp1",
                 "app_id": "app001",
                 "app_cathegory":"web",
                 "criteria": {
                   "source_ip": "192.168.1.100",
                   "destination_ip": "192.168.2.100",
                   "urls": ["mycustomapp1.example.com"],
                   "ports": ["8080", "8081"],
                   "protocols": ["TCP", "UDP"],
                   "packet_payload": "specific_string_pattern",
                   "ssl_certificates": ["mycustomapp1_cert"],
                   "user_agents": []
                 }         
              },
              "2":{
                 "app_name": "MyCustomApp2",
                 "app_id": "app002",
                 "app_cathegory":"web",
                 "criteria": {
                   "source_ip": "192.168.1.100",
                   "destination_ip": "192.168.2.100",
                   "urls": ["mycustomapp1.example.com"],
                   "ports": ["8080", "8081"],
                   "protocols": ["TCP", "UDP"],
                   "packet_payload": "specific_string_pattern",
                   "ssl_certificates": ["mycustomapp1_cert"],
                   "user_agents": []
                 }         
              }
           },
           "prefix_lists":{
               "test prefix list":{
                  "description": "",
                  "tags": [],
                  "rules": [
                     {
                       "seq": 10,
                       "action": "permit",
                       "prefix": "192.168.1.0/24",
                       "ge": 24,
                       "le": 24
                     },
                     {
                       "seq": 20,
                       "action": "deny",
                       "prefix": "192.168.2.0/24"
                     }
                  ]
               }
           },
           "certificates":{ 
               "_comment": "the certs should not be part of snapshot, but we ",
               "delta ru ca certificate":{
                  "format":"BASE64 PEM",
                  "cert_file":"",
                  "key_file":"",
                  "secret":""
               },
               "dns server certificate":{
                  "format":"BASE64 PEM",
                  "cert_file":"",
                  "key_file":"",
                  "secret":""
               }
           }
       },
       "policies":{
          "secuirty_policies":{
              "default policy":{
                 "seq": 1,
                 "match":{
                    "source_zones": ["internal"],
                    "destination_zones": ["external"],
                    "source_addresses": ["any"],
                    "destination_addresses": ["any"],
                    "applications": ["http", "https"],
                    "services": ["service-http", "service-https"],
                    "source_users": ["any"],
                    "source_ports": ["any"],
                    "destination_ports": ["80", "443"],
                    "session_tags": ["business"]
                 },
                 "action": {
                    "permit": {
                       "inspect": "Default DPI Standard",
                       "antivirus": "Default Antivirus Standard",
                       "ips_ids": "Default IDS/IPS Standard",
                       "dlp": "Default DLP Standard",
                       "ssl": "Default SSL Standard"
                    },
                    "logging":{
                       "action":"start and end",
                       "logging_standard":""
                    }
                 }
              }
          },
          "nat_policies":{
              
          },
          "qos_policies":{
              
          },
          "route_policies":{
              
          },
          "incident_policies":{
              
          },
          "authentication_policies":{
              "Default Auth policy":{
                 "active":true,
                 "1":{
                    "type":"ldap",
                    "remote":"LDAP1",
                    "2fa":false,
                    "ca_certificate":""
                 },
                 "2":{
                    "type":"sso",
                    "remote":"Azure AD",
                    "2fa":false,
                    "ca_certificate":""
                 },
                 "3":{
                    "type":"local",
                    "2fa":true,
                    "ca_certificate":""
                 }
              }
          }
       },
       "authentication":{
          "local_users":{
              "clients":{
                 "user1": {
                    "username": "user1",
                    "password_hash": "hashed_password",
                    "groups": ["group1"],
                    "mfa_enabled": true,
                    "enabled": true,
                    "allowed_addresses":["any"]
                  },
                  "user2": {
                     "username": "user2",
                     "password_hash": "hashed_password",
                     "groups": ["group1", "group2"],
                     "mfa_enabled": true,
                     "enabled": true,
                     "allowed_addresses":["any"]
                  }
              }, 
              "service_users":{
                 "secuirty_cameras": {
                   "username": "cameras",
                   "groups": ["security"],
                   "enabled": true,
                   "addresses":["any"]
                 },
                 "secuirty_doors": {
                   "username": "doors",
                   "groups": ["security"],
                   "enabled": true,
                   "addresses":["any"]
                 }
              
     
              }
          },
          "user_groups":{
              "IT_staff": {
                "access_level": "vpn",
                "vpn_access": true,
                "ztna_access": true
              },
              "regular_users": {
                "access_level": "user",
                "vpn_access": false,
                "ztna_access": true
              }
          },
          "external_users":{
              "user_group_mapping":{
                 "LDAP Mapping":{
                    "cn=IT_staff,ou=groups,dc=yourdomain,dc=com": "IT_staff",
                    "cn=regular_users,ou=groups,dc=yourdomain,dc=com": "regular_users",
                    "cn=engineering,ou=groups,dc=yourdomain,dc=com": "engineering_team",
                    "cn=hr_department,ou=groups,dc=yourdomain,dc=com": "HR_staff"
                 },
                 "SSO Group mapping": {
                    "sso_group_id_admin": "IT_staff",
                    "sso_group_id_users": "regular_users",
                    "sso_group_id_engineers": "engineering_team",
                    "sso_group_id_hr": "HR_staff"
                 }
              },
              "sso":{
                 "Okta":{
                    "provider": "OKTA",
                    "client_id": "your_okta_client_id",
                    "client_secret": "your_okta_client_secret",
                    "redirect_uri": "https://yourcallbackurl.com/callback",
                    "scopes": ["openid", "profile", "email"],
                    "authorization_endpoint": "https://yourdomain.okta.com/oauth2/default/v1/authorize",
                    "token_endpoint": "https://yourdomain.okta.com/oauth2/default/v1/token",
                    "userinfo_endpoint": "https://yourdomain.okta.com/oauth2/default/v1/userinfo"
                 },
                 "Azure AD":{
                    "provider": "AzureAD",
                    "client_id": "client_id_here",
                    "client_secret": "client_secret_here",
                    "redirect_uri": "https://yourcallbackurl.com",
                    "scopes": ["openid", "profile", "email"],
                    "token_endpoint": "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token"       
                 }
              },
              "ldap":{
                 "LDAP1":{
                    "server": "ldap.yourdomain.com",
                    "port": 389,
                    "use_ssl": true,
                    "start_tls": false,
                    "connection_timeout": 30,
                    "failover_servers": [
                      "ldap2.yourdomain.com",
                      "ldap3.yourdomain.com"
                    ],
                    "base_dn": "dc=yourdomain,dc=com",
                    "bind_dn": "cn=admin,dc=yourdomain,dc=com",
                    "bind_password": "bind_password_here",
                    "user_search_base": "ou=users,dc=yourdomain,dc=com",
                    "user_search_filter": "(uid={username})",
                    "group_search_base": "ou=groups,dc=yourdomain,dc=com",
                    "group_search_filter": "(member={dn})",
                    "attribute_mapping": {
                      "email": "mail",
                      "name": "cn"
                    }
                 }
              }
          },
          "2fa":{
              "sms":{},
              "email":{},
              "app":{}
          }
       },
       "alert":{
          "notifications": {
              "recipients":{
                 "NOC Group":{
                    "emails":["admin@example.com", "support@example.com"],
                    "sms": ["+1234567890", "+1987654321"],
                    "webhook": {
                       "enabled": true,
                       "address": "https://yourcompanywebhookurl.com/alerts",
                       "headers": {
                         "Content-Type": "application/json"
                       },
                       "payload_template": "{\"incident\": \"{{incident_type}}\", \"priority\": \"{{priority}}\", \"site\": \"{{site}}\"}"
                    }
                 },
                 "ServiceNow API server":{
                    "api":{
                       "address": "https://yourcompanywebhookurl.com/alerts",
                       "header": {
     
                       },
                       "body":{
     
                       }
                    }
                 }
              },
              "templates":{
                 "email":{
     
                 },
                 "sms":{
     
                 },
                 "webhook":{
     
                 }
              }
          },
          "rules": {
              "1": {
                 "incident": ["underlay_down"],
                 "sites": ["any"],
                 "priority": "3",
                 "escalation": {
                    "after_minutes": 60,
                    "new_priority": "2",
                    "repeat_notification": true
                 },
                 "notify":["NOC Group"]
              },
              "2": {
                "incident": ["site"],
                "sites": ["any"],
                "priority": "2",
                "escalation": {
                  "after_minutes": 120,
                  "new_priority": "1",
                  "repeat_notification": true
                },
                "notify":["NOC Group", "ServiceNow API server"]
              }
          }
       },
       "reports":{
           "report1":{
              "scope":{
                 
              },
              "notification":{
                 
              },
              "schedule":{
                 "start time":"14:20:00",
                 "start date":"04/19/2024",
                 "interval":24
              }
           }
       },
       "sase":{
           "general":{
              "subnet":"10.1.0.0/22",
              "bgp asn":"65500",
              "application_standard":"Default App Standard"
           },
           "cloud_nodes":{
               "us-east-1-01":{
                   "id":"121245646463466",
                   "enabled": true,
                   "dedicated": true,
                   "region": "us-east-1",
                   "bandwidth": 1000
               },
               "us-east-1-02":{
                   "id":"121245646463467",
                   "enabled": true,
                   "dedicated": false,
                   "region": "us-east-1",
                   "bandwidth": 100
               }
           },
           "sase_agent":{
               "user_agents":{
                  "default":{
                       "authentication":"Default Authentication Policy",
                       "authentication_timeout":"6000",
                       "machine_groups":["any"],
                       "compliance":true,
                       "settings":{
                           "active":true,
                           "secure_network_detection":{},
                           "manage_certificates":true,
                           "os_credentials":true,
                           "connect_type":"auto",
                           "tunnel_type": {
                               "1":"ipsec",
                               "2":"ssl"
                           },
                           "split_tunnel":{
                               "enabled":true,
                               "match":{
                               "destination_ips":[],
                               "destination_urls":[],
                               "applications":[]
                               }
                           },
                           "disable_agent":{
                               "users":[],
                               "secret":"testsecret",
                               "duration":"10",
                               "reason_required":true
                           },
                           "secuirty_policy":"Agent Default Security Policy"
                       }
                   }
               },
               "service_agent":{
                   "default":{
                       "authentication":"Default Service Authentication Policy",
                       "authentication_timeout":"6000",
                       "machine_groups":["any"],
                       "servers":["any"],
                       "compliance":true,
                       "settings":{
                           "active":true,
                           "secure_network_detection":{},
                           "manage_certificates":true,
                           "os_credentials":true,
                           "connect_type":"auto",
                           "tunnel_type": {
                               "1":"ipsec",
                               "2":"ssl"
                           },
                           "split_tunnel":{
                               "enabled":true,
                               "match":{
                               "destination_ips":[],
                               "destination_urls":[],
                               "applications":[]
                               }
                           },
                           "disable_agent":{
                               "users":[],
                               "secret":"testsecret",
                               "duration":"10",
                               "reason_required":true
                           },
                           "secuirty_policy":"Agent Default Security Policy"
                       }
                   }
               }
           },
           "remote_sites":{
               "sites":{
                   "site1":{
                       "id":"111",
                       "sdwan":true,
                       "ipsec":{
                           "1213554884845":{
                               "ike_standard": "IKE proposal 1",
                               "ipsec_standard": "IPSEC proposal 1",
                               "ike":{
                                   "version": "2",
                                   "authentication_method": "certificates",
                                   "local_certificate": "localCert.pem",
                                   "remote_certificate": "remoteCert.pem",
                                   "local_identity": "local@deltasase.com",
                                   "remote_identity": "remote@deltasase.com",
                                   "dh_group": "group20",
                                   "encryption_algorithm": "aes-256",
                                   "hash_algorithm": "sha256",
                                   "lifetime_seconds": 86400,
                                   "mobike": false,
                                   "nat_t": true
                               },
                               "ipsec":{
                                   "ipsec_proposal": [
                                       {
                                       "encryption_algorithm": "aes-256",
                                       "integrity_algorithm": "sha1",
                                       "dh_group": "group2"
                                       }
                                   ],
                                   "pfs_group": "group2",
                                   "lifetime_seconds": 3600,
                                   "lifetime_kilobytes": 50000
                               },
                               "underlay id":"235232121344345435",
                               "up_bw":1000,
                               "down_bw":1000,
                               "gateway":"us-east-1-01",
                               "priority":128
                           }
                       },
                       "routing":{
                           "static":{
                           
                           },
                           "bgp":{
                               "ecmp":false,
                               "peers":{
                                   "peer1":{
                                       "asn":"64500",
                                       "route map":{
                                       "in":"BGP test route map",
                                       "out": ""
                                       }
                                   }
                               },
                               "route_maps":{
                                   "BGP test route map":{
                                   "standard_route_map":"",
                                   "10":{
                                       "match":{
                                           "prefix_list":"",
                                           "asn_regex":"",
                                           "community":""
                                       },
                                       "action":{
                                           "permit":true,
                                           "community":{
                                               "type":"add",
                                               "value":"65001:2252"
                                           },
                                           "as_path":{
                                               "overide":false,
                                               "prepend_count":"",
                                               "prepend_asn":""
                                           },
                                           "weight":"",
                                           "local_pref":""
                                       }
                                   }
                                   }
                               }
                           }
                       },
                       "security policy":"test security policy",
                       "qos policy":"test qos policy"
                   }
               }
           },
           "remote_vpn":{
               "global_pools":[
                   "172.16.0.0/23",
                   "172.16.8.0/23"
               ],
               "portal":{
                   "url": "test.vpn.deltasase.com",
                   "public_ip":"5.2.56.5",
                   "certificte_url":""
               },
               "ipsec":{
                   "ike_standard": "default IKE standard",
                   "ipsec_standard": "default IPSEC standard",
                   "key_refresh_rate":"8"
               },
               "policies":{
                   "security":"default remote VPN Security policy",
                   "qos":"default remote VPN QoS policy"
               },
               "gateways":{
                   "us-east-01-01":{
                       "pools":["172.16.20.0/24"],
                       "bandwidth":"500",
                       "bgp_communities":["65001:120", "no-export"]
                   },
                   "us-west-01-02":{
                       "pools":[],
                       "bandwidth":"500",
                       "bgp_communities":["65001:220"]
                   },
                   "hub1":{
                       "pools":["172.16.21.0/24"],
                       "bandwidth":"10000",
                       "bgp_communities":["65002:230", "no-export"]
                   }
               }
           },
           "secure_front":{
               "test ingress":{
                   "id":"2234411232131",
                   "public_ip":"3.2.55.1",
                   "public_port":"443",
                   "private_pool":["10.10.1.1"],
                   "private_port":"443",
                   "health_check":{

                   },
                   "source_nat":true,
                   "security_policy":"test security policy",
                   "up_bw":100,
                   "down_bw":100,
                   "cen":""
               }
           },
           "casb": {
               "enabled": true,
               "traffic_monitoring": true,
               "cloud_discovery": {
                   "report_unauthorized_usage": true,
                   "data_sources": ["firewall_logs", "proxy_logs", "endpoint_security_logs"]
               },
               "data_loss_prevention": {
                   "enabled": true,
                   "policies": [
                   {
                       "policy_name": "Protect Sensitive Data",
                       "data_types": ["PII", "PCI", "PHI"],
                       "actions": ["alert", "block", "encrypt"]
                   }
                   ]
               },
               "threat_protection": {
                   "anomaly_detection": {
                   "enabled": true,
                   "behaviors": ["unusual_download", "unusual_access_patterns"],
                   "response_actions": ["alert_admin", "block_user"]
                   }
               },
               "access_control": {
                   "enforce_access_policies": true,
                   "policies": [
                       {
                       "user_group": "engineering",
                       "applications": ["AWS", "Azure"],
                       "access_level": "restricted"
                       }
                   ]
               },
               "encryption": {
                   "at_rest": true,
                   "in_transit": true
               }
           } 
       },
       "sdwan":{
           "hubs":{
              "hub1":{
                 "id":"11111",
                 "address":{
                    
                 },
                 "tags":[
                    
                 ],
                 "policies":{
                    "qos":{
                       "slot1":"", 
                       "slot2":"local qos policy 1", 
                       "slot3":"qos policy 1", 
                       "slot4":"default qos policy"
                    },
                    "security": {
                       "slot1":"", 
                       "slot2":"local security policy 1", 
                       "slot3":"security policy 1", 
                       "slot4":"default security policy"
                    },
                    "traffic": {
                       "slot1":"", 
                       "slot2":"local traffic policy 1", 
                       "slot3":"traffic policy 1", 
                       "slot4":"default traffic policy"
                    },
                    "nat":{
                       "slot1":"", 
                       "slot2":"local nat policy 1", 
                       "slot3":"nat policy 1", 
                       "slot4":"default nat policy"
                    }
                 },
                 "underlays":{
                    "circuit1":{
                       "id":"112121211",
                       "description":"",
                       "up_bw":10,
                       "down_bw":50,
                       "shaping":true,
                       "metered":false,
                       "sla":{
                          "target":"8.8.8.8",
                          "sla_standard":""
                       },
                       "underlay_standard":"",
                       "service_provider":"ISP1"
                    }
                 },
                 "cluster":{
                    "subnet":"192.168.5.0/24",
                    "keepalive_interval":"1000",
                    "failiure_count":"3",
                    "hold_time":"5"
                 },
                 "devices":{
                    "hub1 device 1":{
                       "id":"212325344322534",
                       "software_version":"1.1.2",
                       "hardware":{
                          "serial_number":"efwe223234324",
                          "model":"SEO1000",
                          "ports":[
                             "mgmt",
                             "1",
                             "2",
                             "3",
                             "4",
                             "5"
                          ]
                       },
                       "vlans":{
                          "1":"TEST VLAN",
                          "2":"Test VLAN2"
                       },
                       "interfaces":{
                          "1":{
                             "type":"port",
                             "role":"internet",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"",
                             "vlan":"",
                             "underlay":"circuit1",
                             "ipv4":{
                                "address":"50.2.11.10/24",
                                "gw":"50.2.11.1"
                             },
                             "ipv6":{
                                
                             }
                          },
                          "bond1":{
                             "type":"bond",
                             "bond_members":[
                                "5"
                             ],
                             "bond_mode":"active",
                             "role":"lan",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"lan",
                             "vlan":"",
                             "underlay":"circuit1",
                             "ipv4":{
                                "primary":{
                                   "address":"172.16.100.10/24"
                                },
                                "secondary":{
                                   
                                }
                             },
                             "ipv6":{
                                "primary":{
                                   
                                },
                                "secondary":{
                                   
                                }
                             },
                             "vrf": "lan"
                          },
                          "mgmt":{
                             "type":"port",
                             "role":"mgmt",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"mgmt",
                             "vlan":"",
                             "ipv4":{
                                "address":"192.168.100.10/24",
                                "gw":"192.168.100.1"
                             },
                             "ipv6":{
                                
                             }
                          },
                          "cluster_bond":{
                             "type":"bond",
                             "bond_members":[
                                "5"
                             ],
                             "bond_mode":"active",
                             "role":"ha",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"ha",
                             "vlan":"1",
                             "ipv4":{
                                "address":"169.254.5.1/24"
                             }
                          },
                          "tunnel1":{
                             "type":"tunnel",
                             "protocol":"ipsec",
                             "role":"lan",
                             "tags":[
                                
                             ],
                             "description":"test tunnel, for example tunnel to firewall in azure handoff",
                             "mac":"",
                             "zone":"lan",
                             "vlan":"",
                             "source_interface":"1",
                             "source_address":"192.168.1.1",
                             "remote_address":"1.2.2.2",
                             "ike":{
                                "ike_standard":"",
                                "version": "2",
                                "authentication_method": "pre-shared-key",
                                "psk": "mySecretKey",
                                "local_identity": "local@deltasase.com",
                                "remote_identity": "remote@deltasase.com",
                                "dh_group": "group20",
                                "encryption_algorithm": "aes-256",
                                "hash_algorithm": "sha256",
                                "lifetime_seconds": 86400,
                                "mobike":false,
                                "nat_t":true
                             },
                             "ipsec":{
                                "ipsec_standard": "IPsec template 1",
                                "ipsec_proposal": [
     
                                ],
                                "pfs_group": "group2",
                                "lifetime_seconds": 3600,
                                "lifetime_kilobytes": 50000
                             },
                             "ipv4":{
                                "primary":{
                                   "address":"169.254.15.1/31"
                                },
                                "secondary":{
                                   
                                }
                             },
                             "ipv6":{
                                "primary":{
                                   
                                },
                                "secondary":{
                                   
                                }
                             },
                             "vrf": "lan"
                          }
                       },
                       "cluster":{
                          "interface":"bond2",
                          "track":{
                             "interfaces":{
                                "bond1":{
                                   "flap_rate":"10",
                                   "reduce_priority":"50"
                                }
                             },
                             "prob":{
                                "prob1":{
                                   "target":"8.8.8.8",
                                   "source_address":"",
                                   "source_interface":"",
                                   "sla_standard":"test sla profile"
                                }
                             }
                          }
                       },
                       "system":{
                          "authentication":{
                             "users":{
                                "delta_admin":{
                                   "key":"<<RSA KEY>>",
                                   "password":"",
                                   "role":"superadmin"
                                }
                             },
                             "roles":{
                                
                             }
                          },
                          "session":{
                             "table_size":"2048",
                             "ttl":"600",
                             "tcp":{
                                
                             },
                             "udp":{
                                
                             },
                             "icmp":{
                                
                             },
                             "rtp":{
                                
                             }
                          },
                          "ssh":{
                             "interfaces":[
                                "bond1"
                             ],
                             "allowed_addresses":[
                                "172.16.1.2"
                             ]
                          },
                          "snmp_polling":{
                             "v2":{
                                "community":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "v3":{
                                "username":"",
                                "password":"",
                                "auth_algorytm":"",
                                "encrypt_algorytim":"",
                                "allowed_addresses":[
                                   
                                ]
                             }
                          },
                          "snmp_trap":{
                             "v2":{
                                "community":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "v3":{
                                "username":"",
                                "password":"",
                                "auth_algorytm":"",
                                "encrypt_algorytim":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "snmp_server":""
                          },
                          "certificates":{
                             "ca":{
                                
                             },
                             "machine":{
                                
                             }
                          },
                          "ipfix":{
                             
                          },
                          "syslog":{
                             "1":{
                                "name":"test syslog",
                                "address":"",
                                "protocol":"udp",
                                "port":"514",
                                "severity":"",
                                "syslog_standard":"",
                                "security": {
                                   "tls_enabled": true,
                                   "tls_certificate": "/etc/ssl/certs/syslog-server-cert.pem",
                                   "tls_key": "/etc/ssl/private/syslog-server-key.pem",
                                   "ca_certificate": "/etc/ssl/certs/ca-cert.pem"
                                }
                             }
                          },
                          "timezone":"est",
                          "domain":"deltasase.com",
                          "ntp":{
                             "1":{
                                "address":"",
                                "source_interface":"",
                                "source_address":"",
                                "max_poll":"",
                                "min_poll":""
                             }
                          },
                          "dns":{
                             "1":{
                                "address":"8.8.8.8",
                                "authentiction":""
                             },
                             "2":{
                                "address":"8.8.8.8",
                                "authentiction":""
                             }
                          },
                          "advance":{
                             "dpdk":{
                                
                             },
                             "vpp":{
                                
                             },
                             "sswan":{
                                
                             }
                          }
                       },
                       "automation":{
                          "scheduled_tasks":{
                             "task1":{
                                "schedule":{
                                   "start time":"14:20:00",
                                   "start date":"04/19/2024",
                                   "interval":24
                                },
                                "script":"/etc/scripts/test.py"
                             }
                          },
                          "event_handler":{
                             "event1":{
                                "event_type":{
                                   
                                },
                                "script":"/etc/scripts/event_test.py"
                             }
                          }
                       },
                       "protocols":{
                          "vrfs":{
                             "LAN1":{
                                "table_id":201,
                                "static routes":{
                                   "1":{
                                      "destination":"10.0.0.0/16",
                                      "next_hop":"",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"10.0.8.8",
                                         "sla_standard":""
                                      }
                                   }
                                },
                                "bgp":{
                                   
                                },
                                "ospf":{
                                   
                                },
                                "isis":{
                                   
                                },
                                "multicast":{
                                   
                                },
                                "arp":{
                                   
                                }
                             },
                             "Inet1":{
                                "table_id":201,
                                "static routes":{
                                   "1":{
                                      "destination":"0.0.0.0/0",
                                      "next_hop":"50.1.1.1",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"8.8.8.8",
                                         "sla_standard":"Internet SLA"
                                      }
                                   }
                                },
                                "bgp":{
                                   
                                },
                                "ospf":{
                                   
                                },
                                "isis":{
                                   
                                },
                                "multicast":{
                                   
                                },
                                "arp":{
                                   
                                }
                             },
                             "management":{
                                "table_id":99,
                                "static routes":{
                                   "1":{
                                      "destination":"0.0.0.0/0",
                                      "next_hop":"50.1.1.1",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"8.8.8.8",
                                         "sla_standard":"Internet SLA"
                                      }
                                   }
                                }
                             }
                          }
                       }
                    },
                    "hub1 device 2":{
                       "id":"2123253443534",
                       "software_version":"1.1.2",
                       "hardware":{
                          "serial_number":"efwe223234324",
                          "model":"SEO1000",
                          "ports":[
                             "mgmt",
                             "1",
                             "2",
                             "3",
                             "4",
                             "5"
                          ]
                       },
                       "vlans":{
                          "1":"TEST VLAN",
                          "2":"Test VLAN2"
                       },
                       "interfaces":{
                          "1":{
                             "type":"port",
                             "role":"internet",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"",
                             "vlan":"",
                             "underlay":"circuit1",
                             "ipv4":{
                                "address":"50.2.11.10/24",
                                "gw":"50.2.11.1"
                             },
                             "ipv6":{
                                
                             },
                             "ha_mirror":true
                          },
                          "bond1":{
                             "type":"bond",
                             "bond_members":[
                                "5"
                             ],
                             "bond_mode":"active",
                             "role":"lan",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"",
                             "vlan":"",
                             "underlay":"circuit1",
                             "ipv4":{
                                "primary":{
                                   "address":"172.16.100.10/24"
                                },
                                "secondary":{
                                   
                                }
                             },
                             "ipv6":{
                                "primary":{
                                   
                                },
                                "secondary":{
                                   
                                }
                             },
                             "dhcp":{
                                "dhcp_relay":{
                                   
                                },
                                "dhcp_server":{
                                   
                                }
                             },
                             "ha_mirror":true
                          },
                          "mgmt":{
                             "type":"port",
                             "role":"mgmt",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"mgmt",
                             "vlan":"",
                             "ipv4":{
                                "address":"192.168.100.10/24",
                                "gw":"192.168.100.1"
                             },
                             "ipv6":{
                                
                             }
                          },
                          "ha_bond":{
                             "type":"bond",
                             "bond_members":[
                                "5"
                             ],
                             "bond_mode":"active",
                             "role":"ha",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"ha",
                             "vlan":"1",
                             "ipv4":{
                                "address":"169.254.1.0/31"
                             }
                          }
                       },
                       "ha":{
                          "pririty":90,
                          "ha_interface":"ha_bond",
                          "peer_address":"169.254.1.0",
                          "track":{
                             "interfaces":{
                                "bond1":{
                                   "flap_rate":"10",
                                   "reduce_priority":"50"
                                }
                             },
                             "prob":{
                                "prob1":{
                                   "target":"8.8.8.8",
                                   "source_address":"",
                                   "source_interface":"",
                                   "sla_standard":"test sla profile"
                                }
                             }
                          }
                       },
                       "system":{
                          "authentication":{
                             "users":{
                                "delta_admin":{
                                   "key":"<<RSA KEY>>",
                                   "password":"",
                                   "role":"superadmin"
                                }
                             },
                             "roles":{
                                
                             }
                          },
                          "session":{
                             "table_size":"2048",
                             "ttl":"600",
                             "tcp":{
                                
                             },
                             "udp":{
                                
                             },
                             "icmp":{
                                
                             },
                             "rtp":{
                                
                             }
                          },
                          "ssh":{
                             "interfaces":[
                                "bond1"
                             ],
                             "allowed_addresses":[
                                "172.16.1.2"
                             ]
                          },
                          "snmp_polling":{
                             "v2":{
                                "community":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "v3":{
                                "username":"",
                                "password":"",
                                "auth_algorytm":"",
                                "encrypt_algorytim":"",
                                "allowed_addresses":[
                                   
                                ]
                             }
                          },
                          "snmp_trap":{
                             "v2":{
                                "community":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "v3":{
                                "username":"",
                                "password":"",
                                "auth_algorytm":"",
                                "encrypt_algorytim":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "snmp_server":""
                          },
                          "certificates":{
                             "ca":{
                                
                             },
                             "machine":{
                                
                             }
                          },
                          "ipfix":{
                             
                          },
                          "syslog":{
                             "1":{
                                "name":"test syslog",
                                "address":"",
                                "protocol":"udp",
                                "port":"514",
                                "severity":"",
                                "syslog_standard":""
                             }
                          },
                          "timezone":"est",
                          "domain":"deltasase.com",
                          "ntp":{
                             "1":{
                                "address":"",
                                "source_interface":"",
                                "source_address":"",
                                "max_poll":"",
                                "min_poll":""
                             }
                          },
                          "dns":{
                             "1":{
                                "address":"8.8.8.8",
                                "authentiction":""
                             },
                             "2":{
                                "address":"8.8.8.8",
                                "authentiction":""
                             }
                          },
                          "advance":{
                             "dpdk":{
                                
                             },
                             "vpp":{
                                
                             },
                             "sswan":{
                                
                             }
                          }
                       },
                       "services":{
                          "dns_service":{
                             "active":true,
                             "caching":true,
                             "port":"53",
                             "interfaces":[
                                "bond1"
                             ],
                             "certificate":{
                                "public_key":"",
                                "private_key":""
                             },
                             "forwarding_servers":{
                                "1":{
                                   "domain_prefix":"*.test.com",
                                   "address":"8.8.8.8",
                                   "dnssec":{
                                      "active":true,
                                      "unsigned_check":false,
                                      "timecheck":false,
                                      "class":"",
                                      "key_tag":"",
                                      "algorythm":"",
                                      "digest_type":"",
                                      "digest":""
                                   },
                                   "public_key":"",
                                   "tag":"",
                                   "source_address":"",
                                   "source_interface":"",
                                   "server":""
                                }
                             },
                             "cache_size":"4096",
                             "max_ttl":"",
                             "min_ttl":"",
                             "neg_ttl":"",
                             "max_entries":"",
                             "logging":"",
                             "static_entries":{
                                "test.net":"15.2.2.4"
                             }
                          }
                       },
                       "automation":{
                          "scheduled_tasks":{
                             "task1":{
                                "schedule":{
                                   "start time":"14:20:00",
                                   "start date":"04/19/2024",
                                   "interval":24
                                },
                                "script":"/etc/scripts/test.py"
                             }
                          },
                          "event_handler":{
                             "event1":{
                                "event_type":{
                                   
                                },
                                "script":"/etc/scripts/event_test.py"
                             }
                          }
                       },
                       "protocols":{
                          "vrfs":{
                             "LAN1":{
                                "table_id":201,
                                "static routes":{
                                   "1":{
                                      "destination":"10.0.0.0/16",
                                      "next_hop":"",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"10.0.8.8",
                                         "sla_standard":""
                                      }
                                   }
                                },
                                "bgp":{
                                   
                                },
                                "ospf":{
                                   
                                },
                                "isis":{
                                   
                                },
                                "multicast":{
                                   
                                },
                                "arp":{
                                   
                                }
                             },
                             "Inet1":{
                                "table_id":201,
                                "static routes":{
                                   "1":{
                                      "destination":"0.0.0.0/0",
                                      "next_hop":"50.1.1.1",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"8.8.8.8",
                                         "sla_standard":"Internet SLA"
                                      }
                                   }
                                },
                                "bgp":{
                                   
                                },
                                "ospf":{
                                   
                                },
                                "isis":{
                                   
                                },
                                "multicast":{
                                   
                                },
                                "arp":{
                                   
                                }
                             },
                             "management":{
                                "table_id":99,
                                "static routes":{
                                   "1":{
                                      "destination":"0.0.0.0/0",
                                      "next_hop":"50.1.1.1",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"8.8.8.8",
                                         "sla_standard":"Internet SLA"
                                      }
                                   }
                                }
                             }
                          }
                       }
                    }
                 }
              }
           },
           "branch_groups":{
               "test site group1":{
                   "id":"1125888",
                   "tags":[
                       ""
                   ],
                   "type":"full mesh",
                   "hub1":"hub1",
                   "hub2":"",
                   "hub3":"",
                   "hub4":"",
                   "sase":{
                       "enabled": true,
                       "auto":true,
                       "edge_nodes":["us-east-01-01", "us-east-01-02"]
                   },
                   "default_template":"test site template",
                   "policies":{
                       "qos":{
                           "slot1":"", 
                           "slot2":"", 
                           "slot3":"qos policy 1", 
                           "slot4":"default qos policy"
                       },
                       "security": {
                           "slot1":"", 
                           "slot2":"", 
                           "slot3":"security policy 1", 
                           "slot4":"default security policy"
                       },
                       "route": {
                           "slot1":"", 
                           "slot2":"", 
                           "slot3":"traffic policy 1", 
                           "slot4":"default traffic policy"
                       },
                       "nat":{
                           "slot1":"", 
                           "slot2":"", 
                           "slot3":"nat policy 1", 
                           "slot4":"default nat policy"
                       }
                   }
              }
           },
           "branches":{
               "Site1":{
                   "id":"111",
                   "site_group":"test site group1",
                   "site_template":"",
                   "address":{
                       "street":"",
                       "street2":"",
                       "country":"",
                       "city":"",
                       "state":"",
                       "zip":"",
                       "coordinate":{
                           "latitude":"",
                           "longitude":""
                       }
                   },
                   "tags":[],
                   "policies":{
                       "qos":{
                           "slot1":"", 
                           "slot2":"local qos policy 1", 
                           "slot3":"qos policy 1", 
                           "slot4":"default qos policy"
                       },
                       "security": {
                           "slot1":"", 
                           "slot2":"local security policy 1", 
                           "slot3":"security policy 1", 
                           "slot4":"default security policy"
                       },
                       "traffic": {
                           "slot1":"", 
                           "slot2":"local traffic policy 1", 
                           "slot3":"traffic policy 1", 
                           "slot4":"default traffic policy"
                       },
                       "nat":{
                           "slot1":"", 
                           "slot2":"local nat policy 1", 
                           "slot3":"nat policy 1", 
                           "slot4":"default nat policy"
                       }
                   },
                   "underlays":{
                       "circuit1":{
                           "description":"",
                           "up_bw":10,
                           "down_bw":50,
                           "shaping":true,
                           "metered":false,
                           "underlay_standard":"",
                           "tags":[],
                           "service_provider":"isp1",
                           "transport":"1",
                           "sla_target":"",
                           "sla_standard":""
                       }
                   },
                   "overlays":{
                       "default_active":true,
                       "sdwan":{
                           "112223344":{
                           "id":"112223344",
                           "active":true,
                           "shutdown": false,
                           "underlay":{
                               "local":"54898744444",
                               "remote":"5246546d463"
                           },
                           "sla_standard": "default sla_standard"
                           },
                           "22222233555":{
                           "id":"112223341",
                           "active":true,
                           "shutdown": false,
                           "underlay":{
                               "local":"54898744444",
                               "remote":"524654687463"
                           },
                           "sla_standard": "default sla_standard"
                           }
                       },
                       "sase":{
                           "2323232323":{
                           "id":"11222323344",
                           "active":true,
                           "shutdown": false,
                           "underlay":"54898744444",
                           "sce":"458875421555",
                           "sla_standard": "default sla_standard"
                           }
                       }
                   },
                   "ha":{
                       "interval":1000,
                       "failure_count":5,
                       "hold_time":5000,
                       "preemptive":true,
                       "session_sync":false,
                       "userdb_sync":true
                   },
                   "devices":{
                       "test device 1":{
                           "id":"2123253443534",
                           "software_version":"1.1.2",
                           "hardware":{
                           "serial_number":"efwe223234324",
                           "model":"SEO1000",
                           "ports":[
                               "mgmt",
                               "1",
                               "2",
                               "3",
                               "4",
                               "5"
                           ]
                           },
                           "vlans":{
                           "1":"TEST VLAN",
                           "2":"Test VLAN2"
                           },
                           "interfaces":{
                           "1":{
                               "type":"port",
                               "role":"internet",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"",
                               "vlan":"",
                               "underlay":"circuit1",
                               "ipv4":{
                                   "address":"50.2.11.10/24",
                                   "gw":"50.2.11.1"
                               },
                               "ipv6":{
                                   
                               },
                               "ha_mirror":true
                           },
                           "bond1":{
                               "type":"bond",
                               "bond_members":[
                                   "5"
                               ],
                               "bond_mode":"active",
                               "role":"lan",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"",
                               "vlan":"",
                               "underlay":"circuit1",
                               "ipv4":{
                                   "primary":{
                                       "address":"172.16.100.10/24"
                                   },
                                   "secondary":{
                                       
                                   }
                               },
                               "ipv6":{
                                   "primary":{
                                       
                                   },
                                   "secondary":{
                                       
                                   }
                               },
                               "dhcp":{
                                   "dhcp_relay":{
                                       "enabled": true,
                                       "relay_ip": ["172.31.1.1", "172.31.2.1"],
                                       "source_interface": "",
                                       "options":{
                                       "option_82": true
                                       },
                                       "giaddr_policy": "preserve",
                                       "rate_limit":"",
                                       "dhcp_relay_standard":""
                                   },
                                   "dhcp_server":{
                                       "enabled": true,
                                       "range_start": "172.16.100.20",
                                       "range_end": "172.16.100.100",
                                       "default_lease_time": 3600,
                                       "max_lease_time": 7200,
                                       "subnet_mask": "255.255.255.0",
                                       "domain_name": "localdomain",
                                       "dns_servers": ["172.16.100.10", "8.8.8.8"],
                                       "default_gateway": "172.16.100.1",
                                       "ntp_servers": ["time.google.com"],
                                       "options": {
                                       "option_150": ["172.16.100.10"],
                                       "custom_option_1": {
                                           "code": 160,
                                           "data": "custom_data",
                                           "type": "string"
                                       }
                                       },
                                       "win_servers": ["172.16.100.15"],
                                       "netbios_name_servers": ["172.16.100.15"],
                                       "netbios_node_type": 2,
                                       "dhcp_server_standard":"",
                                       "reserved":[
                                       {
                                           "ip":"172.16.100.10",
                                           "mac":"aa:aaa:Aa:11:aa"
                                       }
                                       ]
                                   }
                               },
                               "ha_mirror":true
                           },
                           "mgmt":{
                               "type":"port",
                               "role":"mgmt",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"mgmt",
                               "vlan":"",
                               "ipv4":{
                                   "address":"192.168.100.10/24",
                                   "gw":"192.168.100.1"
                               },
                               "ipv6":{
                                   
                               }
                           },
                           "ha_bond":{
                               "type":"bond",
                               "bond_members":[
                                   "5"
                               ],
                               "bond_mode":"active",
                               "role":"ha",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"ha",
                               "vlan":"1",
                               "ipv4":{
                                   "address":"169.254.1.0/31"
                               }
                           }
                           },
                           "ha":{
                           "pririty":100,
                           "ha_interface":"ha_bond",
                           "peer_address":"169.254.1.1",
                           "track":{
                               "interfaces":{
                                   "bond1":{
                                       "flap_rate":"10",
                                       "reduce_priority":"50"
                                   }
                               },
                               "prob":{
                                   "prob1":{
                                       "target":"8.8.8.8",
                                       "source_address":"",
                                       "source_interface":"",
                                       "sla_standard":"test sla profile"
                                   }
                               }
                           }
                           },
                           "system":{
                           "authentication":{
                               "users":{
                                   "delta_admin":{
                                       "key":"<<RSA KEY>>",
                                       "password":"",
                                       "role":"superadmin"
                                   }
                               },
                               "roles":{
                                   
                               }
                           },
                           "session":{
                               "table_size":"2048",
                               "ttl":"600",
                               "tcp":{
                                   
                               },
                               "udp":{
                                   
                               },
                               "icmp":{
                                   
                               },
                               "rtp":{
                                   
                               }
                           },
                           "ssh":{
                               "interfaces":[
                                   "bond1"
                               ],
                               "allowed_addresses":[
                                   "172.16.1.2"
                               ]
                           },
                           "snmp_polling":{
                               "source_interface":"",
                               "v2":{
                                   "community":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "v3":{
                                   "username":"",
                                   "password":"",
                                   "auth_algorytm":"",
                                   "encrypt_algorytim":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               }
                           },
                           "snmp_trap":{
                               "v2":{
                                   "community":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "v3":{
                                   "username":"",
                                   "password":"",
                                   "auth_algorytm":"",
                                   "encrypt_algorytim":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "snmp_server":""
                           },
                           "certificates":{
                               "ca":{
                                   
                               },
                               "machine":{
                                   
                               }
                           },
                           "ipfix":{
                               "enabled": true,
                               "export_interval": 60,
                               "collector": {
                                   "ip_address": "192.168.100.101",
                                   "port": 4739,
                                   "transport_protocol": "UDP"
                               },
                               "template_refresh_time": 600,
                               "option_template": true,
                               "record_fields": [
                                   "sourceIPv4Address",
                                   "destinationIPv4Address",
                                   "sourceTransportPort",
                                   "destinationTransportPort",
                                   "protocolIdentifier",
                                   "packetDeltaCount",
                                   "octetDeltaCount",
                                   "flowStartSysUpTime",
                                   "flowEndSysUpTime"
                               ],
                               "interfaces":[],
                               "source_interface":"",
                               "ipfix_standard":"Default IPFIX config"
       
                           },
                           "syslog":{
                               "enabled": true,
                               "servers": [
                                   {
                                   "ip_address": "192.168.100.106",
                                   "port": 514,
                                   "transport_protocol": "UDP",
                                   "facility": "local4",
                                   "severity": "info"
                                   }
                               ],
                               "syslog_standard":"Test Syslog_config"
                           },
                           "timezone":"est",
                           "domain":"deltasase.com",
                           "ntp":{
                               "ntp_standard":"",
                               "1":{
                                   "address":"",
                                   "source_interface":"",
                                   "source_address":"",
                                   "max_poll":"",
                                   "min_poll":""
                               }
                           },
                           "dns":{
                               "1":{
                                   "address":"8.8.8.8",
                                   "authentiction":""
                               },
                               "2":{
                                   "address":"8.8.8.8",
                                   "authentiction":""
                               }
                           },
                           "advance":{
                               "dpdk":{
                                   
                               },
                               "vpp":{
                                   
                               },
                               "sswan":{
                                   
                               }
                           }
                           },
                           "services":{
                           "dns_service":{
                               "active":true,
                               "caching":true,
                               "port":"53",
                               "interfaces":[
                                   "bond1"
                               ],
                               "certificate":{
                                   "public_key":"",
                                   "private_key":""
                               },
                               "forwarding_servers":{
                                   "1":{
                                       "domain_prefix":"*.test.com",
                                       "address":"8.8.8.8",
                                       "dnssec":{
                                       "active":true,
                                       "unsigned_check":false,
                                       "timecheck":false,
                                       "class":"",
                                       "key_tag":"",
                                       "algorythm":"",
                                       "digest_type":"",
                                       "digest":""
                                       },
                                       "public_key":"",
                                       "tag":"",
                                       "source_address":"",
                                       "source_interface":"",
                                       "server":""
                                   }
                               },
                               "cache_size":"4096",
                               "max_ttl":"",
                               "min_ttl":"",
                               "neg_ttl":"",
                               "max_entries":"",
                               "logging":"",
                               "static_entries":{
                                   "test.net":"15.2.2.4"
                               }
                           }
                           },
                           "automation":{
                           "scheduled_tasks":{
                               "task1":{
                                   "schedule":{
                                       "start time":"14:20:00",
                                       "start date":"04/19/2024",
                                       "interval":24
                                   },
                                   "script":"/etc/scripts/test.py"
                               }
                           },
                           "event_handler":{
                               "event1":{
                                   "event_type":{
                                       
                                   },
                                   "script":"/etc/scripts/event_test.py"
                               }
                           }
                           },
                           "protocols":{
                           "vrfs":{
                               "LAN1":{
                                   "table_id":201,
                                   "static routes":{
                                       "1":{
                                       "destination":"10.0.0.0/16",
                                       "next_hop":"",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"10.0.8.8",
                                           "sla_standard":""
                                       }
                                       }
                                   },
                                   "bgp":{
                                       
                                   },
                                   "ospf":{
                                       
                                   },
                                   "isis":{
                                       
                                   },
                                   "multicast":{
                                       
                                   },
                                   "arp":{
                                       
                                   }
                               },
                               "Inet1":{
                                   "table_id":201,
                                   "static routes":{
                                       "1":{
                                       "destination":"0.0.0.0/0",
                                       "next_hop":"50.1.1.1",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"8.8.8.8",
                                           "sla_standard":"Internet SLA"
                                       }
                                       }
                                   },
                                   "bgp":{
                                       
                                   },
                                   "ospf":{
                                       
                                   },
                                   "isis":{
                                       
                                   },
                                   "multicast":{
                                       
                                   },
                                   "arp":{
                                       
                                   }
                               },
                               "management":{
                                   "table_id":99,
                                   "static routes":{
                                       "1":{
                                       "destination":"0.0.0.0/0",
                                       "next_hop":"50.1.1.1",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"8.8.8.8",
                                           "sla_standard":"Internet SLA"
                                       }
                                       }
                                   }
                               }
                           }
                           }
                       },
                       "test device 2":{
                           "id":"2123253443534",
                           "software_version":"1.1.2",
                           "hardware":{
                           "serial_number":"efwe223234324",
                           "model":"SEO1000",
                           "ports":[
                               "mgmt",
                               "1",
                               "2",
                               "3",
                               "4",
                               "5"
                           ]
                           },
                           "vlans":{
                           "1":"TEST VLAN",
                           "2":"Test VLAN2"
                           },
                           "interfaces":{
                           "1":{
                               "type":"port",
                               "role":"internet",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"",
                               "vlan":"",
                               "underlay":"circuit1",
                               "ipv4":{
                                   "address":"50.2.11.10/24",
                                   "gw":"50.2.11.1"
                               },
                               "ipv6":{
                                   
                               },
                               "ha_mirror":true
                           },
                           "bond1":{
                               "type":"bond",
                               "bond_members":[
                                   "5"
                               ],
                               "bond_mode":"active",
                               "role":"lan",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"",
                               "vlan":"",
                               "underlay":"circuit1",
                               "ipv4":{
                                   "primary":{
                                       "address":"172.16.100.10/24"
                                   },
                                   "secondary":{
                                       
                                   }
                               },
                               "ipv6":{
                                   "primary":{
                                       
                                   },
                                   "secondary":{
                                       
                                   }
                               },
                               "dhcp":{
                                   "dhcp_relay":{
                                       
                                   },
                                   "dhcp_server":{
                                       
                                   }
                               },
                               "ha_mirror":true
                           },
                           "mgmt":{
                               "type":"port",
                               "role":"mgmt",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"mgmt",
                               "vlan":"",
                               "ipv4":{
                                   "address":"192.168.100.10/24",
                                   "gw":"192.168.100.1"
                               },
                               "ipv6":{
                                   
                               }
                           },
                           "ha_bond":{
                               "type":"bond",
                               "bond_members":[
                                   "5"
                               ],
                               "bond_mode":"active",
                               "role":"ha",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"ha",
                               "vlan":"1",
                               "ipv4":{
                                   "address":"169.254.1.0/31"
                               }
                           }
                           },
                           "ha":{
                           "pririty":90,
                           "ha_interface":"ha_bond",
                           "peer_address":"169.254.1.0",
                           "track":{
                               "interfaces":{
                                   "bond1":{
                                       "flap_rate":"10",
                                       "reduce_priority":"50"
                                   }
                               },
                               "prob":{
                                   "prob1":{
                                       "target":"8.8.8.8",
                                       "source_address":"",
                                       "source_interface":"",
                                       "sla_standard":"test sla profile"
                                   }
                               }
                           }
                           },
                           "system":{
                           "authentication":{
                               "users":{
                                   "delta_admin":{
                                       "key":"<<RSA KEY>>",
                                       "password":"",
                                       "role":"superadmin"
                                   }
                               },
                               "roles":{
                                   
                               }
                           },
                           "session":{
                               "table_size":"2048",
                               "ttl":"600",
                               "tcp":{
                                   
                               },
                               "udp":{
                                   
                               },
                               "icmp":{
                                   
                               },
                               "rtp":{
                                   
                               }
                           },
                           "ssh":{
                               "interfaces":[
                                   "bond1"
                               ],
                               "allowed_addresses":[
                                   "172.16.1.2"
                               ]
                           },
                           "snmp_polling":{
                               "v2":{
                                   "community":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "v3":{
                                   "username":"",
                                   "password":"",
                                   "auth_algorytm":"",
                                   "encrypt_algorytim":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               }
                           },
                           "snmp_trap":{
                               "v2":{
                                   "community":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "v3":{
                                   "username":"",
                                   "password":"",
                                   "auth_algorytm":"",
                                   "encrypt_algorytim":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "snmp_server":""
                           },
                           "certificates":{
                               "ca":{
                                   
                               },
                               "machine":{
                                   
                               }
                           },
                           "ipfix":{
                               
                           },
                           "syslog":{
                               "1":{
                                   "name":"test syslog",
                                   "address":"",
                                   "protocol":"udp",
                                   "port":"514",
                                   "severity":"",
                                   "syslog_standard":"",
                                   "security": {
                                       "tls_enabled": true,
                                       "tls_certificate": "/etc/ssl/certs/syslog-server-cert.pem",
                                       "tls_key": "/etc/ssl/private/syslog-server-key.pem",
                                       "ca_certificate": "/etc/ssl/certs/ca-cert.pem"
                                   }
                               }
                           },
                           "timezone":"est",
                           "domain":"deltasase.com",
                           "ntp":{
                               "1":{
                                   "address":"",
                                   "source_interface":"",
                                   "source_address":"",
                                   "max_poll":"",
                                   "min_poll":""
                               }
                           },
                           "dns":{
                               "1":{
                                   "address":"8.8.8.8",
                                   "authentiction":""
                               },
                               "2":{
                                   "address":"8.8.8.8",
                                   "authentiction":""
                               }
                           },
                           "advance":{
                               "dpdk":{
                                   
                               },
                               "vpp":{
                                   
                               },
                               "sswan":{
                                   
                               }
                           }
                           },
                           "services":{
                           "dns_service":{
                               "active":true,
                               "caching":true,
                               "port":"53",
                               "interfaces":[
                                   "bond1"
                               ],
                               "certificate":{
                                   "public_key":"",
                                   "private_key":""
                               },
                               "forwarding_servers":{
                                   "1":{
                                       "domain_prefix":"*.test.com",
                                       "address":"8.8.8.8",
                                       "dnssec":{
                                       "active":true,
                                       "unsigned_check":false,
                                       "timecheck":false,
                                       "class":"",
                                       "key_tag":"",
                                       "algorythm":"",
                                       "digest_type":"",
                                       "digest":""
                                       },
                                       "public_key":"",
                                       "tag":"",
                                       "source_address":"",
                                       "source_interface":"",
                                       "server":""
                                   }
                               },
                               "cache_size":"4096",
                               "max_ttl":"",
                               "min_ttl":"",
                               "neg_ttl":"",
                               "max_entries":"",
                               "logging":"",
                               "static_entries":{
                                   "test.net":"15.2.2.4"
                               }
                           }
                           },
                           "automation":{
                           "scheduled_tasks":{
                               "task1":{
                                   "schedule":{
                                       "start time":"14:20:00",
                                       "start date":"04/19/2024",
                                       "interval":24
                                   },
                                   "script":"/etc/scripts/test.py"
                               }
                           },
                           "event_handler":{
                               "event1":{
                                   "event_type":{
                                       
                                   },
                                   "script":"/etc/scripts/event_test.py"
                               }
                           }
                           },
                           "protocols":{
                           "vrfs":{
                               "LAN1":{
                                   "table_id":201,
                                   "static routes":{
                                       "1":{
                                       "destination":"10.0.0.0/16",
                                       "next_hop":"",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"10.0.8.8",
                                           "sla_standard":""
                                       }
                                       }
                                   },
                                   "bgp":{
                                       
                                   },
                                   "ospf":{
                                       
                                   },
                                   "isis":{
                                       
                                   },
                                   "multicast":{
                                       
                                   },
                                   "arp":{
                                       
                                   }
                               },
                               "Inet1":{
                                   "table_id":201,
                                   "static routes":{
                                       "1":{
                                       "destination":"0.0.0.0/0",
                                       "next_hop":"50.1.1.1",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"8.8.8.8",
                                           "sla_standard":"Internet SLA"
                                       }
                                       }
                                   },
                                   "bgp":{
                                       
                                   },
                                   "ospf":{
                                       
                                   },
                                   "isis":{
                                       
                                   },
                                   "multicast":{
                                       
                                   },
                                   "arp":{
                                       
                                   }
                               },
                               "management":{
                                   "table_id":99,
                                   "static routes":{
                                       "1":{
                                       "destination":"0.0.0.0/0",
                                       "next_hop":"50.1.1.1",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"8.8.8.8",
                                           "sla_standard":"Internet SLA"
                                       }
                                       }
                                   }
                               }
                           }
                           }
                       }
                   }
               
            }
         }
      }    
   }
}
#####end /root/delta_api/delta_sase/tenant.json#####
______________________________
#####start /root/delta_api/delta_sase/notes.txt#####



#########postgress docker##########
docker run -d \
  --name postgres \
  -e POSTGRES_USER=admin \
  -e POSTGRES_PASSWORD=admin \
  -p 5432:5432 \
  -v /root/delta_api/data:/var/lib/postgresql/data \
  postgres:13

#####end /root/delta_api/delta_sase/notes.txt#####
______________________________
#####start /root/delta_api/delta_sase/.gitignore#####
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

#####end /root/delta_api/delta_sase/.gitignore#####
______________________________
#####start /root/delta_api/delta_sase/project.txt#####
This is Delta_SASE Project Django tenant DRF files and their contents

/root/delta_api/delta_sase
├── base
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       ├── 0001_initial.cpython-310.pyc
│   │       └── __init__.cpython-310.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-310.pyc
│   │   ├── apps.cpython-310.pyc
│   │   ├── __init__.cpython-310.pyc
│   │   ├── middleware.cpython-310.pyc
│   │   ├── models.cpython-310.pyc
│   │   ├── serializers.cpython-310.pyc
│   │   ├── urls.cpython-310.pyc
│   │   └── views.cpython-310.pyc
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── config
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── dashboard
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── debug.log
├── delta_sase
│   ├── asgi.py
│   ├── celery.py
│   ├── context_processors.py
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-310.pyc
│   │   ├── settings.cpython-310.pyc
│   │   ├── urls_public.cpython-310.pyc
│   │   ├── urls_tenants.cpython-310.pyc
│   │   └── wsgi.cpython-310.pyc
│   ├── settings.py
│   ├── tasks.py
│   ├── urls_public.py
│   ├── urls.py
│   ├── urls_tenants.py
│   ├── views.py
│   └── wsgi.py
├── manage.py
├── notes.txt
├── objects_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── policies_security_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── project.txt
├── README.md
├── requirements2.txt
├── requirments.txt
├── resources_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       ├── 0001_initial.cpython-310.pyc
│   │       └── __init__.cpython-310.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-310.pyc
│   │   ├── apps.cpython-310.pyc
│   │   ├── __init__.cpython-310.pyc
│   │   ├── models.cpython-310.pyc
│   │   ├── serializers.cpython-310.pyc
│   │   ├── urls.cpython-310.pyc
│   │   └── views.cpython-310.pyc
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── scripts
│   ├── api_calls.py
│   ├── create_customer.py
│   ├── create_support.py
│   ├── create_tenant.py
│   ├── db_cleanup.py
│   ├── queries.sql
│   └── tests
│       └── tenants_app.py
├── snapshot.json
├── standards_network_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── standards_security_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── standards_service_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── standards_system_app
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── tenant.json
└── tenants_app
    ├── admin.py
    ├── apps.py
    ├── default_settings.py
    ├── forms.py
    ├── __init__.py
    ├── management
    │   ├── commands
    │   │   ├── create_public.py
    │   │   ├── create_reserve.py
    │   │   ├── __init__.py
    │   │   └── __pycache__
    │   │       ├── create_public.cpython-310.pyc
    │   │       ├── create_reserve.cpython-310.pyc
    │   │       └── __init__.cpython-310.pyc
    │   ├── __init__.py
    │   └── __pycache__
    │       └── __init__.cpython-310.pyc
    ├── middleware.py
    ├── migrations
    │   ├── 0001_initial.py
    │   ├── __init__.py
    │   └── __pycache__
    │       ├── 0001_initial.cpython-310.pyc
    │       └── __init__.cpython-310.pyc
    ├── models.py
    ├── postgres.py
    ├── __pycache__
    │   ├── admin.cpython-310.pyc
    │   ├── apps.cpython-310.pyc
    │   ├── default_settings.cpython-310.pyc
    │   ├── __init__.cpython-310.pyc
    │   ├── middleware.cpython-310.pyc
    │   ├── models.cpython-310.pyc
    │   ├── serializers.cpython-310.pyc
    │   ├── urls.cpython-310.pyc
    │   └── views.cpython-310.pyc
    ├── serializers.py
    ├── signals.py
    ├── tenant_create.py
    ├── tests.py
    ├── urls.py
    └── views.py

36 directories, 163 files


#####start /root/delta_api/delta_sase/snapshot.json#####
{
    "snapshot_id":111111,
    "created_at":"04/28/2024 18:42",
    "created_by":"admin1",
    "scope":"/tenant/1111/site/",
    "config": {

    }
}
#####end /root/delta_api/delta_sase/snapshot.json#####
______________________________
#####start /root/delta_api/delta_sase/tenant.json#####
{
   "created_at":"18/04/2024 13:51:01",
   "created_by":"amir@deltasase.com",
   "tenant_id":"112233",
   "tenant_name":"test Tenant",
   "customer_id":"556688",
   "customer_name":"TEST Customer",
   "parent":"",
   "products":["SDWAN","SASE_RU","SASE_Branch"],
   "licenses":{
       "sdwan":{
          
       }
   },
   "configuration":{
       "settings":{
           "general":{

           },
           "logging":{
               "Customer 1 syslog":{
                  "address":"",
                  "port":"",
                  "protocol":"tcp",
                  "security": {
                     "tls_enabled": true,
                     "tls_certificate": "syslog-server2-cert.pem",
                     "tls_key": "syslog-server2-key.pem",
                     "ca_certificate": "ca-cert.pem"
                 },
                  "events":[]
               }
           },
           "administrators":{
               "admin": {
                   "username": "admin",
                   "password_hash": "hashed_password",
                   "permissions": "full",
                   "mfa_enabled": true,
                   "allowed_addresses":["any"]
               },
               "operator": {
                   "username": "operator",
                   "password_hash": "hashed_password",
                   "permissions": "read-only",
                   "mfa_enabled": false,
                   "allowed_addresses":["any"]
               }
           },
           "api_tokens":{

           },
           "integrations":{
               "infoblox":{
                  
               },
               "aws":{
                  
               },
               "azure":{
                  
               },
               "gcp":{
                  
               },
               "service now":{
                  
               },
               "kubernetes":{
         
               }
           }
       },
       "resources":{
           "machine_groups":{
              "MachineGroup1_mobiles":{
                 "machines":{
                    "Machine1":{
                       "id":"111",
                       "type":"",
                       "vendor":"",
                       "model":"",
                       "os":"android",
                       "serial_number":"125ffe54",
                       "certificate":"",
                       "admins":[""],
                       "users":[""]
                    }
                 },
                 "machine_compliance_standard":"Default Compliance Standard"
              },
              "MachineGroup2_laptops":{
                 "machines":{
                    "Machine2":{
                       "id":"2222",
                       "model":"del 5440",
                       "os":"win11",
                       "serial_number":"ddd5ffde54",
                       "certificate":"",
                       "admins":"testadminuser",
                       "users":"testuser"
                    }
                 },
                 "machine_compliance_standard":"Default Compliance Standard"
              }
           },
           "transports":{
              "1":"Internet",
              "2":"MPLS1"
           },
           "service_providers":{
              "Comcast":{
                 
              },
              "ISP2":{
                 
              }
           },
           "vrfs":{
              "LAN1":{
                 "table_id":101,
                 "rd":"65001:65558",
                 "vni":"33333"
              }
           },
           "dsn_devices":{
               "FCb223156533":{
                   "registered": true,
                   "child_tenant":""
               },
               "FCb223156534":{
                   "registered": true,
                   "child_tenant":""
               }
           },
           "servers":{
              "dhcp_servers":{
                 
              },
              "dns_servers":{
                 "google dns":{
                    "domain_prefix":"*",
                    "address":"8.8.8.8",
                    "dnssec":{
                       "active":false,
                       "unsigned_check":false,
                       "timecheck":false,
                       "class":"",
                       "key_tag":"",
                       "algorythm":"",
                       "digest_type":"",
                       "digest":""
                    },
                    "public_key":"",
                    "tags":[]
                 }
              },
              "syslog_servers":{
                 
              },
              "mail_servers":{
                 
              },
              "application_servers":{
                 
              },
              "print_servers":{
                 
              },
              "collaboration_servers":{
                 
              },
              "ipfix_collectors":{
                 
              },
              "web_servers":{
                 
              },
              "ldap_servers":{
                 
              },
              "active_directories":{
                 
              },
              "file_servers":{
                 
              }
           }
       },
       "standards":{
           "secuirty_standards": {
               "compliance_standards":{
                   "Default Compliance Standard": {
                       "operating_system": {
                           "type": "Windows",
                           "version": "11",
                           "supported_until": "2030-01-01"
                       },
                       "security_features": {
                           "firewall": "enabled",
                           "antivirus": "active",
                           "antispyware": "active",
                           "latest_security_patches": "installed",
                           "disk_encryption": {
                           "enabled": true,
                           "type": "BitLocker"
                           }
                       },
                       "system_policies": {
                           "password_policy": {
                           "minimum_length": 8,
                           "complexity": "high",
                           "expiration_days": 90,
                           "history_count": 5
                           },
                           "screen_lock": {
                           "enabled": true,
                           "timeout_seconds": 300
                           }
                       },
                       "network_settings": {
                           "vpn_required": true,
                           "wifi_security": {
                           "encryption_type": "WPA3"
                           }
                       },
                       "hardware_compliance": {
                           "tpm_version": "2.0",
                           "disk_type": "SSD",
                           "minimum_ram_gb": 8,
                           "bios_firmware": {
                           "version": "latest",
                           "secure_boot_enabled": true
                           }
                       },
                       "required_software": [
                           {
                           "name": "CompanySecurityAgent",
                           "version": "latest"
                           },
                           {
                           "name": "RemoteManagementTool",
                           "version": "latest"
                           }
                       ],
                       "user_compliance": {
                           "mandatory_training_completed": true,
                           "phishing_test_passed": true
                       }
                   }
               },
               "antivirus":{
                   "Default Antivirus Standard":{
                       "scan_engine": "real-time",
                       "scan_type": "full-scan",
                       "action_on_detection": {
                       "default_action": "block",
                       "notification": "log_event",
                       "secondary_action": "quarantine"
                       },
                       "update_settings": {
                       "update_interval": "hourly",
                       "update_source": "official_vendor_site",
                       "automatic_updates": true
                       },
                       "exclusions": {
                       "file_types": [".txt", ".jpg"],
                       "applications": ["trusted_app"]
                       }
                   }
               },
               "dlp": {
                   "Default DLP Standard":{
                       "enabled": true,
                       "content_inspection": {
                           "deep_inspection": true,
                           "data_types": ["credit_cards", "social_security_numbers", "confidential_emails"],
                           "actions": {
                           "on_detection": ["alert", "quarantine", "block"],
                           "exceptions": [
                               {
                               "user_groups": ["executive_team"],
                               "action": "log_only"
                               }
                           ]
                       }
                       },
                       "network_protection": {
                           "protocols": ["http", "https", "ftp"],
                           "inspect_encrypted_traffic": true
                       },
                       "endpoint_protection": {
                           "monitor_clipboard_content": true,
                           "block_sensitive_data_transfer": ["usb", "bluetooth", "email"]
                       },
                       "storage_protection": {
                           "cloud_storage": ["Google Drive", "Dropbox"],
                           "actions": ["encrypt", "block"]
                       }
                   }
               },
               "ids_ips":{
                   "Default IDS Standard":{
                       "enabled": true,
                       "signature_based_detection": {
                       "update_interval": "daily",
                       "signatures": [
                           {
                           "id": "2001",
                           "name": "SQL Injection Attempt",
                           "severity": "high",
                           "action": "alert_and_block"
                           }
                       ]
                       },
                       "anomaly_based_detection": {
                       "enabled": true,
                       "threshold": 5,
                       "actions": ["alert_admin", "restrict_access"]
                       },
                       "automated_response": {
                       "rules": [
                           {
                           "trigger": "high_severity_alert",
                           "actions": ["isolate_infected_system", "initiate_scan", "notify_security_team"]
                           },
                           {
                           "trigger": "repeated_login_failures",
                           "actions": ["temporary_account_lock", "alert_user_and_admin"]
                           }
                       ]
                       },
                       "integration": {
                       "with_siem": true,
                       "with_ticketing_system": true
                       }
                   }
               },
               "ssl":{
                   "Default SSL Standard":{
                       "decryption_policy": "selective",
                       "targets": [
                       {
                           "domain": "example.com",
                           "action": "decrypt"
                       },
                       {
                           "domain": "sensitivebanking.com",
                           "action": "no-decrypt"
                       }
                       ],
                       "certificate_handling": {
                       "trust_known_certificates": true,
                       "inspect_untrusted_certificates": true
                       },
                       "exclusions": {
                       "categories": ["financial", "health"]
                       }
                   }
               },
               "inspection":{
                   "actions": {
                       "malware": "block",
                       "protocol_anomalies": "alert",
                       "file_type_mismatch": "block"
                   },
                   "content_inspection": {
                       "enabled": true,
                       "rules": [
                       {
                           "content_type": "executable_files",
                           "action": "scan"
                       },
                       {
                           "content_type": "multimedia_files",
                           "action": "log"
                       }
                       ]
                   },
                   "deep_inspection": {
                       "enabled": true,
                       "byte_limit": 5000000,
                       "time_limit": 10
                   }
               },
               "malware":{
                   "Default Malware Protection Standard":{
                       "sandboxing": {
                           "enabled": true,
                           "action_on_detection": {
                               "block": true,
                               "quarantine": true,
                               "notify_admin": true
                           },
                           "analysis_servers": [
                               {
                                   "ip_address": "10.10.10.10",
                                   "port": 443,
                                   "protocol": "HTTPS"
                               },
                               {
                                   "ip_address": "10.10.10.11",
                                   "port": 443,
                                   "protocol": "HTTPS"
                               }
                           ]
                       },
                       "behavioral_analysis": {
                           "enabled": true,
                           "action_on_detection": {
                               "alert": true,
                               "kill_process": true,
                               "notify_user": true
                           },
                           "analysis_engine": {
                               "ip_address": "10.10.20.10",
                               "port": 8080,
                               "protocol": "HTTP"
                           }
                       }
                   }
               }
           },
           "service_standards":{
               "dns_service":{
                   "dns standard 1":{
                       "active":true,
                       "caching":true,
                       "port":"53",
                       "interface_tags":[
                           "dns_listen"
                       ],
                       "certificate":{
                           "public_key":"",
                           "private_key":"",
                           "trusted_ca":""
                       },
                       "forwarding_servers": {
                           "1": {
                           "domain_prefix": "*.test.com",
                           "address": "8.8.8.8",
                           "dnssec": {
                               "active": true,
                               "unsigned_check": false, 
                               "timecheck": false,      
                               "class": "IN",           
                               "key_tag": "12345",      
                               "algorithm": "RSASHA256",
                               "digest_type": "2",      
                               "digest": "digest_value" 
                           },
                           "public_key": "server_public_key.pem", 
                           "tag": "primary_server",               
                           "source_address_tag":"dns_forward",
                           "source_interface_tag":"dns_forward",
                           "server": "dns_server_name" 
                           }
                       },
                       "cache_size": "4096",
                       "max_ttl": "86400",      
                       "min_ttl": "3600",       
                       "neg_ttl": "300",        
                       "max_entries": "10000",  
                       "logging": "enabled",   
                       "static_entries":{
                           "test.net":"15.2.2.4"
                       }
                   }
               },
               "dhcp_server":{
                   "Test DHCP Server Standard":{
                       "enabled": true,
                       "start_count": 5,
                       "end_count": 10,
                       "default_lease_time": 3600,
                       "max_lease_time": 7200,
                       "domain_name": "localdomain",
                       "dns_servers": ["172.16.100.10", "8.8.8.8"],
                       "ntp_servers": ["time.google.com"],
                       "options": {
                           "option_150": ["172.16.100.10"],
                           "custom_option_1": {
                               "code": 160,
                               "data": "custom_data",
                               "type": "string"
                           }
                       },
                       "win_servers": ["172.16.100.15"],
                       "netbios_name_servers": ["172.16.100.15"],
                       "netbios_node_type": 2
                   }
               },
               "dhcp_relay":{
                   "Test DHCP Relay Standard":{
                       "enabled": true,
                       "relay_ip": ["172.31.1.1", "172.31.2.1"],
                       "source_interface": "self",
                       "options":{
                           "option_82": true
                       },
                       "giaddr_policy": "preserve",
                       "rate_limit":""
                   }
               }
           },
           "system_standards":{
               "syslog_standard":{
                   "Test Syslog_config": {
                       "enabled": true,
                       "servers": [
                       {
                           "ip_address": "192.168.100.106",
                           "port": 514,
                           "transport_protocol": "UDP",
                           "facility": "local4",
                           "severity": "info",
                           "security": {
                           "tls_enabled": true,
                           "tls_certificate": "/etc/ssl/certs/syslog-server-cert.pem",
                           "tls_key": "/etc/ssl/private/syslog-server-key.pem",
                           "ca_certificate": "/etc/ssl/certs/ca-cert.pem"
                           }
                       }
                       ]
                   }
               },
               "ipfix_standard":{
                   "Default IPFIX config": {
                       "enabled": true,
                       "export_interval": 60,
                       "collector": {
                       "ip_address": "192.168.100.101",
                       "port": 4739,
                       "transport_protocol": "UDP"
                       },
                       "interfaces":[],
                       "template_refresh_time": 600,
                       "option_template": true,
                       "record_fields": [
                       "sourceIPv4Address",
                       "destinationIPv4Address",
                       "sourceTransportPort",
                       "destinationTransportPort",
                       "protocolIdentifier",
                       "packetDeltaCount",
                       "octetDeltaCount",
                       "flowStartSysUpTime",
                       "flowEndSysUpTime"
                       ]
                   }
               },
               "snmp_standard":{
                   "SNMPv3_config": {
                       "enabled": true,
                       "users": [
                       {
                           "username": "adminUser",
                           "authentication_protocol": "SHA",
                           "authentication_password": "authPassword",
                           "encryption_protocol": "AES",
                           "encryption_password": "encPassword",
                           "security_level": "authPriv"
                       }
                       ],
                       "trap_receiver": {
                       "ip_address": "192.168.100.105",
                       "port": 162
                       },
                       "engine_id": "800000A1030000E112345678",
                       "contact": "network.admin@example.com",
                       "location": "Headquarters"
                   },
                   "SNMP_config": {
                       "enabled": true,
                       "version": "v2c",
                       "community_string": "public",
                       "trap_receiver": {
                       "ip_address": "192.168.100.102",
                       "port": 162
                       },
                       "authentication_traps": true,
                       "contact": "network.admin@example.com",
                       "location": "Data Center 1"
                   }
               },
               "ntp_standard":{
                   "default NTP Standard":{
                       "10": {
                           "address": "time.google.com",
                           "version": "4",
                           "auth_key": "",
                           "max_poll": "10",
                           "min_poll": "6"
                       },
                       "11": {
                           "address": "time2.google.com",
                           "version": "4",
                           "auth_key": "",
                           "max_poll": "10",
                           "min_poll": "6"
                       }
                   }
               }
           },
           "network_standards":{
               "sla_standard":{
                   "Default SLA Standard":{
                       "id":123123123,
                       "description":"",
                       "interval":"",
                       "threshold":"",
                       "wait_time":"",
                       "loss":"",
                       "jitter":"",
                       "Mos":"",
                       "tags":[]
                   },
                   "Internet SLA Standard":{
                       "description":"",
                       "interval":"",
                       "threshold":"",
                       "wait_time":"",
                       "loss":"",
                       "jitter":"",
                       "Mos":"",
                       "tags":[]
                   }
               },
               "underlay_standard":{
                   "ISP1": {
                       "description":"",
                       "up_bw":10,
                       "down_bw":50,
                       "shaping":true,
                       "metered":false,
                       "tags":[],
                       "transport":"1",
                       "sla_target":"",
                       "sla_standard":""
                   },
                   "LTE/5G": {
                       "description":"",
                       "up_bw":10,
                       "down_bw":50,
                       "shaping":true,
                       "metered":true,
                       "tags":[],
                       "transport":"1",
                       "sla_target":"",
                       "sla_standard":""
                   }
               },
               "ike_standard":{
                   "IKE proposal 1": {
                       "version": "2",
                       "authentication_method": "pre-shared-key",
                       "psk": "mySecretKey",
                       "random_psk": false,
                       "local_identity": "local@deltasase.com",
                       "remote_identity": "remote@deltasase.com",
                       "dh_group": "group20",
                       "encryption_algorithm": "aes-256",
                       "hash_algorithm": "sha256",
                       "lifetime_seconds": 86400,
                       "mobike":false,
                       "nat_t":true
                   }
               },
               "ipsec_standard":{
                   "IPsec template 1": {
                       "encryption_algorithm": "aes-256",
                       "integrity_algorithm": "sha1",
                       "dh_group": "group2",
                       "pfs_group": "group2",
                       "lifetime_seconds": 3600,
                       "lifetime_kilobytes": 50000
                   }
               }
           }
       },
       "objects":{
           "zones":{
              "lan":{
                 "description":""
              },
              "internet":{
                 "description":""
              },
              "sdwan":{
                 "description":""
              },
              "sase":{
                 "description":""
              },
              "control":{
                 "description":""
              },
              "lan2":{
                 "description":""
              }
           },
           "addresses":{
              "test address subnet1":{
                 "type": "subnet",
                 "address": "2.2.2.2/30",
                 "tags": []
              },
                 "test address":{
                 "type": "address",
                 "address": "20.2.2.2",
                 "tags": []
              },
              "test address range":{
                 "type": "range",
                 "address": "2.2.2.2-2.2.2.6",
                 "tags": []
              }
           },
           "address groups":{
              "test address group":{
                 "addresses": ["test address", "test address subnet1"],
                 "tags": []
              }
           },
           "urls":{
              "test address url":{
                 "type": "url",
                 "address": "test.com",
                 "tags": []
              },
              "test address url prefix":{
                 "type": "url_prefix",
                 "address": "*.test.com",
                 "tags": []
              }
           },
           "url_groups":{
              "test address group":{
                 "addresses": ["test address url", "test address url prefix"],
                 "tags": []
              }
           },
           "applications":{
              "1":{
                 "app_name": "MyCustomApp1",
                 "app_id": "app001",
                 "app_cathegory":"web",
                 "criteria": {
                   "source_ip": "192.168.1.100",
                   "destination_ip": "192.168.2.100",
                   "urls": ["mycustomapp1.example.com"],
                   "ports": ["8080", "8081"],
                   "protocols": ["TCP", "UDP"],
                   "packet_payload": "specific_string_pattern",
                   "ssl_certificates": ["mycustomapp1_cert"],
                   "user_agents": []
                 }         
              },
              "2":{
                 "app_name": "MyCustomApp2",
                 "app_id": "app002",
                 "app_cathegory":"web",
                 "criteria": {
                   "source_ip": "192.168.1.100",
                   "destination_ip": "192.168.2.100",
                   "urls": ["mycustomapp1.example.com"],
                   "ports": ["8080", "8081"],
                   "protocols": ["TCP", "UDP"],
                   "packet_payload": "specific_string_pattern",
                   "ssl_certificates": ["mycustomapp1_cert"],
                   "user_agents": []
                 }         
              }
           },
           "prefix_lists":{
               "test prefix list":{
                  "description": "",
                  "tags": [],
                  "rules": [
                     {
                       "seq": 10,
                       "action": "permit",
                       "prefix": "192.168.1.0/24",
                       "ge": 24,
                       "le": 24
                     },
                     {
                       "seq": 20,
                       "action": "deny",
                       "prefix": "192.168.2.0/24"
                     }
                  ]
               }
           },
           "certificates":{ 
               "_comment": "the certs should not be part of snapshot, but we ",
               "delta ru ca certificate":{
                  "format":"BASE64 PEM",
                  "cert_file":"",
                  "key_file":"",
                  "secret":""
               },
               "dns server certificate":{
                  "format":"BASE64 PEM",
                  "cert_file":"",
                  "key_file":"",
                  "secret":""
               }
           }
       },
       "policies":{
          "secuirty_policies":{
              "default policy":{
                 "seq": 1,
                 "match":{
                    "source_zones": ["internal"],
                    "destination_zones": ["external"],
                    "source_addresses": ["any"],
                    "destination_addresses": ["any"],
                    "applications": ["http", "https"],
                    "services": ["service-http", "service-https"],
                    "source_users": ["any"],
                    "source_ports": ["any"],
                    "destination_ports": ["80", "443"],
                    "session_tags": ["business"]
                 },
                 "action": {
                    "permit": {
                       "inspect": "Default DPI Standard",
                       "antivirus": "Default Antivirus Standard",
                       "ips_ids": "Default IDS/IPS Standard",
                       "dlp": "Default DLP Standard",
                       "ssl": "Default SSL Standard"
                    },
                    "logging":{
                       "action":"start and end",
                       "logging_standard":""
                    }
                 }
              }
          },
          "nat_policies":{
              
          },
          "qos_policies":{
              
          },
          "route_policies":{
              
          },
          "incident_policies":{
              
          },
          "authentication_policies":{
              "Default Auth policy":{
                 "active":true,
                 "1":{
                    "type":"ldap",
                    "remote":"LDAP1",
                    "2fa":false,
                    "ca_certificate":""
                 },
                 "2":{
                    "type":"sso",
                    "remote":"Azure AD",
                    "2fa":false,
                    "ca_certificate":""
                 },
                 "3":{
                    "type":"local",
                    "2fa":true,
                    "ca_certificate":""
                 }
              }
          }
       },
       "authentication":{
          "local_users":{
              "clients":{
                 "user1": {
                    "username": "user1",
                    "password_hash": "hashed_password",
                    "groups": ["group1"],
                    "mfa_enabled": true,
                    "enabled": true,
                    "allowed_addresses":["any"]
                  },
                  "user2": {
                     "username": "user2",
                     "password_hash": "hashed_password",
                     "groups": ["group1", "group2"],
                     "mfa_enabled": true,
                     "enabled": true,
                     "allowed_addresses":["any"]
                  }
              }, 
              "service_users":{
                 "secuirty_cameras": {
                   "username": "cameras",
                   "groups": ["security"],
                   "enabled": true,
                   "addresses":["any"]
                 },
                 "secuirty_doors": {
                   "username": "doors",
                   "groups": ["security"],
                   "enabled": true,
                   "addresses":["any"]
                 }
              
     
              }
          },
          "user_groups":{
              "IT_staff": {
                "access_level": "vpn",
                "vpn_access": true,
                "ztna_access": true
              },
              "regular_users": {
                "access_level": "user",
                "vpn_access": false,
                "ztna_access": true
              }
          },
          "external_users":{
              "user_group_mapping":{
                 "LDAP Mapping":{
                    "cn=IT_staff,ou=groups,dc=yourdomain,dc=com": "IT_staff",
                    "cn=regular_users,ou=groups,dc=yourdomain,dc=com": "regular_users",
                    "cn=engineering,ou=groups,dc=yourdomain,dc=com": "engineering_team",
                    "cn=hr_department,ou=groups,dc=yourdomain,dc=com": "HR_staff"
                 },
                 "SSO Group mapping": {
                    "sso_group_id_admin": "IT_staff",
                    "sso_group_id_users": "regular_users",
                    "sso_group_id_engineers": "engineering_team",
                    "sso_group_id_hr": "HR_staff"
                 }
              },
              "sso":{
                 "Okta":{
                    "provider": "OKTA",
                    "client_id": "your_okta_client_id",
                    "client_secret": "your_okta_client_secret",
                    "redirect_uri": "https://yourcallbackurl.com/callback",
                    "scopes": ["openid", "profile", "email"],
                    "authorization_endpoint": "https://yourdomain.okta.com/oauth2/default/v1/authorize",
                    "token_endpoint": "https://yourdomain.okta.com/oauth2/default/v1/token",
                    "userinfo_endpoint": "https://yourdomain.okta.com/oauth2/default/v1/userinfo"
                 },
                 "Azure AD":{
                    "provider": "AzureAD",
                    "client_id": "client_id_here",
                    "client_secret": "client_secret_here",
                    "redirect_uri": "https://yourcallbackurl.com",
                    "scopes": ["openid", "profile", "email"],
                    "token_endpoint": "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token"       
                 }
              },
              "ldap":{
                 "LDAP1":{
                    "server": "ldap.yourdomain.com",
                    "port": 389,
                    "use_ssl": true,
                    "start_tls": false,
                    "connection_timeout": 30,
                    "failover_servers": [
                      "ldap2.yourdomain.com",
                      "ldap3.yourdomain.com"
                    ],
                    "base_dn": "dc=yourdomain,dc=com",
                    "bind_dn": "cn=admin,dc=yourdomain,dc=com",
                    "bind_password": "bind_password_here",
                    "user_search_base": "ou=users,dc=yourdomain,dc=com",
                    "user_search_filter": "(uid={username})",
                    "group_search_base": "ou=groups,dc=yourdomain,dc=com",
                    "group_search_filter": "(member={dn})",
                    "attribute_mapping": {
                      "email": "mail",
                      "name": "cn"
                    }
                 }
              }
          },
          "2fa":{
              "sms":{},
              "email":{},
              "app":{}
          }
       },
       "alert":{
          "notifications": {
              "recipients":{
                 "NOC Group":{
                    "emails":["admin@example.com", "support@example.com"],
                    "sms": ["+1234567890", "+1987654321"],
                    "webhook": {
                       "enabled": true,
                       "address": "https://yourcompanywebhookurl.com/alerts",
                       "headers": {
                         "Content-Type": "application/json"
                       },
                       "payload_template": "{\"incident\": \"{{incident_type}}\", \"priority\": \"{{priority}}\", \"site\": \"{{site}}\"}"
                    }
                 },
                 "ServiceNow API server":{
                    "api":{
                       "address": "https://yourcompanywebhookurl.com/alerts",
                       "header": {
     
                       },
                       "body":{
     
                       }
                    }
                 }
              },
              "templates":{
                 "email":{
     
                 },
                 "sms":{
     
                 },
                 "webhook":{
     
                 }
              }
          },
          "rules": {
              "1": {
                 "incident": ["underlay_down"],
                 "sites": ["any"],
                 "priority": "3",
                 "escalation": {
                    "after_minutes": 60,
                    "new_priority": "2",
                    "repeat_notification": true
                 },
                 "notify":["NOC Group"]
              },
              "2": {
                "incident": ["site"],
                "sites": ["any"],
                "priority": "2",
                "escalation": {
                  "after_minutes": 120,
                  "new_priority": "1",
                  "repeat_notification": true
                },
                "notify":["NOC Group", "ServiceNow API server"]
              }
          }
       },
       "reports":{
           "report1":{
              "scope":{
                 
              },
              "notification":{
                 
              },
              "schedule":{
                 "start time":"14:20:00",
                 "start date":"04/19/2024",
                 "interval":24
              }
           }
       },
       "sase":{
           "general":{
              "subnet":"10.1.0.0/22",
              "bgp asn":"65500",
              "application_standard":"Default App Standard"
           },
           "cloud_nodes":{
               "us-east-1-01":{
                   "id":"121245646463466",
                   "enabled": true,
                   "dedicated": true,
                   "region": "us-east-1",
                   "bandwidth": 1000
               },
               "us-east-1-02":{
                   "id":"121245646463467",
                   "enabled": true,
                   "dedicated": false,
                   "region": "us-east-1",
                   "bandwidth": 100
               }
           },
           "sase_agent":{
               "user_agents":{
                  "default":{
                       "authentication":"Default Authentication Policy",
                       "authentication_timeout":"6000",
                       "machine_groups":["any"],
                       "compliance":true,
                       "settings":{
                           "active":true,
                           "secure_network_detection":{},
                           "manage_certificates":true,
                           "os_credentials":true,
                           "connect_type":"auto",
                           "tunnel_type": {
                               "1":"ipsec",
                               "2":"ssl"
                           },
                           "split_tunnel":{
                               "enabled":true,
                               "match":{
                               "destination_ips":[],
                               "destination_urls":[],
                               "applications":[]
                               }
                           },
                           "disable_agent":{
                               "users":[],
                               "secret":"testsecret",
                               "duration":"10",
                               "reason_required":true
                           },
                           "secuirty_policy":"Agent Default Security Policy"
                       }
                   }
               },
               "service_agent":{
                   "default":{
                       "authentication":"Default Service Authentication Policy",
                       "authentication_timeout":"6000",
                       "machine_groups":["any"],
                       "servers":["any"],
                       "compliance":true,
                       "settings":{
                           "active":true,
                           "secure_network_detection":{},
                           "manage_certificates":true,
                           "os_credentials":true,
                           "connect_type":"auto",
                           "tunnel_type": {
                               "1":"ipsec",
                               "2":"ssl"
                           },
                           "split_tunnel":{
                               "enabled":true,
                               "match":{
                               "destination_ips":[],
                               "destination_urls":[],
                               "applications":[]
                               }
                           },
                           "disable_agent":{
                               "users":[],
                               "secret":"testsecret",
                               "duration":"10",
                               "reason_required":true
                           },
                           "secuirty_policy":"Agent Default Security Policy"
                       }
                   }
               }
           },
           "remote_sites":{
               "sites":{
                   "site1":{
                       "id":"111",
                       "sdwan":true,
                       "ipsec":{
                           "1213554884845":{
                               "ike_standard": "IKE proposal 1",
                               "ipsec_standard": "IPSEC proposal 1",
                               "ike":{
                                   "version": "2",
                                   "authentication_method": "certificates",
                                   "local_certificate": "localCert.pem",
                                   "remote_certificate": "remoteCert.pem",
                                   "local_identity": "local@deltasase.com",
                                   "remote_identity": "remote@deltasase.com",
                                   "dh_group": "group20",
                                   "encryption_algorithm": "aes-256",
                                   "hash_algorithm": "sha256",
                                   "lifetime_seconds": 86400,
                                   "mobike": false,
                                   "nat_t": true
                               },
                               "ipsec":{
                                   "ipsec_proposal": [
                                       {
                                       "encryption_algorithm": "aes-256",
                                       "integrity_algorithm": "sha1",
                                       "dh_group": "group2"
                                       }
                                   ],
                                   "pfs_group": "group2",
                                   "lifetime_seconds": 3600,
                                   "lifetime_kilobytes": 50000
                               },
                               "underlay id":"235232121344345435",
                               "up_bw":1000,
                               "down_bw":1000,
                               "gateway":"us-east-1-01",
                               "priority":128
                           }
                       },
                       "routing":{
                           "static":{
                           
                           },
                           "bgp":{
                               "ecmp":false,
                               "peers":{
                                   "peer1":{
                                       "asn":"64500",
                                       "route map":{
                                       "in":"BGP test route map",
                                       "out": ""
                                       }
                                   }
                               },
                               "route_maps":{
                                   "BGP test route map":{
                                   "standard_route_map":"",
                                   "10":{
                                       "match":{
                                           "prefix_list":"",
                                           "asn_regex":"",
                                           "community":""
                                       },
                                       "action":{
                                           "permit":true,
                                           "community":{
                                               "type":"add",
                                               "value":"65001:2252"
                                           },
                                           "as_path":{
                                               "overide":false,
                                               "prepend_count":"",
                                               "prepend_asn":""
                                           },
                                           "weight":"",
                                           "local_pref":""
                                       }
                                   }
                                   }
                               }
                           }
                       },
                       "security policy":"test security policy",
                       "qos policy":"test qos policy"
                   }
               }
           },
           "remote_vpn":{
               "global_pools":[
                   "172.16.0.0/23",
                   "172.16.8.0/23"
               ],
               "portal":{
                   "url": "test.vpn.deltasase.com",
                   "public_ip":"5.2.56.5",
                   "certificte_url":""
               },
               "ipsec":{
                   "ike_standard": "default IKE standard",
                   "ipsec_standard": "default IPSEC standard",
                   "key_refresh_rate":"8"
               },
               "policies":{
                   "security":"default remote VPN Security policy",
                   "qos":"default remote VPN QoS policy"
               },
               "gateways":{
                   "us-east-01-01":{
                       "pools":["172.16.20.0/24"],
                       "bandwidth":"500",
                       "bgp_communities":["65001:120", "no-export"]
                   },
                   "us-west-01-02":{
                       "pools":[],
                       "bandwidth":"500",
                       "bgp_communities":["65001:220"]
                   },
                   "hub1":{
                       "pools":["172.16.21.0/24"],
                       "bandwidth":"10000",
                       "bgp_communities":["65002:230", "no-export"]
                   }
               }
           },
           "secure_front":{
               "test ingress":{
                   "id":"2234411232131",
                   "public_ip":"3.2.55.1",
                   "public_port":"443",
                   "private_pool":["10.10.1.1"],
                   "private_port":"443",
                   "health_check":{

                   },
                   "source_nat":true,
                   "security_policy":"test security policy",
                   "up_bw":100,
                   "down_bw":100,
                   "cen":""
               }
           },
           "casb": {
               "enabled": true,
               "traffic_monitoring": true,
               "cloud_discovery": {
                   "report_unauthorized_usage": true,
                   "data_sources": ["firewall_logs", "proxy_logs", "endpoint_security_logs"]
               },
               "data_loss_prevention": {
                   "enabled": true,
                   "policies": [
                   {
                       "policy_name": "Protect Sensitive Data",
                       "data_types": ["PII", "PCI", "PHI"],
                       "actions": ["alert", "block", "encrypt"]
                   }
                   ]
               },
               "threat_protection": {
                   "anomaly_detection": {
                   "enabled": true,
                   "behaviors": ["unusual_download", "unusual_access_patterns"],
                   "response_actions": ["alert_admin", "block_user"]
                   }
               },
               "access_control": {
                   "enforce_access_policies": true,
                   "policies": [
                       {
                       "user_group": "engineering",
                       "applications": ["AWS", "Azure"],
                       "access_level": "restricted"
                       }
                   ]
               },
               "encryption": {
                   "at_rest": true,
                   "in_transit": true
               }
           } 
       },
       "sdwan":{
           "hubs":{
              "hub1":{
                 "id":"11111",
                 "address":{
                    
                 },
                 "tags":[
                    
                 ],
                 "policies":{
                    "qos":{
                       "slot1":"", 
                       "slot2":"local qos policy 1", 
                       "slot3":"qos policy 1", 
                       "slot4":"default qos policy"
                    },
                    "security": {
                       "slot1":"", 
                       "slot2":"local security policy 1", 
                       "slot3":"security policy 1", 
                       "slot4":"default security policy"
                    },
                    "traffic": {
                       "slot1":"", 
                       "slot2":"local traffic policy 1", 
                       "slot3":"traffic policy 1", 
                       "slot4":"default traffic policy"
                    },
                    "nat":{
                       "slot1":"", 
                       "slot2":"local nat policy 1", 
                       "slot3":"nat policy 1", 
                       "slot4":"default nat policy"
                    }
                 },
                 "underlays":{
                    "circuit1":{
                       "id":"112121211",
                       "description":"",
                       "up_bw":10,
                       "down_bw":50,
                       "shaping":true,
                       "metered":false,
                       "sla":{
                          "target":"8.8.8.8",
                          "sla_standard":""
                       },
                       "underlay_standard":"",
                       "service_provider":"ISP1"
                    }
                 },
                 "cluster":{
                    "subnet":"192.168.5.0/24",
                    "keepalive_interval":"1000",
                    "failiure_count":"3",
                    "hold_time":"5"
                 },
                 "devices":{
                    "hub1 device 1":{
                       "id":"212325344322534",
                       "software_version":"1.1.2",
                       "hardware":{
                          "serial_number":"efwe223234324",
                          "model":"SEO1000",
                          "ports":[
                             "mgmt",
                             "1",
                             "2",
                             "3",
                             "4",
                             "5"
                          ]
                       },
                       "vlans":{
                          "1":"TEST VLAN",
                          "2":"Test VLAN2"
                       },
                       "interfaces":{
                          "1":{
                             "type":"port",
                             "role":"internet",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"",
                             "vlan":"",
                             "underlay":"circuit1",
                             "ipv4":{
                                "address":"50.2.11.10/24",
                                "gw":"50.2.11.1"
                             },
                             "ipv6":{
                                
                             }
                          },
                          "bond1":{
                             "type":"bond",
                             "bond_members":[
                                "5"
                             ],
                             "bond_mode":"active",
                             "role":"lan",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"lan",
                             "vlan":"",
                             "underlay":"circuit1",
                             "ipv4":{
                                "primary":{
                                   "address":"172.16.100.10/24"
                                },
                                "secondary":{
                                   
                                }
                             },
                             "ipv6":{
                                "primary":{
                                   
                                },
                                "secondary":{
                                   
                                }
                             },
                             "vrf": "lan"
                          },
                          "mgmt":{
                             "type":"port",
                             "role":"mgmt",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"mgmt",
                             "vlan":"",
                             "ipv4":{
                                "address":"192.168.100.10/24",
                                "gw":"192.168.100.1"
                             },
                             "ipv6":{
                                
                             }
                          },
                          "cluster_bond":{
                             "type":"bond",
                             "bond_members":[
                                "5"
                             ],
                             "bond_mode":"active",
                             "role":"ha",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"ha",
                             "vlan":"1",
                             "ipv4":{
                                "address":"169.254.5.1/24"
                             }
                          },
                          "tunnel1":{
                             "type":"tunnel",
                             "protocol":"ipsec",
                             "role":"lan",
                             "tags":[
                                
                             ],
                             "description":"test tunnel, for example tunnel to firewall in azure handoff",
                             "mac":"",
                             "zone":"lan",
                             "vlan":"",
                             "source_interface":"1",
                             "source_address":"192.168.1.1",
                             "remote_address":"1.2.2.2",
                             "ike":{
                                "ike_standard":"",
                                "version": "2",
                                "authentication_method": "pre-shared-key",
                                "psk": "mySecretKey",
                                "local_identity": "local@deltasase.com",
                                "remote_identity": "remote@deltasase.com",
                                "dh_group": "group20",
                                "encryption_algorithm": "aes-256",
                                "hash_algorithm": "sha256",
                                "lifetime_seconds": 86400,
                                "mobike":false,
                                "nat_t":true
                             },
                             "ipsec":{
                                "ipsec_standard": "IPsec template 1",
                                "ipsec_proposal": [
     
                                ],
                                "pfs_group": "group2",
                                "lifetime_seconds": 3600,
                                "lifetime_kilobytes": 50000
                             },
                             "ipv4":{
                                "primary":{
                                   "address":"169.254.15.1/31"
                                },
                                "secondary":{
                                   
                                }
                             },
                             "ipv6":{
                                "primary":{
                                   
                                },
                                "secondary":{
                                   
                                }
                             },
                             "vrf": "lan"
                          }
                       },
                       "cluster":{
                          "interface":"bond2",
                          "track":{
                             "interfaces":{
                                "bond1":{
                                   "flap_rate":"10",
                                   "reduce_priority":"50"
                                }
                             },
                             "prob":{
                                "prob1":{
                                   "target":"8.8.8.8",
                                   "source_address":"",
                                   "source_interface":"",
                                   "sla_standard":"test sla profile"
                                }
                             }
                          }
                       },
                       "system":{
                          "authentication":{
                             "users":{
                                "delta_admin":{
                                   "key":"<<RSA KEY>>",
                                   "password":"",
                                   "role":"superadmin"
                                }
                             },
                             "roles":{
                                
                             }
                          },
                          "session":{
                             "table_size":"2048",
                             "ttl":"600",
                             "tcp":{
                                
                             },
                             "udp":{
                                
                             },
                             "icmp":{
                                
                             },
                             "rtp":{
                                
                             }
                          },
                          "ssh":{
                             "interfaces":[
                                "bond1"
                             ],
                             "allowed_addresses":[
                                "172.16.1.2"
                             ]
                          },
                          "snmp_polling":{
                             "v2":{
                                "community":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "v3":{
                                "username":"",
                                "password":"",
                                "auth_algorytm":"",
                                "encrypt_algorytim":"",
                                "allowed_addresses":[
                                   
                                ]
                             }
                          },
                          "snmp_trap":{
                             "v2":{
                                "community":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "v3":{
                                "username":"",
                                "password":"",
                                "auth_algorytm":"",
                                "encrypt_algorytim":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "snmp_server":""
                          },
                          "certificates":{
                             "ca":{
                                
                             },
                             "machine":{
                                
                             }
                          },
                          "ipfix":{
                             
                          },
                          "syslog":{
                             "1":{
                                "name":"test syslog",
                                "address":"",
                                "protocol":"udp",
                                "port":"514",
                                "severity":"",
                                "syslog_standard":"",
                                "security": {
                                   "tls_enabled": true,
                                   "tls_certificate": "/etc/ssl/certs/syslog-server-cert.pem",
                                   "tls_key": "/etc/ssl/private/syslog-server-key.pem",
                                   "ca_certificate": "/etc/ssl/certs/ca-cert.pem"
                                }
                             }
                          },
                          "timezone":"est",
                          "domain":"deltasase.com",
                          "ntp":{
                             "1":{
                                "address":"",
                                "source_interface":"",
                                "source_address":"",
                                "max_poll":"",
                                "min_poll":""
                             }
                          },
                          "dns":{
                             "1":{
                                "address":"8.8.8.8",
                                "authentiction":""
                             },
                             "2":{
                                "address":"8.8.8.8",
                                "authentiction":""
                             }
                          },
                          "advance":{
                             "dpdk":{
                                
                             },
                             "vpp":{
                                
                             },
                             "sswan":{
                                
                             }
                          }
                       },
                       "automation":{
                          "scheduled_tasks":{
                             "task1":{
                                "schedule":{
                                   "start time":"14:20:00",
                                   "start date":"04/19/2024",
                                   "interval":24
                                },
                                "script":"/etc/scripts/test.py"
                             }
                          },
                          "event_handler":{
                             "event1":{
                                "event_type":{
                                   
                                },
                                "script":"/etc/scripts/event_test.py"
                             }
                          }
                       },
                       "protocols":{
                          "vrfs":{
                             "LAN1":{
                                "table_id":201,
                                "static routes":{
                                   "1":{
                                      "destination":"10.0.0.0/16",
                                      "next_hop":"",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"10.0.8.8",
                                         "sla_standard":""
                                      }
                                   }
                                },
                                "bgp":{
                                   
                                },
                                "ospf":{
                                   
                                },
                                "isis":{
                                   
                                },
                                "multicast":{
                                   
                                },
                                "arp":{
                                   
                                }
                             },
                             "Inet1":{
                                "table_id":201,
                                "static routes":{
                                   "1":{
                                      "destination":"0.0.0.0/0",
                                      "next_hop":"50.1.1.1",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"8.8.8.8",
                                         "sla_standard":"Internet SLA"
                                      }
                                   }
                                },
                                "bgp":{
                                   
                                },
                                "ospf":{
                                   
                                },
                                "isis":{
                                   
                                },
                                "multicast":{
                                   
                                },
                                "arp":{
                                   
                                }
                             },
                             "management":{
                                "table_id":99,
                                "static routes":{
                                   "1":{
                                      "destination":"0.0.0.0/0",
                                      "next_hop":"50.1.1.1",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"8.8.8.8",
                                         "sla_standard":"Internet SLA"
                                      }
                                   }
                                }
                             }
                          }
                       }
                    },
                    "hub1 device 2":{
                       "id":"2123253443534",
                       "software_version":"1.1.2",
                       "hardware":{
                          "serial_number":"efwe223234324",
                          "model":"SEO1000",
                          "ports":[
                             "mgmt",
                             "1",
                             "2",
                             "3",
                             "4",
                             "5"
                          ]
                       },
                       "vlans":{
                          "1":"TEST VLAN",
                          "2":"Test VLAN2"
                       },
                       "interfaces":{
                          "1":{
                             "type":"port",
                             "role":"internet",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"",
                             "vlan":"",
                             "underlay":"circuit1",
                             "ipv4":{
                                "address":"50.2.11.10/24",
                                "gw":"50.2.11.1"
                             },
                             "ipv6":{
                                
                             },
                             "ha_mirror":true
                          },
                          "bond1":{
                             "type":"bond",
                             "bond_members":[
                                "5"
                             ],
                             "bond_mode":"active",
                             "role":"lan",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"",
                             "vlan":"",
                             "underlay":"circuit1",
                             "ipv4":{
                                "primary":{
                                   "address":"172.16.100.10/24"
                                },
                                "secondary":{
                                   
                                }
                             },
                             "ipv6":{
                                "primary":{
                                   
                                },
                                "secondary":{
                                   
                                }
                             },
                             "dhcp":{
                                "dhcp_relay":{
                                   
                                },
                                "dhcp_server":{
                                   
                                }
                             },
                             "ha_mirror":true
                          },
                          "mgmt":{
                             "type":"port",
                             "role":"mgmt",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"mgmt",
                             "vlan":"",
                             "ipv4":{
                                "address":"192.168.100.10/24",
                                "gw":"192.168.100.1"
                             },
                             "ipv6":{
                                
                             }
                          },
                          "ha_bond":{
                             "type":"bond",
                             "bond_members":[
                                "5"
                             ],
                             "bond_mode":"active",
                             "role":"ha",
                             "tags":[
                                
                             ],
                             "description":"",
                             "mac":"",
                             "media":"rj45",
                             "speed":"1000",
                             "duplex":"full",
                             "zone":"ha",
                             "vlan":"1",
                             "ipv4":{
                                "address":"169.254.1.0/31"
                             }
                          }
                       },
                       "ha":{
                          "pririty":90,
                          "ha_interface":"ha_bond",
                          "peer_address":"169.254.1.0",
                          "track":{
                             "interfaces":{
                                "bond1":{
                                   "flap_rate":"10",
                                   "reduce_priority":"50"
                                }
                             },
                             "prob":{
                                "prob1":{
                                   "target":"8.8.8.8",
                                   "source_address":"",
                                   "source_interface":"",
                                   "sla_standard":"test sla profile"
                                }
                             }
                          }
                       },
                       "system":{
                          "authentication":{
                             "users":{
                                "delta_admin":{
                                   "key":"<<RSA KEY>>",
                                   "password":"",
                                   "role":"superadmin"
                                }
                             },
                             "roles":{
                                
                             }
                          },
                          "session":{
                             "table_size":"2048",
                             "ttl":"600",
                             "tcp":{
                                
                             },
                             "udp":{
                                
                             },
                             "icmp":{
                                
                             },
                             "rtp":{
                                
                             }
                          },
                          "ssh":{
                             "interfaces":[
                                "bond1"
                             ],
                             "allowed_addresses":[
                                "172.16.1.2"
                             ]
                          },
                          "snmp_polling":{
                             "v2":{
                                "community":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "v3":{
                                "username":"",
                                "password":"",
                                "auth_algorytm":"",
                                "encrypt_algorytim":"",
                                "allowed_addresses":[
                                   
                                ]
                             }
                          },
                          "snmp_trap":{
                             "v2":{
                                "community":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "v3":{
                                "username":"",
                                "password":"",
                                "auth_algorytm":"",
                                "encrypt_algorytim":"",
                                "allowed_addresses":[
                                   
                                ]
                             },
                             "snmp_server":""
                          },
                          "certificates":{
                             "ca":{
                                
                             },
                             "machine":{
                                
                             }
                          },
                          "ipfix":{
                             
                          },
                          "syslog":{
                             "1":{
                                "name":"test syslog",
                                "address":"",
                                "protocol":"udp",
                                "port":"514",
                                "severity":"",
                                "syslog_standard":""
                             }
                          },
                          "timezone":"est",
                          "domain":"deltasase.com",
                          "ntp":{
                             "1":{
                                "address":"",
                                "source_interface":"",
                                "source_address":"",
                                "max_poll":"",
                                "min_poll":""
                             }
                          },
                          "dns":{
                             "1":{
                                "address":"8.8.8.8",
                                "authentiction":""
                             },
                             "2":{
                                "address":"8.8.8.8",
                                "authentiction":""
                             }
                          },
                          "advance":{
                             "dpdk":{
                                
                             },
                             "vpp":{
                                
                             },
                             "sswan":{
                                
                             }
                          }
                       },
                       "services":{
                          "dns_service":{
                             "active":true,
                             "caching":true,
                             "port":"53",
                             "interfaces":[
                                "bond1"
                             ],
                             "certificate":{
                                "public_key":"",
                                "private_key":""
                             },
                             "forwarding_servers":{
                                "1":{
                                   "domain_prefix":"*.test.com",
                                   "address":"8.8.8.8",
                                   "dnssec":{
                                      "active":true,
                                      "unsigned_check":false,
                                      "timecheck":false,
                                      "class":"",
                                      "key_tag":"",
                                      "algorythm":"",
                                      "digest_type":"",
                                      "digest":""
                                   },
                                   "public_key":"",
                                   "tag":"",
                                   "source_address":"",
                                   "source_interface":"",
                                   "server":""
                                }
                             },
                             "cache_size":"4096",
                             "max_ttl":"",
                             "min_ttl":"",
                             "neg_ttl":"",
                             "max_entries":"",
                             "logging":"",
                             "static_entries":{
                                "test.net":"15.2.2.4"
                             }
                          }
                       },
                       "automation":{
                          "scheduled_tasks":{
                             "task1":{
                                "schedule":{
                                   "start time":"14:20:00",
                                   "start date":"04/19/2024",
                                   "interval":24
                                },
                                "script":"/etc/scripts/test.py"
                             }
                          },
                          "event_handler":{
                             "event1":{
                                "event_type":{
                                   
                                },
                                "script":"/etc/scripts/event_test.py"
                             }
                          }
                       },
                       "protocols":{
                          "vrfs":{
                             "LAN1":{
                                "table_id":201,
                                "static routes":{
                                   "1":{
                                      "destination":"10.0.0.0/16",
                                      "next_hop":"",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"10.0.8.8",
                                         "sla_standard":""
                                      }
                                   }
                                },
                                "bgp":{
                                   
                                },
                                "ospf":{
                                   
                                },
                                "isis":{
                                   
                                },
                                "multicast":{
                                   
                                },
                                "arp":{
                                   
                                }
                             },
                             "Inet1":{
                                "table_id":201,
                                "static routes":{
                                   "1":{
                                      "destination":"0.0.0.0/0",
                                      "next_hop":"50.1.1.1",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"8.8.8.8",
                                         "sla_standard":"Internet SLA"
                                      }
                                   }
                                },
                                "bgp":{
                                   
                                },
                                "ospf":{
                                   
                                },
                                "isis":{
                                   
                                },
                                "multicast":{
                                   
                                },
                                "arp":{
                                   
                                }
                             },
                             "management":{
                                "table_id":99,
                                "static routes":{
                                   "1":{
                                      "destination":"0.0.0.0/0",
                                      "next_hop":"50.1.1.1",
                                      "interface":"",
                                      "local":false,
                                      "prob":{
                                         "target":"8.8.8.8",
                                         "sla_standard":"Internet SLA"
                                      }
                                   }
                                }
                             }
                          }
                       }
                    }
                 }
              }
           },
           "branch_groups":{
               "test site group1":{
                   "id":"1125888",
                   "tags":[
                       ""
                   ],
                   "type":"full mesh",
                   "hub1":"hub1",
                   "hub2":"",
                   "hub3":"",
                   "hub4":"",
                   "sase":{
                       "enabled": true,
                       "auto":true,
                       "edge_nodes":["us-east-01-01", "us-east-01-02"]
                   },
                   "default_template":"test site template",
                   "policies":{
                       "qos":{
                           "slot1":"", 
                           "slot2":"", 
                           "slot3":"qos policy 1", 
                           "slot4":"default qos policy"
                       },
                       "security": {
                           "slot1":"", 
                           "slot2":"", 
                           "slot3":"security policy 1", 
                           "slot4":"default security policy"
                       },
                       "route": {
                           "slot1":"", 
                           "slot2":"", 
                           "slot3":"traffic policy 1", 
                           "slot4":"default traffic policy"
                       },
                       "nat":{
                           "slot1":"", 
                           "slot2":"", 
                           "slot3":"nat policy 1", 
                           "slot4":"default nat policy"
                       }
                   }
              }
           },
           "branches":{
               "Site1":{
                   "id":"111",
                   "site_group":"test site group1",
                   "site_template":"",
                   "address":{
                       "street":"",
                       "street2":"",
                       "country":"",
                       "city":"",
                       "state":"",
                       "zip":"",
                       "coordinate":{
                           "latitude":"",
                           "longitude":""
                       }
                   },
                   "tags":[],
                   "policies":{
                       "qos":{
                           "slot1":"", 
                           "slot2":"local qos policy 1", 
                           "slot3":"qos policy 1", 
                           "slot4":"default qos policy"
                       },
                       "security": {
                           "slot1":"", 
                           "slot2":"local security policy 1", 
                           "slot3":"security policy 1", 
                           "slot4":"default security policy"
                       },
                       "traffic": {
                           "slot1":"", 
                           "slot2":"local traffic policy 1", 
                           "slot3":"traffic policy 1", 
                           "slot4":"default traffic policy"
                       },
                       "nat":{
                           "slot1":"", 
                           "slot2":"local nat policy 1", 
                           "slot3":"nat policy 1", 
                           "slot4":"default nat policy"
                       }
                   },
                   "underlays":{
                       "circuit1":{
                           "description":"",
                           "up_bw":10,
                           "down_bw":50,
                           "shaping":true,
                           "metered":false,
                           "underlay_standard":"",
                           "tags":[],
                           "service_provider":"isp1",
                           "transport":"1",
                           "sla_target":"",
                           "sla_standard":""
                       }
                   },
                   "overlays":{
                       "default_active":true,
                       "sdwan":{
                           "112223344":{
                           "id":"112223344",
                           "active":true,
                           "shutdown": false,
                           "underlay":{
                               "local":"54898744444",
                               "remote":"5246546d463"
                           },
                           "sla_standard": "default sla_standard"
                           },
                           "22222233555":{
                           "id":"112223341",
                           "active":true,
                           "shutdown": false,
                           "underlay":{
                               "local":"54898744444",
                               "remote":"524654687463"
                           },
                           "sla_standard": "default sla_standard"
                           }
                       },
                       "sase":{
                           "2323232323":{
                           "id":"11222323344",
                           "active":true,
                           "shutdown": false,
                           "underlay":"54898744444",
                           "sce":"458875421555",
                           "sla_standard": "default sla_standard"
                           }
                       }
                   },
                   "ha":{
                       "interval":1000,
                       "failure_count":5,
                       "hold_time":5000,
                       "preemptive":true,
                       "session_sync":false,
                       "userdb_sync":true
                   },
                   "devices":{
                       "test device 1":{
                           "id":"2123253443534",
                           "software_version":"1.1.2",
                           "hardware":{
                           "serial_number":"efwe223234324",
                           "model":"SEO1000",
                           "ports":[
                               "mgmt",
                               "1",
                               "2",
                               "3",
                               "4",
                               "5"
                           ]
                           },
                           "vlans":{
                           "1":"TEST VLAN",
                           "2":"Test VLAN2"
                           },
                           "interfaces":{
                           "1":{
                               "type":"port",
                               "role":"internet",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"",
                               "vlan":"",
                               "underlay":"circuit1",
                               "ipv4":{
                                   "address":"50.2.11.10/24",
                                   "gw":"50.2.11.1"
                               },
                               "ipv6":{
                                   
                               },
                               "ha_mirror":true
                           },
                           "bond1":{
                               "type":"bond",
                               "bond_members":[
                                   "5"
                               ],
                               "bond_mode":"active",
                               "role":"lan",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"",
                               "vlan":"",
                               "underlay":"circuit1",
                               "ipv4":{
                                   "primary":{
                                       "address":"172.16.100.10/24"
                                   },
                                   "secondary":{
                                       
                                   }
                               },
                               "ipv6":{
                                   "primary":{
                                       
                                   },
                                   "secondary":{
                                       
                                   }
                               },
                               "dhcp":{
                                   "dhcp_relay":{
                                       "enabled": true,
                                       "relay_ip": ["172.31.1.1", "172.31.2.1"],
                                       "source_interface": "",
                                       "options":{
                                       "option_82": true
                                       },
                                       "giaddr_policy": "preserve",
                                       "rate_limit":"",
                                       "dhcp_relay_standard":""
                                   },
                                   "dhcp_server":{
                                       "enabled": true,
                                       "range_start": "172.16.100.20",
                                       "range_end": "172.16.100.100",
                                       "default_lease_time": 3600,
                                       "max_lease_time": 7200,
                                       "subnet_mask": "255.255.255.0",
                                       "domain_name": "localdomain",
                                       "dns_servers": ["172.16.100.10", "8.8.8.8"],
                                       "default_gateway": "172.16.100.1",
                                       "ntp_servers": ["time.google.com"],
                                       "options": {
                                       "option_150": ["172.16.100.10"],
                                       "custom_option_1": {
                                           "code": 160,
                                           "data": "custom_data",
                                           "type": "string"
                                       }
                                       },
                                       "win_servers": ["172.16.100.15"],
                                       "netbios_name_servers": ["172.16.100.15"],
                                       "netbios_node_type": 2,
                                       "dhcp_server_standard":"",
                                       "reserved":[
                                       {
                                           "ip":"172.16.100.10",
                                           "mac":"aa:aaa:Aa:11:aa"
                                       }
                                       ]
                                   }
                               },
                               "ha_mirror":true
                           },
                           "mgmt":{
                               "type":"port",
                               "role":"mgmt",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"mgmt",
                               "vlan":"",
                               "ipv4":{
                                   "address":"192.168.100.10/24",
                                   "gw":"192.168.100.1"
                               },
                               "ipv6":{
                                   
                               }
                           },
                           "ha_bond":{
                               "type":"bond",
                               "bond_members":[
                                   "5"
                               ],
                               "bond_mode":"active",
                               "role":"ha",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"ha",
                               "vlan":"1",
                               "ipv4":{
                                   "address":"169.254.1.0/31"
                               }
                           }
                           },
                           "ha":{
                           "pririty":100,
                           "ha_interface":"ha_bond",
                           "peer_address":"169.254.1.1",
                           "track":{
                               "interfaces":{
                                   "bond1":{
                                       "flap_rate":"10",
                                       "reduce_priority":"50"
                                   }
                               },
                               "prob":{
                                   "prob1":{
                                       "target":"8.8.8.8",
                                       "source_address":"",
                                       "source_interface":"",
                                       "sla_standard":"test sla profile"
                                   }
                               }
                           }
                           },
                           "system":{
                           "authentication":{
                               "users":{
                                   "delta_admin":{
                                       "key":"<<RSA KEY>>",
                                       "password":"",
                                       "role":"superadmin"
                                   }
                               },
                               "roles":{
                                   
                               }
                           },
                           "session":{
                               "table_size":"2048",
                               "ttl":"600",
                               "tcp":{
                                   
                               },
                               "udp":{
                                   
                               },
                               "icmp":{
                                   
                               },
                               "rtp":{
                                   
                               }
                           },
                           "ssh":{
                               "interfaces":[
                                   "bond1"
                               ],
                               "allowed_addresses":[
                                   "172.16.1.2"
                               ]
                           },
                           "snmp_polling":{
                               "source_interface":"",
                               "v2":{
                                   "community":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "v3":{
                                   "username":"",
                                   "password":"",
                                   "auth_algorytm":"",
                                   "encrypt_algorytim":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               }
                           },
                           "snmp_trap":{
                               "v2":{
                                   "community":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "v3":{
                                   "username":"",
                                   "password":"",
                                   "auth_algorytm":"",
                                   "encrypt_algorytim":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "snmp_server":""
                           },
                           "certificates":{
                               "ca":{
                                   
                               },
                               "machine":{
                                   
                               }
                           },
                           "ipfix":{
                               "enabled": true,
                               "export_interval": 60,
                               "collector": {
                                   "ip_address": "192.168.100.101",
                                   "port": 4739,
                                   "transport_protocol": "UDP"
                               },
                               "template_refresh_time": 600,
                               "option_template": true,
                               "record_fields": [
                                   "sourceIPv4Address",
                                   "destinationIPv4Address",
                                   "sourceTransportPort",
                                   "destinationTransportPort",
                                   "protocolIdentifier",
                                   "packetDeltaCount",
                                   "octetDeltaCount",
                                   "flowStartSysUpTime",
                                   "flowEndSysUpTime"
                               ],
                               "interfaces":[],
                               "source_interface":"",
                               "ipfix_standard":"Default IPFIX config"
       
                           },
                           "syslog":{
                               "enabled": true,
                               "servers": [
                                   {
                                   "ip_address": "192.168.100.106",
                                   "port": 514,
                                   "transport_protocol": "UDP",
                                   "facility": "local4",
                                   "severity": "info"
                                   }
                               ],
                               "syslog_standard":"Test Syslog_config"
                           },
                           "timezone":"est",
                           "domain":"deltasase.com",
                           "ntp":{
                               "ntp_standard":"",
                               "1":{
                                   "address":"",
                                   "source_interface":"",
                                   "source_address":"",
                                   "max_poll":"",
                                   "min_poll":""
                               }
                           },
                           "dns":{
                               "1":{
                                   "address":"8.8.8.8",
                                   "authentiction":""
                               },
                               "2":{
                                   "address":"8.8.8.8",
                                   "authentiction":""
                               }
                           },
                           "advance":{
                               "dpdk":{
                                   
                               },
                               "vpp":{
                                   
                               },
                               "sswan":{
                                   
                               }
                           }
                           },
                           "services":{
                           "dns_service":{
                               "active":true,
                               "caching":true,
                               "port":"53",
                               "interfaces":[
                                   "bond1"
                               ],
                               "certificate":{
                                   "public_key":"",
                                   "private_key":""
                               },
                               "forwarding_servers":{
                                   "1":{
                                       "domain_prefix":"*.test.com",
                                       "address":"8.8.8.8",
                                       "dnssec":{
                                       "active":true,
                                       "unsigned_check":false,
                                       "timecheck":false,
                                       "class":"",
                                       "key_tag":"",
                                       "algorythm":"",
                                       "digest_type":"",
                                       "digest":""
                                       },
                                       "public_key":"",
                                       "tag":"",
                                       "source_address":"",
                                       "source_interface":"",
                                       "server":""
                                   }
                               },
                               "cache_size":"4096",
                               "max_ttl":"",
                               "min_ttl":"",
                               "neg_ttl":"",
                               "max_entries":"",
                               "logging":"",
                               "static_entries":{
                                   "test.net":"15.2.2.4"
                               }
                           }
                           },
                           "automation":{
                           "scheduled_tasks":{
                               "task1":{
                                   "schedule":{
                                       "start time":"14:20:00",
                                       "start date":"04/19/2024",
                                       "interval":24
                                   },
                                   "script":"/etc/scripts/test.py"
                               }
                           },
                           "event_handler":{
                               "event1":{
                                   "event_type":{
                                       
                                   },
                                   "script":"/etc/scripts/event_test.py"
                               }
                           }
                           },
                           "protocols":{
                           "vrfs":{
                               "LAN1":{
                                   "table_id":201,
                                   "static routes":{
                                       "1":{
                                       "destination":"10.0.0.0/16",
                                       "next_hop":"",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"10.0.8.8",
                                           "sla_standard":""
                                       }
                                       }
                                   },
                                   "bgp":{
                                       
                                   },
                                   "ospf":{
                                       
                                   },
                                   "isis":{
                                       
                                   },
                                   "multicast":{
                                       
                                   },
                                   "arp":{
                                       
                                   }
                               },
                               "Inet1":{
                                   "table_id":201,
                                   "static routes":{
                                       "1":{
                                       "destination":"0.0.0.0/0",
                                       "next_hop":"50.1.1.1",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"8.8.8.8",
                                           "sla_standard":"Internet SLA"
                                       }
                                       }
                                   },
                                   "bgp":{
                                       
                                   },
                                   "ospf":{
                                       
                                   },
                                   "isis":{
                                       
                                   },
                                   "multicast":{
                                       
                                   },
                                   "arp":{
                                       
                                   }
                               },
                               "management":{
                                   "table_id":99,
                                   "static routes":{
                                       "1":{
                                       "destination":"0.0.0.0/0",
                                       "next_hop":"50.1.1.1",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"8.8.8.8",
                                           "sla_standard":"Internet SLA"
                                       }
                                       }
                                   }
                               }
                           }
                           }
                       },
                       "test device 2":{
                           "id":"2123253443534",
                           "software_version":"1.1.2",
                           "hardware":{
                           "serial_number":"efwe223234324",
                           "model":"SEO1000",
                           "ports":[
                               "mgmt",
                               "1",
                               "2",
                               "3",
                               "4",
                               "5"
                           ]
                           },
                           "vlans":{
                           "1":"TEST VLAN",
                           "2":"Test VLAN2"
                           },
                           "interfaces":{
                           "1":{
                               "type":"port",
                               "role":"internet",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"",
                               "vlan":"",
                               "underlay":"circuit1",
                               "ipv4":{
                                   "address":"50.2.11.10/24",
                                   "gw":"50.2.11.1"
                               },
                               "ipv6":{
                                   
                               },
                               "ha_mirror":true
                           },
                           "bond1":{
                               "type":"bond",
                               "bond_members":[
                                   "5"
                               ],
                               "bond_mode":"active",
                               "role":"lan",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"",
                               "vlan":"",
                               "underlay":"circuit1",
                               "ipv4":{
                                   "primary":{
                                       "address":"172.16.100.10/24"
                                   },
                                   "secondary":{
                                       
                                   }
                               },
                               "ipv6":{
                                   "primary":{
                                       
                                   },
                                   "secondary":{
                                       
                                   }
                               },
                               "dhcp":{
                                   "dhcp_relay":{
                                       
                                   },
                                   "dhcp_server":{
                                       
                                   }
                               },
                               "ha_mirror":true
                           },
                           "mgmt":{
                               "type":"port",
                               "role":"mgmt",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"mgmt",
                               "vlan":"",
                               "ipv4":{
                                   "address":"192.168.100.10/24",
                                   "gw":"192.168.100.1"
                               },
                               "ipv6":{
                                   
                               }
                           },
                           "ha_bond":{
                               "type":"bond",
                               "bond_members":[
                                   "5"
                               ],
                               "bond_mode":"active",
                               "role":"ha",
                               "tags":[
                                   
                               ],
                               "description":"",
                               "mac":"",
                               "media":"rj45",
                               "speed":"1000",
                               "duplex":"full",
                               "zone":"ha",
                               "vlan":"1",
                               "ipv4":{
                                   "address":"169.254.1.0/31"
                               }
                           }
                           },
                           "ha":{
                           "pririty":90,
                           "ha_interface":"ha_bond",
                           "peer_address":"169.254.1.0",
                           "track":{
                               "interfaces":{
                                   "bond1":{
                                       "flap_rate":"10",
                                       "reduce_priority":"50"
                                   }
                               },
                               "prob":{
                                   "prob1":{
                                       "target":"8.8.8.8",
                                       "source_address":"",
                                       "source_interface":"",
                                       "sla_standard":"test sla profile"
                                   }
                               }
                           }
                           },
                           "system":{
                           "authentication":{
                               "users":{
                                   "delta_admin":{
                                       "key":"<<RSA KEY>>",
                                       "password":"",
                                       "role":"superadmin"
                                   }
                               },
                               "roles":{
                                   
                               }
                           },
                           "session":{
                               "table_size":"2048",
                               "ttl":"600",
                               "tcp":{
                                   
                               },
                               "udp":{
                                   
                               },
                               "icmp":{
                                   
                               },
                               "rtp":{
                                   
                               }
                           },
                           "ssh":{
                               "interfaces":[
                                   "bond1"
                               ],
                               "allowed_addresses":[
                                   "172.16.1.2"
                               ]
                           },
                           "snmp_polling":{
                               "v2":{
                                   "community":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "v3":{
                                   "username":"",
                                   "password":"",
                                   "auth_algorytm":"",
                                   "encrypt_algorytim":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               }
                           },
                           "snmp_trap":{
                               "v2":{
                                   "community":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "v3":{
                                   "username":"",
                                   "password":"",
                                   "auth_algorytm":"",
                                   "encrypt_algorytim":"",
                                   "allowed_addresses":[
                                       
                                   ]
                               },
                               "snmp_server":""
                           },
                           "certificates":{
                               "ca":{
                                   
                               },
                               "machine":{
                                   
                               }
                           },
                           "ipfix":{
                               
                           },
                           "syslog":{
                               "1":{
                                   "name":"test syslog",
                                   "address":"",
                                   "protocol":"udp",
                                   "port":"514",
                                   "severity":"",
                                   "syslog_standard":"",
                                   "security": {
                                       "tls_enabled": true,
                                       "tls_certificate": "/etc/ssl/certs/syslog-server-cert.pem",
                                       "tls_key": "/etc/ssl/private/syslog-server-key.pem",
                                       "ca_certificate": "/etc/ssl/certs/ca-cert.pem"
                                   }
                               }
                           },
                           "timezone":"est",
                           "domain":"deltasase.com",
                           "ntp":{
                               "1":{
                                   "address":"",
                                   "source_interface":"",
                                   "source_address":"",
                                   "max_poll":"",
                                   "min_poll":""
                               }
                           },
                           "dns":{
                               "1":{
                                   "address":"8.8.8.8",
                                   "authentiction":""
                               },
                               "2":{
                                   "address":"8.8.8.8",
                                   "authentiction":""
                               }
                           },
                           "advance":{
                               "dpdk":{
                                   
                               },
                               "vpp":{
                                   
                               },
                               "sswan":{
                                   
                               }
                           }
                           },
                           "services":{
                           "dns_service":{
                               "active":true,
                               "caching":true,
                               "port":"53",
                               "interfaces":[
                                   "bond1"
                               ],
                               "certificate":{
                                   "public_key":"",
                                   "private_key":""
                               },
                               "forwarding_servers":{
                                   "1":{
                                       "domain_prefix":"*.test.com",
                                       "address":"8.8.8.8",
                                       "dnssec":{
                                       "active":true,
                                       "unsigned_check":false,
                                       "timecheck":false,
                                       "class":"",
                                       "key_tag":"",
                                       "algorythm":"",
                                       "digest_type":"",
                                       "digest":""
                                       },
                                       "public_key":"",
                                       "tag":"",
                                       "source_address":"",
                                       "source_interface":"",
                                       "server":""
                                   }
                               },
                               "cache_size":"4096",
                               "max_ttl":"",
                               "min_ttl":"",
                               "neg_ttl":"",
                               "max_entries":"",
                               "logging":"",
                               "static_entries":{
                                   "test.net":"15.2.2.4"
                               }
                           }
                           },
                           "automation":{
                           "scheduled_tasks":{
                               "task1":{
                                   "schedule":{
                                       "start time":"14:20:00",
                                       "start date":"04/19/2024",
                                       "interval":24
                                   },
                                   "script":"/etc/scripts/test.py"
                               }
                           },
                           "event_handler":{
                               "event1":{
                                   "event_type":{
                                       
                                   },
                                   "script":"/etc/scripts/event_test.py"
                               }
                           }
                           },
                           "protocols":{
                           "vrfs":{
                               "LAN1":{
                                   "table_id":201,
                                   "static routes":{
                                       "1":{
                                       "destination":"10.0.0.0/16",
                                       "next_hop":"",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"10.0.8.8",
                                           "sla_standard":""
                                       }
                                       }
                                   },
                                   "bgp":{
                                       
                                   },
                                   "ospf":{
                                       
                                   },
                                   "isis":{
                                       
                                   },
                                   "multicast":{
                                       
                                   },
                                   "arp":{
                                       
                                   }
                               },
                               "Inet1":{
                                   "table_id":201,
                                   "static routes":{
                                       "1":{
                                       "destination":"0.0.0.0/0",
                                       "next_hop":"50.1.1.1",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"8.8.8.8",
                                           "sla_standard":"Internet SLA"
                                       }
                                       }
                                   },
                                   "bgp":{
                                       
                                   },
                                   "ospf":{
                                       
                                   },
                                   "isis":{
                                       
                                   },
                                   "multicast":{
                                       
                                   },
                                   "arp":{
                                       
                                   }
                               },
                               "management":{
                                   "table_id":99,
                                   "static routes":{
                                       "1":{
                                       "destination":"0.0.0.0/0",
                                       "next_hop":"50.1.1.1",
                                       "interface":"",
                                       "local":false,
                                       "prob":{
                                           "target":"8.8.8.8",
                                           "sla_standard":"Internet SLA"
                                       }
                                       }
                                   }
                               }
                           }
                           }
                       }
                   }
               
            }
         }
      }    
   }
}
#####end /root/delta_api/delta_sase/project.txt#####
______________________________
#####start /root/delta_api/delta_sase/requirments.txt#####
Django==4.2.3
djangorestframework==3.14.0
dnspython==2.3.0
pandas==1.3.3
ipaddress==1.0.23
pytz==2023.3
channels==4.0.0
channels_redis==4.1.0
paramiko==3.2.0
netmiko==4.2.0
psycopg2==2.9.6
django-filter
django-tenants
django_extensions
celery
radis
tenant-schemas-celery
drf-nested-routers
django-netfields
requests
django-polymorphic
ipaddress==1.0.23
#####end /root/delta_api/delta_sase/requirments.txt#####
______________________________
#####start /root/delta_api/delta_sase/requirements2.txt#####
django
djangorestframework
dnspython
pandas
ipaddress
pytz
channels
channels_redis
paramiko
netmiko
psycopg2
django-filter
django-tenants
django_extensions
celery
radis
tenant-schemas-celery
drf-nested-routers
django-netfields
requests
django-polymorphic
ipaddress
pyjwt
#####end /root/delta_api/delta_sase/requirements2.txt#####
______________________________
#####start /root/delta_api/delta_sase/debug.log#####
2024-05-09 12:17:30,334 ERROR Error saving tenant: null value in column "detail" of relation "tenants_app_tenant" violates not-null constraint
DETAIL:  Failing row contains (1, 1, public, Delta SASE, Public tenant for Delta SASE company itself, 2024-05-09 12:17:30.317402-05, null, 2024-05-09 12:17:30.317414-05, null, null, null, null, t, t, null, , 1, null).

2024-05-09 12:29:50,199 ERROR Error saving tenant: Field 'id' expected a number but got <Customer: DeltaSASE LLC>.
2024-05-09 12:30:15,928 ERROR Error saving tenant: null value in column "detail" of relation "tenants_app_tenant" violates not-null constraint
DETAIL:  Failing row contains (2, 1000, reserved1000, Reserved 1000, null, 2024-05-09 12:30:15.927932-05, null, 2024-05-09 12:30:15.927955-05, null, null, null, null, t, t, null, , 1, null).

2024-05-09 12:37:32,761 INFO Watching for file changes with StatReloader
2024-05-09 12:44:54,431 INFO /root/delta_api/delta_sase/delta_sase/urls_tenants.py changed, reloading.
2024-05-09 12:44:54,763 INFO Watching for file changes with StatReloader
2024-05-09 12:53:44,209 INFO /root/delta_api/delta_sase/resources_app/urls.py changed, reloading.
2024-05-09 12:53:44,900 INFO Watching for file changes with StatReloader
2024-05-09 13:23:50,749 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-09 13:23:51,149 INFO Watching for file changes with StatReloader
2024-05-09 13:24:08,151 INFO Watching for file changes with StatReloader
2024-05-09 16:27:43,928 INFO Watching for file changes with StatReloader
2024-05-09 16:29:10,334 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-09 16:29:10,672 INFO Watching for file changes with StatReloader
2024-05-09 16:29:30,873 INFO /root/delta_api/delta_sase/base/models.py changed, reloading.
2024-05-09 16:29:31,163 INFO Watching for file changes with StatReloader
2024-05-09 16:30:28,472 INFO /root/delta_api/delta_sase/base/models.py changed, reloading.
2024-05-09 16:30:28,836 INFO Watching for file changes with StatReloader
2024-05-09 16:31:28,317 INFO Watching for file changes with StatReloader
2024-05-09 16:32:55,529 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:32:55,529 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:34:58,152 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:34:58,152 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:36:10,552 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:36:10,552 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:37:28,232 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:37:28,232 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:39:35,401 INFO Watching for file changes with StatReloader
2024-05-09 16:39:42,999 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:39:42,999 ERROR Internal Server Error: /api/v1/manage/customers
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/utils/deprecation.py", line 136, in __call__
    response = self.process_response(request, response)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 108, in process_response
    return self.response_redirect_class(self.get_full_path_with_slash(request))
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/middleware/common.py", line 87, in get_full_path_with_slash
    raise RuntimeError(
RuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 10.1.1.21:8053/api/v1/manage/customers/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.
2024-05-09 16:43:03,457 INFO Watching for file changes with StatReloader
2024-05-09 16:48:22,657 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-09 16:48:23,074 INFO Watching for file changes with StatReloader
2024-05-09 16:49:36,257 ERROR Failed to create tenant or domain: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.
2024-05-09 16:49:36,258 ERROR Unhandled exception occurred: name 'serializers' is not defined
Traceback (most recent call last):
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 32, in perform_create
    tenant = serializer.save()  # Create the tenant
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 208, in save
    self.instance = self.create(validated_data)
  File "/root/delta_api/delta_sase/tenants_app/serializers.py", line 192, in create
    return super().create(validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 975, in create
    raise_errors_on_nested_writes('create', self, validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 840, in raise_errors_on_nested_writes
    assert not any(
AssertionError: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/viewsets.py", line 124, in view
    return self.dispatch(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 19, in create
    self.perform_create(serializer)
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 39, in perform_create
    raise serializers.ValidationError("Failed to create tenant or domain")
NameError: name 'serializers' is not defined
2024-05-09 16:49:36,259 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 16:49:36,259 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 16:50:36,533 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-09 16:50:36,927 INFO Watching for file changes with StatReloader
2024-05-09 16:52:12,162 INFO Watching for file changes with StatReloader
2024-05-09 16:53:22,763 ERROR Failed to create tenant or domain: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.
2024-05-09 16:53:22,763 ERROR Unhandled exception occurred: name 'serializers' is not defined
Traceback (most recent call last):
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 32, in perform_create
    tenant = serializer.save()  # Create the tenant
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 208, in save
    self.instance = self.create(validated_data)
  File "/root/delta_api/delta_sase/tenants_app/serializers.py", line 192, in create
    return super().create(validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 975, in create
    raise_errors_on_nested_writes('create', self, validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 840, in raise_errors_on_nested_writes
    assert not any(
AssertionError: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/viewsets.py", line 124, in view
    return self.dispatch(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 19, in create
    self.perform_create(serializer)
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 39, in perform_create
    raise serializers.ValidationError("Failed to create tenant or domain")
NameError: name 'serializers' is not defined
2024-05-09 16:53:22,764 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 16:53:22,764 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 16:55:45,167 ERROR Failed to create tenant or domain: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.
2024-05-09 16:55:45,167 ERROR Unhandled exception occurred: name 'serializers' is not defined
Traceback (most recent call last):
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 32, in perform_create
    tenant = serializer.save()  # Create the tenant
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 208, in save
    self.instance = self.create(validated_data)
  File "/root/delta_api/delta_sase/tenants_app/serializers.py", line 192, in create
    return super().create(validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 975, in create
    raise_errors_on_nested_writes('create', self, validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 840, in raise_errors_on_nested_writes
    assert not any(
AssertionError: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/viewsets.py", line 124, in view
    return self.dispatch(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 19, in create
    self.perform_create(serializer)
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 39, in perform_create
    raise serializers.ValidationError("Failed to create tenant or domain")
NameError: name 'serializers' is not defined
2024-05-09 16:55:45,167 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 16:55:45,167 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 16:58:53,596 INFO Watching for file changes with StatReloader
2024-05-09 17:04:39,418 ERROR Failed to create tenant or domain: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.
2024-05-09 17:04:39,418 ERROR Unhandled exception occurred: name 'serializers' is not defined
Traceback (most recent call last):
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 32, in perform_create
    tenant = serializer.save()  # Create the tenant
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 208, in save
    self.instance = self.create(validated_data)
  File "/root/delta_api/delta_sase/tenants_app/serializers.py", line 192, in create
    return super().create(validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 975, in create
    raise_errors_on_nested_writes('create', self, validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 840, in raise_errors_on_nested_writes
    assert not any(
AssertionError: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/viewsets.py", line 124, in view
    return self.dispatch(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 19, in create
    self.perform_create(serializer)
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 39, in perform_create
    raise serializers.ValidationError("Failed to create tenant or domain")
NameError: name 'serializers' is not defined
2024-05-09 17:04:39,419 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 17:04:39,419 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 17:06:53,359 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-09 17:06:53,729 INFO Watching for file changes with StatReloader
2024-05-09 17:07:07,898 INFO Watching for file changes with StatReloader
2024-05-09 17:09:40,620 ERROR Failed to create tenant or domain: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.
2024-05-09 17:09:40,620 ERROR Unhandled exception occurred: name 'serializers' is not defined
Traceback (most recent call last):
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 32, in perform_create
    tenant = serializer.save()  # Create the tenant
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 208, in save
    self.instance = self.create(validated_data)
  File "/root/delta_api/delta_sase/tenants_app/serializers.py", line 192, in create
    return super().create(validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 975, in create
    raise_errors_on_nested_writes('create', self, validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 840, in raise_errors_on_nested_writes
    assert not any(
AssertionError: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/viewsets.py", line 124, in view
    return self.dispatch(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 19, in create
    self.perform_create(serializer)
  File "/root/delta_api/delta_sase/tenants_app/views.py", line 39, in perform_create
    raise serializers.ValidationError("Failed to create tenant or domain")
NameError: name 'serializers' is not defined
2024-05-09 17:09:40,621 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 17:09:40,621 ERROR Internal Server Error: /api/v1/manage/tenants/
2024-05-09 17:11:02,129 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-09 17:11:02,561 INFO Watching for file changes with StatReloader
2024-05-09 17:11:07,063 ERROR Failed to create tenant or domain: The `.create()` method does not support writable nested fields by default.
Write an explicit `.create()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.
2024-05-09 17:17:02,299 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-09 17:17:02,589 INFO Watching for file changes with StatReloader
2024-05-09 17:17:09,601 INFO Created new Tenant tenant1 with domain 1001
2024-05-09 17:17:14,024 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-09 17:17:14,478 INFO Watching for file changes with StatReloader
2024-05-09 17:20:30,616 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-09 17:20:30,944 INFO Watching for file changes with StatReloader
2024-05-09 17:20:44,007 INFO Watching for file changes with StatReloader
2024-05-09 17:22:51,582 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-09 17:22:52,108 INFO Watching for file changes with StatReloader
2024-05-09 17:23:11,641 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-09 17:23:12,076 INFO Watching for file changes with StatReloader
2024-05-09 17:27:42,032 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-09 17:27:42,377 INFO Watching for file changes with StatReloader
2024-05-09 17:27:55,775 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-09 17:27:56,183 INFO Watching for file changes with StatReloader
2024-05-09 17:28:01,480 INFO Created new Tenant tenant1 with domain 1001
2024-05-09 17:44:00,859 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-09 17:44:01,310 INFO Watching for file changes with StatReloader
2024-05-09 17:46:06,724 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-09 17:46:07,142 INFO Watching for file changes with StatReloader
2024-05-09 17:46:17,615 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-09 17:46:18,019 INFO Watching for file changes with StatReloader
2024-05-09 17:46:35,504 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-09 17:46:35,980 INFO Watching for file changes with StatReloader
2024-05-09 17:46:52,597 INFO Watching for file changes with StatReloader
2024-05-09 17:47:42,270 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-09 17:47:42,650 INFO Watching for file changes with StatReloader
2024-05-09 18:00:11,265 INFO Watching for file changes with StatReloader
2024-05-09 18:00:39,125 INFO Created new Tenant tenant1 with domain 1001
2024-05-09 18:09:53,984 INFO Created new Tenant tenant2 with domain 1002
2024-05-09 18:14:55,227 ERROR Unhandled exception occurred: The `.update()` method does not support writable nested fields by default.
Write an explicit `.update()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/viewsets.py", line 124, in view
    return self.dispatch(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 82, in partial_update
    return self.update(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 68, in update
    self.perform_update(serializer)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 78, in perform_update
    serializer.save()
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 203, in save
    self.instance = self.update(self.instance, validated_data)
  File "/root/delta_api/delta_sase/tenants_app/serializers.py", line 230, in update
    return super().update(instance, validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 1019, in update
    raise_errors_on_nested_writes('update', self, validated_data)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/serializers.py", line 840, in raise_errors_on_nested_writes
    assert not any(
AssertionError: The `.update()` method does not support writable nested fields by default.
Write an explicit `.update()` method for serializer `tenants_app.serializers.TenantSerializer`, or set `read_only=True` on nested serializer fields.
2024-05-09 18:14:55,228 ERROR Internal Server Error: /api/v1/manage/tenants/4/
2024-05-09 18:14:55,228 ERROR Internal Server Error: /api/v1/manage/tenants/4/
2024-05-10 13:07:54,453 INFO Watching for file changes with StatReloader
2024-05-10 13:11:50,255 INFO Watching for file changes with StatReloader
2024-05-10 13:15:29,741 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-10 13:15:30,101 INFO Watching for file changes with StatReloader
2024-05-10 13:15:43,545 INFO Watching for file changes with StatReloader
2024-05-10 13:16:21,392 INFO Created new Tenant tenant1 with domain 1001
2024-05-10 13:19:47,989 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-10 13:19:48,395 INFO Watching for file changes with StatReloader
2024-05-10 13:20:03,517 INFO Watching for file changes with StatReloader
2024-05-10 13:20:10,607 INFO Created new Tenant tenant1 with domain 1001
2024-05-10 13:20:16,996 INFO Created new Tenant tenant2 with domain 1002
2024-05-10 13:21:11,985 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-10 13:21:12,433 INFO Watching for file changes with StatReloader
2024-05-10 13:21:26,525 INFO Watching for file changes with StatReloader
2024-05-10 13:21:32,705 INFO Created new Tenant tenant1 with domain 1001
2024-05-10 13:21:36,234 INFO Created new Tenant tenant2 with domain 1002
2024-05-10 13:24:50,291 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-10 13:24:50,563 INFO Watching for file changes with StatReloader
2024-05-10 13:25:03,977 INFO Watching for file changes with StatReloader
2024-05-10 13:25:15,321 INFO Created new Tenant tenant1 with domain 1001
2024-05-10 13:25:18,949 INFO Created new Tenant tenant2 with domain 1002
2024-05-10 13:29:16,569 ERROR Attempt to delete tenant that is enabled
2024-05-10 13:29:16,570 ERROR Failed to delete tenant Delta SASE: Cannot delete tenant because it is currently enabled.
2024-05-10 13:29:16,578 ERROR Attempt to delete tenant that is enabled
2024-05-10 13:29:16,579 ERROR Failed to delete tenant Reserved 1000: Cannot delete tenant because it is currently enabled.
2024-05-10 13:29:16,755 ERROR Attempt to delete tenant that is enabled
2024-05-10 13:29:16,755 ERROR Failed to delete tenant tenant1: Cannot delete tenant because it is currently enabled.
2024-05-10 13:29:16,762 ERROR Attempt to delete tenant that is enabled
2024-05-10 13:29:16,762 ERROR Failed to delete tenant tenant2: Cannot delete tenant because it is currently enabled.
2024-05-10 13:34:56,856 INFO Watching for file changes with StatReloader
2024-05-10 13:35:15,806 INFO Created new Tenant tenant1 with domain 1001
2024-05-10 13:35:21,780 INFO Created new Tenant tenant2 with domain 1002
2024-05-10 14:11:22,670 INFO Created new Tenant Watkins, Craig and Ray with domain 1003
2024-05-10 14:18:29,130 INFO Created new Tenant Tenant A with domain 1004
2024-05-12 07:31:10,737 INFO /root/delta_api/delta_sase/base/models.py changed, reloading.
2024-05-12 07:31:11,226 INFO Watching for file changes with StatReloader
2024-05-12 07:57:41,028 INFO /root/delta_api/delta_sase/base/models.py changed, reloading.
2024-05-12 07:57:41,376 INFO Watching for file changes with StatReloader
2024-05-12 08:24:24,248 INFO Watching for file changes with StatReloader
2024-05-12 08:26:17,801 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-12 08:26:18,302 INFO Watching for file changes with StatReloader
2024-05-12 08:40:35,012 INFO Watching for file changes with StatReloader
2024-05-12 08:43:58,399 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-12 08:43:58,653 INFO Watching for file changes with StatReloader
2024-05-12 08:44:38,379 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-12 08:44:38,962 INFO Watching for file changes with StatReloader
2024-05-12 08:47:04,454 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-12 08:50:46,857 INFO Watching for file changes with StatReloader
2024-05-12 08:53:09,470 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 08:53:09,493 INFO Response: 200
2024-05-12 08:54:40,529 ERROR Internal Server Error: /api/v1/manage/tenants/
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 350, in prepare_key
    RSAPrivateKey, load_pem_private_key(key_bytes, password=None)
  File "/root/delta_api/env1/lib/python3.10/site-packages/cryptography/hazmat/backends/openssl/backend.py", line 494, in _handle_key_loading_error
    raise ValueError(
ValueError: ('Could not deserialize key data. The data may be in an incorrect format, it may be encrypted with an unsupported algorithm, or it may be an unsupported key type (e.g. EC curves with explicit parameters).', [<OpenSSLError(code=503841036, lib=60, reason=524556, reason_text=unsupported)>])

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/delta_sase/tenants_app/middleware.py", line 35, in __call__
    decoded_token = jwt.decode(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 151, in decode_complete
    decoded = api_jws.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 209, in decode_complete
    self._verify_signature(signing_input, header, signature, key, algorithms)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 307, in _verify_signature
    prepared_key = alg_obj.prepare_key(key)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 353, in prepare_key
    return cast(RSAPublicKey, load_pem_public_key(key_bytes))
ValueError: Unable to load PEM file. See https://cryptography.io/en/latest/faq/#why-can-t-i-import-my-pem-file for more details. MalformedFraming
2024-05-12 08:54:40,529 ERROR Internal Server Error: /api/v1/manage/tenants/
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 350, in prepare_key
    RSAPrivateKey, load_pem_private_key(key_bytes, password=None)
  File "/root/delta_api/env1/lib/python3.10/site-packages/cryptography/hazmat/backends/openssl/backend.py", line 494, in _handle_key_loading_error
    raise ValueError(
ValueError: ('Could not deserialize key data. The data may be in an incorrect format, it may be encrypted with an unsupported algorithm, or it may be an unsupported key type (e.g. EC curves with explicit parameters).', [<OpenSSLError(code=503841036, lib=60, reason=524556, reason_text=unsupported)>])

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/delta_sase/tenants_app/middleware.py", line 35, in __call__
    decoded_token = jwt.decode(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 151, in decode_complete
    decoded = api_jws.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 209, in decode_complete
    self._verify_signature(signing_input, header, signature, key, algorithms)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 307, in _verify_signature
    prepared_key = alg_obj.prepare_key(key)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 353, in prepare_key
    return cast(RSAPublicKey, load_pem_public_key(key_bytes))
ValueError: Unable to load PEM file. See https://cryptography.io/en/latest/faq/#why-can-t-i-import-my-pem-file for more details. MalformedFraming
2024-05-12 08:56:34,353 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-12 08:56:34,689 INFO Watching for file changes with StatReloader
2024-05-12 08:56:38,135 ERROR Internal Server Error: /api/v1/manage/tenants/
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 350, in prepare_key
    RSAPrivateKey, load_pem_private_key(key_bytes, password=None)
  File "/root/delta_api/env1/lib/python3.10/site-packages/cryptography/hazmat/backends/openssl/backend.py", line 494, in _handle_key_loading_error
    raise ValueError(
ValueError: ('Could not deserialize key data. The data may be in an incorrect format, it may be encrypted with an unsupported algorithm, or it may be an unsupported key type (e.g. EC curves with explicit parameters).', [<OpenSSLError(code=503841036, lib=60, reason=524556, reason_text=unsupported)>])

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/delta_sase/tenants_app/middleware.py", line 35, in __call__
    decoded_token = jwt.decode(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 151, in decode_complete
    decoded = api_jws.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 209, in decode_complete
    self._verify_signature(signing_input, header, signature, key, algorithms)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 307, in _verify_signature
    prepared_key = alg_obj.prepare_key(key)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 353, in prepare_key
    return cast(RSAPublicKey, load_pem_public_key(key_bytes))
ValueError: Unable to load PEM file. See https://cryptography.io/en/latest/faq/#why-can-t-i-import-my-pem-file for more details. MalformedFraming
2024-05-12 08:56:38,135 ERROR Internal Server Error: /api/v1/manage/tenants/
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 350, in prepare_key
    RSAPrivateKey, load_pem_private_key(key_bytes, password=None)
  File "/root/delta_api/env1/lib/python3.10/site-packages/cryptography/hazmat/backends/openssl/backend.py", line 494, in _handle_key_loading_error
    raise ValueError(
ValueError: ('Could not deserialize key data. The data may be in an incorrect format, it may be encrypted with an unsupported algorithm, or it may be an unsupported key type (e.g. EC curves with explicit parameters).', [<OpenSSLError(code=503841036, lib=60, reason=524556, reason_text=unsupported)>])

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/delta_sase/tenants_app/middleware.py", line 35, in __call__
    decoded_token = jwt.decode(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 151, in decode_complete
    decoded = api_jws.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 209, in decode_complete
    self._verify_signature(signing_input, header, signature, key, algorithms)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 307, in _verify_signature
    prepared_key = alg_obj.prepare_key(key)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 353, in prepare_key
    return cast(RSAPublicKey, load_pem_public_key(key_bytes))
ValueError: Unable to load PEM file. See https://cryptography.io/en/latest/faq/#why-can-t-i-import-my-pem-file for more details. MalformedFraming
2024-05-12 08:57:03,388 INFO /root/delta_api/delta_sase/tenants_app/middleware.py changed, reloading.
2024-05-12 08:57:03,838 INFO Watching for file changes with StatReloader
2024-05-12 08:57:06,037 INFO Public Key Used: -----BEGIN PUBLIC KEY-----
2024-05-12 08:57:06,059 ERROR Internal Server Error: /api/v1/manage/tenants/
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 350, in prepare_key
    RSAPrivateKey, load_pem_private_key(key_bytes, password=None)
  File "/root/delta_api/env1/lib/python3.10/site-packages/cryptography/hazmat/backends/openssl/backend.py", line 494, in _handle_key_loading_error
    raise ValueError(
ValueError: ('Could not deserialize key data. The data may be in an incorrect format, it may be encrypted with an unsupported algorithm, or it may be an unsupported key type (e.g. EC curves with explicit parameters).', [<OpenSSLError(code=503841036, lib=60, reason=524556, reason_text=unsupported)>])

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/delta_sase/tenants_app/middleware.py", line 36, in __call__
    decoded_token = jwt.decode(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 151, in decode_complete
    decoded = api_jws.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 209, in decode_complete
    self._verify_signature(signing_input, header, signature, key, algorithms)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 307, in _verify_signature
    prepared_key = alg_obj.prepare_key(key)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 353, in prepare_key
    return cast(RSAPublicKey, load_pem_public_key(key_bytes))
ValueError: Unable to load PEM file. See https://cryptography.io/en/latest/faq/#why-can-t-i-import-my-pem-file for more details. MalformedFraming
2024-05-12 08:57:06,059 ERROR Internal Server Error: /api/v1/manage/tenants/
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 350, in prepare_key
    RSAPrivateKey, load_pem_private_key(key_bytes, password=None)
  File "/root/delta_api/env1/lib/python3.10/site-packages/cryptography/hazmat/backends/openssl/backend.py", line 494, in _handle_key_loading_error
    raise ValueError(
ValueError: ('Could not deserialize key data. The data may be in an incorrect format, it may be encrypted with an unsupported algorithm, or it may be an unsupported key type (e.g. EC curves with explicit parameters).', [<OpenSSLError(code=503841036, lib=60, reason=524556, reason_text=unsupported)>])

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/root/delta_api/delta_sase/tenants_app/middleware.py", line 36, in __call__
    decoded_token = jwt.decode(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jwt.py", line 151, in decode_complete
    decoded = api_jws.decode_complete(
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 209, in decode_complete
    self._verify_signature(signing_input, header, signature, key, algorithms)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/api_jws.py", line 307, in _verify_signature
    prepared_key = alg_obj.prepare_key(key)
  File "/root/delta_api/env1/lib/python3.10/site-packages/jwt/algorithms.py", line 353, in prepare_key
    return cast(RSAPublicKey, load_pem_public_key(key_bytes))
ValueError: Unable to load PEM file. See https://cryptography.io/en/latest/faq/#why-can-t-i-import-my-pem-file for more details. MalformedFraming
2024-05-12 08:58:34,775 INFO Watching for file changes with StatReloader
2024-05-12 08:58:37,921 INFO Public Key Used: 
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAly2mtHbJdSB4umYogMBO
obeYjEK6yq4jQzkFfTVYH1qKcL/4Qw/nLsBkAXL3CCb7eYKq4vqFrHE3g/KKbYsB
gkRePAZDensddFBDviFOxAyRn7WuH3d15KCm9SvyiWIC9JQlJJSk/1oHD0H/WP8S
RmPXZ4dL3tCu6sTT6VcLXOPdSR5N22tuUSlY2cMLYzVvDacOhvrvGZIN5ALPfRqv
NtCTH2dXznNt+9ZHwJE3O3tlTrp1Pl2QBkb8xMv87sMYGUDLFLbAxhJEmXhenlGP
vMzYVWcSMvj5JPpez6FNXlBb7MegCVLl+pPBlryHB2H9JrELK4qG3V0QhnlHXr5V
/QIDAQAB
-----END PUBLIC KEY-----

2024-05-12 08:58:37,939 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 08:58:37,982 INFO Response: 200
2024-05-12 08:58:48,441 INFO Public Key Used: 
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAly2mtHbJdSB4umYogMBO
obeYjEK6yq4jQzkFfTVYH1qKcL/4Qw/nLsBkAXL3CCb7eYKq4vqFrHE3g/KKbYsB
gkRePAZDensddFBDviFOxAyRn7WuH3d15KCm9SvyiWIC9JQlJJSk/1oHD0H/WP8S
RmPXZ4dL3tCu6sTT6VcLXOPdSR5N22tuUSlY2cMLYzVvDacOhvrvGZIN5ALPfRqv
NtCTH2dXznNt+9ZHwJE3O3tlTrp1Pl2QBkb8xMv87sMYGUDLFLbAxhJEmXhenlGP
vMzYVWcSMvj5JPpez6FNXlBb7MegCVLl+pPBlryHB2H9JrELK4qG3V0QhnlHXr5V
/QIDAQAB
-----END PUBLIC KEY-----

2024-05-12 08:58:48,441 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 08:58:48,460 INFO Response: 200
2024-05-12 09:00:06,699 INFO Watching for file changes with StatReloader
2024-05-12 09:00:08,141 INFO Public Key Used: -----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAly2mtHbJdSB4umYogMBOobeYjEK6yq4jQzkFfTVYH1qKcL/4Qw/nLsBkAXL3CCb7eYKq4vqFrHE3g/KKbYsBgkRePAZDensddFBDviFOxAyRn7WuH3d15KCm9SvyiWIC9JQlJJSk/1oHD0H/WP8SRmPXZ4dL3tCu6sTT6VcLXOPdSR5N22tuUSlY2cMLYzVvDacOhvrvGZIN5ALPfRqvNtCTH2dXznNt+9ZHwJE3O3tlTrp1Pl2QBkb8xMv87sMYGUDLFLbAxhJEmXhenlGPvMzYVWcSMvj5JPpez6FNXlBb7MegCVLl+pPBlryHB2H9JrELK4qG3V0QhnlHXr5V/QIDAQAB-----END PUBLIC KEY-----
2024-05-12 09:00:08,156 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 09:00:08,186 INFO Response: 200
2024-05-12 09:01:24,613 INFO Public Key Used: -----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAly2mtHbJdSB4umYogMBOobeYjEK6yq4jQzkFfTVYH1qKcL/4Qw/nLsBkAXL3CCb7eYKq4vqFrHE3g/KKbYsBgkRePAZDensddFBDviFOxAyRn7WuH3d15KCm9SvyiWIC9JQlJJSk/1oHD0H/WP8SRmPXZ4dL3tCu6sTT6VcLXOPdSR5N22tuUSlY2cMLYzVvDacOhvrvGZIN5ALPfRqvNtCTH2dXznNt+9ZHwJE3O3tlTrp1Pl2QBkb8xMv87sMYGUDLFLbAxhJEmXhenlGPvMzYVWcSMvj5JPpez6FNXlBb7MegCVLl+pPBlryHB2H9JrELK4qG3V0QhnlHXr5V/QIDAQAB-----END PUBLIC KEY-----
2024-05-12 09:01:24,617 ERROR JWT Decode Error: Invalid header string: 'utf-8' codec can't decode byte 0x97 in position 5: invalid start byte
2024-05-12 09:01:36,728 INFO Public Key Used: -----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAly2mtHbJdSB4umYogMBOobeYjEK6yq4jQzkFfTVYH1qKcL/4Qw/nLsBkAXL3CCb7eYKq4vqFrHE3g/KKbYsBgkRePAZDensddFBDviFOxAyRn7WuH3d15KCm9SvyiWIC9JQlJJSk/1oHD0H/WP8SRmPXZ4dL3tCu6sTT6VcLXOPdSR5N22tuUSlY2cMLYzVvDacOhvrvGZIN5ALPfRqvNtCTH2dXznNt+9ZHwJE3O3tlTrp1Pl2QBkb8xMv87sMYGUDLFLbAxhJEmXhenlGPvMzYVWcSMvj5JPpez6FNXlBb7MegCVLl+pPBlryHB2H9JrELK4qG3V0QhnlHXr5V/QIDAQAB-----END PUBLIC KEY-----
2024-05-12 09:01:36,728 ERROR JWT Decode Error: Invalid header string: 'utf-8' codec can't decode byte 0xaf in position 0: invalid start byte
2024-05-12 09:01:48,235 INFO Public Key Used: -----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAly2mtHbJdSB4umYogMBOobeYjEK6yq4jQzkFfTVYH1qKcL/4Qw/nLsBkAXL3CCb7eYKq4vqFrHE3g/KKbYsBgkRePAZDensddFBDviFOxAyRn7WuH3d15KCm9SvyiWIC9JQlJJSk/1oHD0H/WP8SRmPXZ4dL3tCu6sTT6VcLXOPdSR5N22tuUSlY2cMLYzVvDacOhvrvGZIN5ALPfRqvNtCTH2dXznNt+9ZHwJE3O3tlTrp1Pl2QBkb8xMv87sMYGUDLFLbAxhJEmXhenlGPvMzYVWcSMvj5JPpez6FNXlBb7MegCVLl+pPBlryHB2H9JrELK4qG3V0QhnlHXr5V/QIDAQAB-----END PUBLIC KEY-----
2024-05-12 09:01:48,235 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 09:01:48,244 INFO Response: 200
2024-05-12 09:03:49,281 INFO /root/delta_api/delta_sase/tenants_app/middleware.py changed, reloading.
2024-05-12 09:03:49,549 INFO Watching for file changes with StatReloader
2024-05-12 09:03:52,786 INFO /root/delta_api/delta_sase/tenants_app/middleware.py changed, reloading.
2024-05-12 09:03:53,319 INFO Watching for file changes with StatReloader
2024-05-12 09:03:55,619 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:03:55,619 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 09:03:55,725 INFO Response: 200
2024-05-12 09:04:07,735 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:04:07,735 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 09:04:07,745 INFO Response: 200
2024-05-12 09:04:20,166 ERROR JWT validation error: Signature verification failed
2024-05-12 09:06:25,753 ERROR JWT validation error: Signature verification failed
2024-05-12 09:06:33,845 ERROR JWT validation error: Signature verification failed
2024-05-12 09:12:13,290 WARNING No JWT found in the request headers
2024-05-12 09:12:19,603 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:12:19,603 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 09:12:19,614 INFO Response: 200
2024-05-12 09:12:38,390 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:12:38,390 INFO Request: GET /api/v1/manage/tenants/4/
2024-05-12 09:12:38,392 INFO Response: 404
2024-05-12 09:12:43,471 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:12:43,471 INFO Request: GET /api/v1/manage/tenants/2/
2024-05-12 09:12:43,476 INFO Response: 200
2024-05-12 09:14:43,305 WARNING No JWT found in the request headers
2024-05-12 09:14:43,309 WARNING No JWT found in the request headers
2024-05-12 09:14:43,403 WARNING No JWT found in the request headers
2024-05-12 09:14:43,413 WARNING No JWT found in the request headers
2024-05-12 09:14:43,437 WARNING No JWT found in the request headers
2024-05-12 09:14:43,441 WARNING No JWT found in the request headers
2024-05-12 09:14:43,446 WARNING No JWT found in the request headers
2024-05-12 09:14:43,450 WARNING No JWT found in the request headers
2024-05-12 09:14:43,456 WARNING No JWT found in the request headers
2024-05-12 09:14:43,460 WARNING No JWT found in the request headers
2024-05-12 09:14:43,466 WARNING No JWT found in the request headers
2024-05-12 09:14:43,471 WARNING No JWT found in the request headers
2024-05-12 09:14:43,474 WARNING No JWT found in the request headers
2024-05-12 09:14:43,479 WARNING No JWT found in the request headers
2024-05-12 09:14:43,484 WARNING No JWT found in the request headers
2024-05-12 09:14:43,488 WARNING No JWT found in the request headers
2024-05-12 09:14:43,491 WARNING No JWT found in the request headers
2024-05-12 09:14:43,496 WARNING No JWT found in the request headers
2024-05-12 09:14:43,563 WARNING No JWT found in the request headers
2024-05-12 09:14:43,596 WARNING No JWT found in the request headers
2024-05-12 09:14:43,627 WARNING No JWT found in the request headers
2024-05-12 09:14:43,635 WARNING No JWT found in the request headers
2024-05-12 09:14:43,701 WARNING No JWT found in the request headers
2024-05-12 09:14:43,713 WARNING No JWT found in the request headers
2024-05-12 09:14:43,718 WARNING No JWT found in the request headers
2024-05-12 09:14:43,722 WARNING No JWT found in the request headers
2024-05-12 09:14:43,727 WARNING No JWT found in the request headers
2024-05-12 09:14:43,732 WARNING No JWT found in the request headers
2024-05-12 09:14:43,736 WARNING No JWT found in the request headers
2024-05-12 09:14:43,740 WARNING No JWT found in the request headers
2024-05-12 09:14:43,745 WARNING No JWT found in the request headers
2024-05-12 09:14:43,752 WARNING No JWT found in the request headers
2024-05-12 09:14:43,761 WARNING No JWT found in the request headers
2024-05-12 09:14:43,766 WARNING No JWT found in the request headers
2024-05-12 09:14:43,771 WARNING No JWT found in the request headers
2024-05-12 09:14:43,779 WARNING No JWT found in the request headers
2024-05-12 09:14:43,788 WARNING No JWT found in the request headers
2024-05-12 09:14:43,792 WARNING No JWT found in the request headers
2024-05-12 09:14:43,798 WARNING No JWT found in the request headers
2024-05-12 09:14:43,806 WARNING No JWT found in the request headers
2024-05-12 09:14:43,812 WARNING No JWT found in the request headers
2024-05-12 09:14:43,821 WARNING No JWT found in the request headers
2024-05-12 09:14:43,825 WARNING No JWT found in the request headers
2024-05-12 09:14:43,831 WARNING No JWT found in the request headers
2024-05-12 09:14:43,836 WARNING No JWT found in the request headers
2024-05-12 09:14:43,841 WARNING No JWT found in the request headers
2024-05-12 09:14:43,846 WARNING No JWT found in the request headers
2024-05-12 09:14:43,883 WARNING No JWT found in the request headers
2024-05-12 09:14:43,888 WARNING No JWT found in the request headers
2024-05-12 09:14:43,929 WARNING No JWT found in the request headers
2024-05-12 09:14:43,946 WARNING No JWT found in the request headers
2024-05-12 09:14:44,020 WARNING No JWT found in the request headers
2024-05-12 09:14:44,035 WARNING No JWT found in the request headers
2024-05-12 09:14:44,053 WARNING No JWT found in the request headers
2024-05-12 09:14:44,068 WARNING No JWT found in the request headers
2024-05-12 09:14:44,083 WARNING No JWT found in the request headers
2024-05-12 09:14:44,087 WARNING No JWT found in the request headers
2024-05-12 09:14:44,092 WARNING No JWT found in the request headers
2024-05-12 09:14:44,098 WARNING No JWT found in the request headers
2024-05-12 09:14:44,110 WARNING No JWT found in the request headers
2024-05-12 09:14:44,122 WARNING No JWT found in the request headers
2024-05-12 09:14:44,131 WARNING No JWT found in the request headers
2024-05-12 09:14:44,146 WARNING No JWT found in the request headers
2024-05-12 09:14:44,155 WARNING No JWT found in the request headers
2024-05-12 09:14:44,162 WARNING No JWT found in the request headers
2024-05-12 09:14:44,168 WARNING No JWT found in the request headers
2024-05-12 09:14:44,175 WARNING No JWT found in the request headers
2024-05-12 09:14:44,182 WARNING No JWT found in the request headers
2024-05-12 09:18:19,285 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,285 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:18:19,303 INFO Response: 201
2024-05-12 09:18:19,319 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,319 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:18:19,322 INFO Response: 201
2024-05-12 09:18:19,327 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,327 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:18:19,330 INFO Response: 201
2024-05-12 09:18:19,334 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,334 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:18:19,337 INFO Response: 201
2024-05-12 09:18:19,342 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,342 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:18:19,345 INFO Response: 201
2024-05-12 09:18:19,349 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,349 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:18:19,353 INFO Response: 201
2024-05-12 09:18:19,358 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,358 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:18:19,362 INFO Response: 201
2024-05-12 09:18:19,366 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,367 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:18:19,370 INFO Response: 201
2024-05-12 09:18:19,374 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,374 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:18:19,377 INFO Response: 201
2024-05-12 09:18:19,384 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,384 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:18:19,387 INFO Response: 201
2024-05-12 09:18:19,391 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,391 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:18:19,394 INFO Response: 201
2024-05-12 09:18:19,400 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,400 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:18:19,402 INFO Response: 201
2024-05-12 09:18:19,406 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,407 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:18:19,408 INFO Response: 201
2024-05-12 09:18:19,413 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,413 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:18:19,416 INFO Response: 201
2024-05-12 09:18:19,421 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,421 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:18:19,422 INFO Response: 201
2024-05-12 09:18:19,427 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,427 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:18:19,429 INFO Response: 201
2024-05-12 09:18:19,434 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,434 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:18:19,436 INFO Response: 201
2024-05-12 09:18:19,441 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,441 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:18:19,443 INFO Response: 201
2024-05-12 09:18:19,448 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,448 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:18:19,450 INFO Response: 201
2024-05-12 09:18:19,455 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,455 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 09:18:19,457 INFO Response: 201
2024-05-12 09:18:19,462 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,462 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 09:18:19,464 INFO Response: 201
2024-05-12 09:18:19,469 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,469 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:18:19,472 INFO Response: 201
2024-05-12 09:18:19,476 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,476 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:18:19,478 INFO Response: 201
2024-05-12 09:18:19,483 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,483 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:18:19,485 INFO Response: 201
2024-05-12 09:18:19,490 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,490 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:18:19,492 INFO Response: 201
2024-05-12 09:18:19,496 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,497 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:18:19,499 INFO Response: 201
2024-05-12 09:18:19,504 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,504 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:18:19,506 INFO Response: 201
2024-05-12 09:18:19,510 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,510 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:18:19,512 INFO Response: 201
2024-05-12 09:18:19,517 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,518 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:18:19,520 INFO Response: 201
2024-05-12 09:18:19,525 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,525 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:18:19,527 INFO Response: 201
2024-05-12 09:18:19,534 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,534 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 09:18:19,538 INFO Response: 201
2024-05-12 09:18:19,548 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,548 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 09:18:19,552 INFO Response: 201
2024-05-12 09:18:19,560 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,561 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:18:19,563 INFO Response: 201
2024-05-12 09:18:19,569 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,569 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:18:19,571 INFO Response: 201
2024-05-12 09:18:19,576 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,576 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:18:19,578 INFO Response: 201
2024-05-12 09:18:19,583 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,583 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:18:19,585 INFO Response: 201
2024-05-12 09:18:19,590 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,590 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,592 INFO Response: 201
2024-05-12 09:18:19,598 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,598 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,600 INFO Response: 201
2024-05-12 09:18:19,605 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,605 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,607 INFO Response: 201
2024-05-12 09:18:19,612 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,612 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,615 INFO Response: 201
2024-05-12 09:18:19,619 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,619 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,621 INFO Response: 201
2024-05-12 09:18:19,625 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,625 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,628 INFO Response: 201
2024-05-12 09:18:19,632 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,633 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,634 INFO Response: 201
2024-05-12 09:18:19,639 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,639 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,641 INFO Response: 201
2024-05-12 09:18:19,645 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,646 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,648 INFO Response: 201
2024-05-12 09:18:19,652 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,653 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,655 INFO Response: 201
2024-05-12 09:18:19,659 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,660 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,662 INFO Response: 201
2024-05-12 09:18:19,666 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,666 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,669 INFO Response: 201
2024-05-12 09:18:19,673 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,673 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,675 INFO Response: 201
2024-05-12 09:18:19,680 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,680 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,682 INFO Response: 201
2024-05-12 09:18:19,689 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,689 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,691 INFO Response: 201
2024-05-12 09:18:19,696 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,696 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:18:19,700 INFO Response: 201
2024-05-12 09:18:19,711 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,711 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:18:19,716 INFO Response: 201
2024-05-12 09:18:19,726 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,726 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:18:19,746 INFO Response: 201
2024-05-12 09:18:19,758 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,759 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:18:19,762 INFO Response: 201
2024-05-12 09:18:19,770 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,770 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:18:19,773 INFO Response: 201
2024-05-12 09:18:19,780 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,780 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:18:19,783 INFO Response: 201
2024-05-12 09:18:19,787 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,787 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:18:19,789 INFO Response: 201
2024-05-12 09:18:19,793 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,793 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:18:19,795 INFO Response: 201
2024-05-12 09:18:19,800 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,800 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:18:19,801 INFO Response: 201
2024-05-12 09:18:19,805 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,805 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:18:19,807 INFO Response: 201
2024-05-12 09:18:19,812 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,812 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:18:19,814 INFO Response: 201
2024-05-12 09:18:19,818 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,818 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:18:19,821 INFO Response: 201
2024-05-12 09:18:19,825 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,825 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:18:19,828 INFO Response: 201
2024-05-12 09:18:19,833 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,833 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:18:19,835 INFO Response: 201
2024-05-12 09:18:19,840 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,841 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:18:19,844 INFO Response: 201
2024-05-12 09:18:19,851 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,851 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:18:19,857 INFO Response: 201
2024-05-12 09:18:19,869 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:18:19,869 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:18:19,872 INFO Response: 201
2024-05-12 09:19:54,644 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:19:54,644 INFO Request: POST /api/v1/manage/customers/
2024-05-12 09:19:54,649 INFO Response: 201
2024-05-12 09:19:54,678 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:19:54,678 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 09:19:54,685 INFO Response: 201
2024-05-12 09:19:54,690 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:19:54,690 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 09:19:54,694 INFO Response: 201
2024-05-12 09:19:54,700 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:19:54,700 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 09:19:56,248 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 09:19:56,306 INFO Response: 201
2024-05-12 09:20:35,617 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:20:35,617 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 09:20:35,630 INFO Response: 200
2024-05-12 09:22:44,278 INFO /root/delta_api/delta_sase/tenants_app/middleware.py changed, reloading.
2024-05-12 09:22:44,913 INFO Watching for file changes with StatReloader
2024-05-12 09:22:47,055 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:22:47,055 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 09:22:47,075 INFO Response: 200
2024-05-12 09:23:09,406 INFO /root/delta_api/delta_sase/tenants_app/middleware.py changed, reloading.
2024-05-12 09:23:09,851 INFO Watching for file changes with StatReloader
2024-05-12 09:25:54,524 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 09:25:55,002 INFO Watching for file changes with StatReloader
2024-05-12 09:27:16,095 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:27:16,097 INFO Request: GET /api/v1/manage/products/
2024-05-12 09:27:16,117 INFO Response: 200
2024-05-12 09:36:36,643 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-12 09:36:36,919 INFO Watching for file changes with StatReloader
2024-05-12 09:36:56,598 INFO Watching for file changes with StatReloader
2024-05-12 09:43:04,150 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,150 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:04,170 INFO Response: 201
2024-05-12 09:43:04,225 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,225 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:04,229 INFO Response: 201
2024-05-12 09:43:04,235 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,235 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:04,240 INFO Response: 201
2024-05-12 09:43:04,284 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,285 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:04,288 INFO Response: 201
2024-05-12 09:43:04,293 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,293 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:04,296 INFO Response: 201
2024-05-12 09:43:04,301 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,301 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:04,304 INFO Response: 201
2024-05-12 09:43:04,309 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,309 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:04,312 INFO Response: 201
2024-05-12 09:43:04,317 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,317 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:04,321 INFO Response: 201
2024-05-12 09:43:04,325 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,325 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:04,328 INFO Response: 201
2024-05-12 09:43:04,333 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,333 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:04,338 INFO Response: 201
2024-05-12 09:43:04,377 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,378 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:43:04,382 INFO Response: 201
2024-05-12 09:43:04,464 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,464 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:43:04,467 INFO Response: 201
2024-05-12 09:43:04,496 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,497 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:43:04,499 INFO Response: 201
2024-05-12 09:43:04,505 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,505 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:43:04,507 INFO Response: 201
2024-05-12 09:43:04,604 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,604 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:43:04,653 INFO Response: 201
2024-05-12 09:43:04,667 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,667 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:43:04,683 INFO Response: 201
2024-05-12 09:43:04,687 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,687 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:43:04,690 INFO Response: 201
2024-05-12 09:43:04,694 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,694 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:43:04,696 INFO Response: 201
2024-05-12 09:43:04,700 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,701 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:43:04,702 INFO Response: 201
2024-05-12 09:43:04,730 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,730 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 09:43:04,747 INFO Response: 201
2024-05-12 09:43:04,776 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,779 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 09:43:04,784 INFO Response: 201
2024-05-12 09:43:04,813 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,813 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:43:04,816 INFO Response: 201
2024-05-12 09:43:04,821 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,821 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:43:04,823 INFO Response: 201
2024-05-12 09:43:04,917 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,917 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:43:04,921 INFO Response: 201
2024-05-12 09:43:04,944 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,944 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:43:04,947 INFO Response: 201
2024-05-12 09:43:04,952 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,952 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:43:04,954 INFO Response: 201
2024-05-12 09:43:04,958 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,959 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:43:04,960 INFO Response: 201
2024-05-12 09:43:04,966 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,966 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:43:04,968 INFO Response: 201
2024-05-12 09:43:04,972 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,972 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:43:04,974 INFO Response: 201
2024-05-12 09:43:04,978 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,979 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:43:04,981 INFO Response: 201
2024-05-12 09:43:04,985 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,985 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 09:43:04,988 INFO Response: 201
2024-05-12 09:43:04,992 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:04,992 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 09:43:04,994 INFO Response: 201
2024-05-12 09:43:05,006 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,006 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:43:05,010 INFO Response: 201
2024-05-12 09:43:05,019 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,019 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:43:05,022 INFO Response: 201
2024-05-12 09:43:05,030 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,030 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:43:05,033 INFO Response: 201
2024-05-12 09:43:05,039 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,040 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:43:05,042 INFO Response: 201
2024-05-12 09:43:05,048 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,048 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,052 INFO Response: 201
2024-05-12 09:43:05,056 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,057 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,058 INFO Response: 201
2024-05-12 09:43:05,063 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,063 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,065 INFO Response: 201
2024-05-12 09:43:05,070 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,070 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,072 INFO Response: 201
2024-05-12 09:43:05,087 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,087 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,091 INFO Response: 201
2024-05-12 09:43:05,096 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,096 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,098 INFO Response: 201
2024-05-12 09:43:05,103 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,103 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,105 INFO Response: 201
2024-05-12 09:43:05,110 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,110 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,112 INFO Response: 201
2024-05-12 09:43:05,117 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,117 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,119 INFO Response: 201
2024-05-12 09:43:05,123 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,123 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,125 INFO Response: 201
2024-05-12 09:43:05,129 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,129 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,132 INFO Response: 201
2024-05-12 09:43:05,137 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,137 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,139 INFO Response: 201
2024-05-12 09:43:05,143 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,144 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,145 INFO Response: 201
2024-05-12 09:43:05,150 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,150 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,152 INFO Response: 201
2024-05-12 09:43:05,156 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,157 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,158 INFO Response: 201
2024-05-12 09:43:05,163 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,163 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:05,166 INFO Response: 201
2024-05-12 09:43:05,170 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,170 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:43:05,173 INFO Response: 201
2024-05-12 09:43:05,177 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,177 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:43:05,180 INFO Response: 201
2024-05-12 09:43:05,187 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,187 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:43:05,190 INFO Response: 201
2024-05-12 09:43:05,199 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,199 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:05,202 INFO Response: 201
2024-05-12 09:43:05,206 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,206 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:05,208 INFO Response: 201
2024-05-12 09:43:05,213 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,213 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:05,215 INFO Response: 201
2024-05-12 09:43:05,221 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,221 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:05,222 INFO Response: 201
2024-05-12 09:43:05,227 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,227 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:05,230 INFO Response: 201
2024-05-12 09:43:05,235 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,235 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:05,237 INFO Response: 201
2024-05-12 09:43:05,241 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,241 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:05,243 INFO Response: 201
2024-05-12 09:43:05,251 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,252 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:05,256 INFO Response: 201
2024-05-12 09:43:05,268 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,268 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:05,272 INFO Response: 201
2024-05-12 09:43:05,281 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,281 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:05,283 INFO Response: 201
2024-05-12 09:43:05,289 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,289 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:05,291 INFO Response: 201
2024-05-12 09:43:05,296 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,296 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:05,298 INFO Response: 201
2024-05-12 09:43:05,304 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:05,304 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:05,306 INFO Response: 201
2024-05-12 09:43:08,338 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:08,342 INFO Request: GET /api/v1/manage/products/
2024-05-12 09:43:08,352 INFO Response: 200
2024-05-12 09:43:29,603 INFO Watching for file changes with StatReloader
2024-05-12 09:43:32,027 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:32,027 INFO Request: GET /api/v1/manage/products/
2024-05-12 09:43:32,041 INFO Response: 200
2024-05-12 09:43:35,218 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,218 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:35,225 INFO Response: 201
2024-05-12 09:43:35,235 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,235 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:35,241 INFO Response: 201
2024-05-12 09:43:35,252 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,252 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:35,259 INFO Response: 201
2024-05-12 09:43:35,271 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,272 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:35,277 INFO Response: 201
2024-05-12 09:43:35,285 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,285 INFO Request: POST /api/v1/network/regions/
2024-05-12 09:43:35,290 INFO Response: 201
2024-05-12 09:43:35,298 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,298 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:35,303 INFO Response: 201
2024-05-12 09:43:35,312 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,312 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:35,317 INFO Response: 201
2024-05-12 09:43:35,325 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,325 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:35,330 INFO Response: 201
2024-05-12 09:43:35,338 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,338 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:35,343 INFO Response: 201
2024-05-12 09:43:35,351 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,352 INFO Request: POST /api/v1/manage/products/
2024-05-12 09:43:35,357 INFO Response: 201
2024-05-12 09:43:35,369 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,369 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:43:35,373 INFO Response: 201
2024-05-12 09:43:35,382 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,382 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:43:35,385 INFO Response: 201
2024-05-12 09:43:35,394 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,394 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 09:43:35,398 INFO Response: 201
2024-05-12 09:43:35,406 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,406 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:43:35,409 INFO Response: 201
2024-05-12 09:43:35,417 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,418 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:43:35,420 INFO Response: 201
2024-05-12 09:43:35,428 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,428 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 09:43:35,431 INFO Response: 201
2024-05-12 09:43:35,438 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,438 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:43:35,443 INFO Response: 201
2024-05-12 09:43:35,453 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,453 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:43:35,456 INFO Response: 201
2024-05-12 09:43:35,465 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,465 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 09:43:35,472 INFO Response: 201
2024-05-12 09:43:35,485 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,486 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 09:43:35,492 INFO Response: 201
2024-05-12 09:43:35,499 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,499 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 09:43:35,502 INFO Response: 201
2024-05-12 09:43:35,510 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,510 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:43:35,514 INFO Response: 201
2024-05-12 09:43:35,522 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,522 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:43:35,524 INFO Response: 201
2024-05-12 09:43:35,532 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,532 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 09:43:35,536 INFO Response: 201
2024-05-12 09:43:35,543 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,543 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:43:35,547 INFO Response: 201
2024-05-12 09:43:35,554 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,554 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:43:35,557 INFO Response: 201
2024-05-12 09:43:35,564 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,565 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 09:43:35,568 INFO Response: 201
2024-05-12 09:43:35,575 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,575 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:43:35,579 INFO Response: 201
2024-05-12 09:43:35,586 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,586 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:43:35,589 INFO Response: 201
2024-05-12 09:43:35,596 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,596 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 09:43:35,600 INFO Response: 201
2024-05-12 09:43:35,610 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,611 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 09:43:35,614 INFO Response: 201
2024-05-12 09:43:35,624 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,624 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 09:43:35,628 INFO Response: 201
2024-05-12 09:43:35,637 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,637 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:43:35,641 INFO Response: 201
2024-05-12 09:43:35,648 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,648 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:43:35,651 INFO Response: 201
2024-05-12 09:43:35,658 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,658 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:43:35,661 INFO Response: 201
2024-05-12 09:43:35,667 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,667 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 09:43:35,669 INFO Response: 201
2024-05-12 09:43:35,674 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,674 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,676 INFO Response: 201
2024-05-12 09:43:35,684 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,684 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,688 INFO Response: 201
2024-05-12 09:43:35,695 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,696 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,699 INFO Response: 201
2024-05-12 09:43:35,706 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,706 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,710 INFO Response: 201
2024-05-12 09:43:35,717 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,718 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,720 INFO Response: 201
2024-05-12 09:43:35,728 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,728 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,731 INFO Response: 201
2024-05-12 09:43:35,739 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,739 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,742 INFO Response: 201
2024-05-12 09:43:35,749 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,750 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,753 INFO Response: 201
2024-05-12 09:43:35,760 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,760 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,764 INFO Response: 201
2024-05-12 09:43:35,772 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,772 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,776 INFO Response: 201
2024-05-12 09:43:35,783 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,784 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,787 INFO Response: 201
2024-05-12 09:43:35,795 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,795 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,798 INFO Response: 201
2024-05-12 09:43:35,806 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,806 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,809 INFO Response: 201
2024-05-12 09:43:35,817 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,817 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,821 INFO Response: 201
2024-05-12 09:43:35,828 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,829 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,832 INFO Response: 201
2024-05-12 09:43:35,839 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,839 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 09:43:35,842 INFO Response: 201
2024-05-12 09:43:35,849 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,849 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:43:35,853 INFO Response: 201
2024-05-12 09:43:35,860 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,861 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:43:35,864 INFO Response: 201
2024-05-12 09:43:35,871 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,871 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 09:43:35,874 INFO Response: 201
2024-05-12 09:43:35,885 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,885 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:35,889 INFO Response: 201
2024-05-12 09:43:35,898 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,898 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:35,902 INFO Response: 201
2024-05-12 09:43:35,910 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,910 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:35,913 INFO Response: 201
2024-05-12 09:43:35,922 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,922 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:35,925 INFO Response: 201
2024-05-12 09:43:35,935 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,935 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:35,941 INFO Response: 201
2024-05-12 09:43:35,949 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,949 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:35,953 INFO Response: 201
2024-05-12 09:43:35,961 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,961 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 09:43:35,964 INFO Response: 201
2024-05-12 09:43:35,972 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,972 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:35,976 INFO Response: 201
2024-05-12 09:43:35,986 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,986 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:35,989 INFO Response: 201
2024-05-12 09:43:35,997 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:35,997 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:36,002 INFO Response: 201
2024-05-12 09:43:36,010 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:36,010 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:36,013 INFO Response: 201
2024-05-12 09:43:36,022 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:36,022 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:36,029 INFO Response: 201
2024-05-12 09:43:36,036 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:36,036 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 09:43:36,039 INFO Response: 201
2024-05-12 09:43:37,925 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:43:37,926 INFO Request: GET /api/v1/manage/products/
2024-05-12 09:43:37,938 INFO Response: 200
2024-05-12 09:44:01,531 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:01,532 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 09:44:01,541 INFO Response: 200
2024-05-12 09:44:11,078 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:11,091 INFO Request: POST /api/v1/manage/customers/
2024-05-12 09:44:11,109 INFO Response: 201
2024-05-12 09:44:11,183 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:11,184 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 09:44:11,193 INFO Response: 201
2024-05-12 09:44:11,201 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:11,201 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 09:44:11,206 INFO Response: 201
2024-05-12 09:44:11,213 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:11,213 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 09:44:11,216 ERROR Failed to create tenant or domain: Tenant() got unexpected keyword arguments: 'user_id'
2024-05-12 09:44:11,216 INFO Response: 400
2024-05-12 09:44:25,363 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:25,364 INFO Request: POST /api/v1/manage/customers/
2024-05-12 09:44:25,366 INFO Response: 400
2024-05-12 09:44:31,046 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:31,046 INFO Request: POST /api/v1/manage/customers/
2024-05-12 09:44:31,059 INFO Response: 201
2024-05-12 09:44:31,071 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:31,074 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 09:44:31,087 INFO Response: 201
2024-05-12 09:44:31,137 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:31,137 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 09:44:31,144 INFO Response: 201
2024-05-12 09:44:31,157 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 09:44:31,157 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 09:44:31,164 ERROR Failed to create tenant or domain: Tenant() got unexpected keyword arguments: 'user_id'
2024-05-12 09:44:31,164 INFO Response: 400
2024-05-12 09:49:50,278 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-12 09:49:50,650 INFO Watching for file changes with StatReloader
2024-05-12 09:50:05,957 INFO Watching for file changes with StatReloader
2024-05-12 09:52:29,575 INFO Watching for file changes with StatReloader
2024-05-12 09:52:36,551 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,569 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,578 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,588 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,596 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,610 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,617 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,625 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,631 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,639 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,646 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,656 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,664 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,671 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,677 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,684 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,690 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,698 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,707 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,714 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,721 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,728 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,734 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,741 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,751 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,761 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,769 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,777 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,785 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,791 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,798 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,805 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,812 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,819 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,827 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,833 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,839 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,846 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,852 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,859 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,865 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,872 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,880 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,891 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,899 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,906 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,915 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,922 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,929 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,936 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,943 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,951 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,958 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,967 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,982 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:36,995 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,007 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,015 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,028 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,065 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,075 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,087 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,099 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,158 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,169 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,177 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,185 ERROR JWT validation error: Signature has expired
2024-05-12 09:52:37,193 ERROR JWT validation error: Signature has expired
2024-05-12 10:07:02,795 ERROR JWT validation error: Signature has expired
2024-05-12 10:07:06,601 ERROR JWT validation error: Signature has expired
2024-05-12 10:07:31,350 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:07:31,795 INFO Watching for file changes with StatReloader
2024-05-12 10:08:04,722 ERROR JWT validation error: Signature has expired
2024-05-12 10:09:28,822 ERROR JWT validation error: Signature has expired
2024-05-12 10:09:44,740 INFO Watching for file changes with StatReloader
2024-05-12 10:11:30,231 INFO Watching for file changes with StatReloader
2024-05-12 10:14:40,338 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,351 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,363 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,376 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,387 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,398 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,403 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,408 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,412 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,416 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,421 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,425 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,431 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,448 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,500 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,505 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,510 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,514 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,521 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,526 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,530 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,536 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,540 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,554 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,561 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,570 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,576 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,581 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,592 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,601 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,609 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,615 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,621 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,627 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,632 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,637 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,642 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,646 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,654 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,661 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,671 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,683 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,705 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,710 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,714 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,727 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,742 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,746 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,752 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,757 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,762 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,766 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,778 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,783 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,794 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,803 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,817 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,822 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,827 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,923 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,938 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,945 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,950 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,956 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,961 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,965 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,969 ERROR JWT validation error: Signature has expired
2024-05-12 10:14:40,973 ERROR JWT validation error: Signature has expired
2024-05-12 10:16:57,227 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,227 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:16:57,247 INFO Response: 201
2024-05-12 10:16:57,261 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,261 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:16:57,265 INFO Response: 201
2024-05-12 10:16:57,270 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,270 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:16:57,273 INFO Response: 201
2024-05-12 10:16:57,277 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,277 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:16:57,316 INFO Response: 201
2024-05-12 10:16:57,328 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,328 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:16:57,332 INFO Response: 201
2024-05-12 10:16:57,343 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,344 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:16:57,349 INFO Response: 201
2024-05-12 10:16:57,357 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,357 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:16:57,360 INFO Response: 201
2024-05-12 10:16:57,364 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,364 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:16:57,368 INFO Response: 201
2024-05-12 10:16:57,373 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,373 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:16:57,376 INFO Response: 201
2024-05-12 10:16:57,380 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,380 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:16:57,384 INFO Response: 201
2024-05-12 10:16:57,389 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,389 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:16:57,392 INFO Response: 201
2024-05-12 10:16:57,397 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,397 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:16:57,400 INFO Response: 201
2024-05-12 10:16:57,406 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,406 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:16:57,408 INFO Response: 201
2024-05-12 10:16:57,413 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,413 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:16:57,417 INFO Response: 201
2024-05-12 10:16:57,439 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,439 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:16:57,444 INFO Response: 201
2024-05-12 10:16:57,453 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,453 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:16:57,457 INFO Response: 201
2024-05-12 10:16:57,464 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,464 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:16:57,467 INFO Response: 201
2024-05-12 10:16:57,474 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,474 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:16:57,477 INFO Response: 201
2024-05-12 10:16:57,483 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,483 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:16:57,485 INFO Response: 201
2024-05-12 10:16:57,493 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,493 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:16:57,497 INFO Response: 201
2024-05-12 10:16:57,528 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,528 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:16:57,531 INFO Response: 201
2024-05-12 10:16:57,559 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,560 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:16:57,564 INFO Response: 201
2024-05-12 10:16:57,576 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,576 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:16:57,579 INFO Response: 201
2024-05-12 10:16:57,625 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,625 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:16:57,650 INFO Response: 201
2024-05-12 10:16:57,660 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,660 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:16:57,664 INFO Response: 201
2024-05-12 10:16:57,672 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,672 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:16:57,674 INFO Response: 201
2024-05-12 10:16:57,680 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,680 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:16:57,682 INFO Response: 201
2024-05-12 10:16:57,688 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,688 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:16:57,691 INFO Response: 201
2024-05-12 10:16:57,695 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,696 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:16:57,697 INFO Response: 201
2024-05-12 10:16:57,702 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,702 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:16:57,705 INFO Response: 201
2024-05-12 10:16:57,710 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,710 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:16:57,712 INFO Response: 201
2024-05-12 10:16:57,717 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,717 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:16:57,719 INFO Response: 201
2024-05-12 10:16:57,723 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,723 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:16:57,726 INFO Response: 201
2024-05-12 10:16:57,730 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,730 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:16:57,787 INFO Response: 201
2024-05-12 10:16:57,812 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,817 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:16:57,850 INFO Response: 201
2024-05-12 10:16:57,859 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,859 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:16:57,862 INFO Response: 201
2024-05-12 10:16:57,871 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:57,871 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:57,992 INFO Response: 201
2024-05-12 10:16:58,067 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,068 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,072 INFO Response: 201
2024-05-12 10:16:58,080 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,080 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,082 INFO Response: 201
2024-05-12 10:16:58,089 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,089 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,091 INFO Response: 201
2024-05-12 10:16:58,134 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,134 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,136 INFO Response: 201
2024-05-12 10:16:58,144 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,144 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,147 INFO Response: 201
2024-05-12 10:16:58,152 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,152 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,186 INFO Response: 201
2024-05-12 10:16:58,195 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,195 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,198 INFO Response: 201
2024-05-12 10:16:58,224 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,224 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,227 INFO Response: 201
2024-05-12 10:16:58,232 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,232 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,235 INFO Response: 201
2024-05-12 10:16:58,240 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,240 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,245 INFO Response: 201
2024-05-12 10:16:58,257 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,257 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,260 INFO Response: 201
2024-05-12 10:16:58,264 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,264 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,267 INFO Response: 201
2024-05-12 10:16:58,277 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,277 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,281 INFO Response: 201
2024-05-12 10:16:58,288 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,288 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,290 INFO Response: 201
2024-05-12 10:16:58,295 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,295 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:16:58,297 INFO Response: 201
2024-05-12 10:16:58,302 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,302 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:16:58,305 INFO Response: 201
2024-05-12 10:16:58,313 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,313 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:16:58,318 INFO Response: 201
2024-05-12 10:16:58,328 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,328 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:16:58,331 INFO Response: 201
2024-05-12 10:16:58,341 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,341 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:16:58,343 INFO Response: 201
2024-05-12 10:16:58,348 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,348 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:16:58,350 INFO Response: 201
2024-05-12 10:16:58,354 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,354 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:16:58,356 INFO Response: 201
2024-05-12 10:16:58,361 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,362 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:16:58,364 INFO Response: 201
2024-05-12 10:16:58,370 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,370 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:16:58,374 INFO Response: 201
2024-05-12 10:16:58,387 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,387 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:16:58,390 INFO Response: 201
2024-05-12 10:16:58,395 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,395 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:16:58,396 INFO Response: 201
2024-05-12 10:16:58,401 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,401 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:16:58,403 INFO Response: 201
2024-05-12 10:16:58,408 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,408 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:16:58,410 INFO Response: 201
2024-05-12 10:16:58,414 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,414 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:16:58,417 INFO Response: 201
2024-05-12 10:16:58,422 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,423 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:16:58,424 INFO Response: 201
2024-05-12 10:16:58,429 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,430 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:16:58,432 INFO Response: 201
2024-05-12 10:16:58,437 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:16:58,437 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:16:58,439 INFO Response: 201
2024-05-12 10:18:44,870 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:18:44,871 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 10:18:44,927 INFO Response: 200
2024-05-12 10:21:44,529 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:21:44,529 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 10:21:44,539 INFO Response: 200
2024-05-12 10:23:55,379 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-12 10:23:55,831 INFO Watching for file changes with StatReloader
2024-05-12 10:24:17,873 INFO Watching for file changes with StatReloader
2024-05-12 10:24:32,143 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,143 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:24:32,162 INFO Response: 201
2024-05-12 10:24:32,170 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,170 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:24:32,175 INFO Response: 201
2024-05-12 10:24:32,186 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,186 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:24:32,192 INFO Response: 201
2024-05-12 10:24:32,207 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,207 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:24:32,212 INFO Response: 201
2024-05-12 10:24:32,220 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,220 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:24:32,225 INFO Response: 201
2024-05-12 10:24:32,250 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,250 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:24:32,264 INFO Response: 201
2024-05-12 10:24:32,272 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,272 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:24:32,279 INFO Response: 201
2024-05-12 10:24:32,287 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,287 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:24:32,292 INFO Response: 201
2024-05-12 10:24:32,300 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,300 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:24:32,305 INFO Response: 201
2024-05-12 10:24:32,313 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,314 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:24:32,319 INFO Response: 201
2024-05-12 10:24:32,331 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,335 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:24:32,339 INFO Response: 201
2024-05-12 10:24:32,347 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,347 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:24:32,351 INFO Response: 201
2024-05-12 10:24:32,359 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,359 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:24:32,362 INFO Response: 201
2024-05-12 10:24:32,375 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,376 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:24:32,388 INFO Response: 201
2024-05-12 10:24:32,400 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,401 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:24:32,404 INFO Response: 201
2024-05-12 10:24:32,427 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,427 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:24:32,447 INFO Response: 201
2024-05-12 10:24:32,481 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,481 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:24:32,485 INFO Response: 201
2024-05-12 10:24:32,493 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,493 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:24:32,496 INFO Response: 201
2024-05-12 10:24:32,503 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,504 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:24:32,506 INFO Response: 201
2024-05-12 10:24:32,519 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,519 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:24:32,526 INFO Response: 201
2024-05-12 10:24:32,536 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,536 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:24:32,540 INFO Response: 201
2024-05-12 10:24:32,549 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,549 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:24:32,553 INFO Response: 201
2024-05-12 10:24:32,563 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,563 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:24:32,567 INFO Response: 201
2024-05-12 10:24:32,580 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,580 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:24:32,584 INFO Response: 201
2024-05-12 10:24:32,595 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,595 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:24:32,600 INFO Response: 201
2024-05-12 10:24:32,609 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,609 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:24:32,613 INFO Response: 201
2024-05-12 10:24:32,620 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,620 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:24:32,623 INFO Response: 201
2024-05-12 10:24:32,630 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,630 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:24:32,634 INFO Response: 201
2024-05-12 10:24:32,641 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,642 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:24:32,647 INFO Response: 201
2024-05-12 10:24:32,671 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,671 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:24:32,675 INFO Response: 201
2024-05-12 10:24:32,683 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,683 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:24:32,687 INFO Response: 201
2024-05-12 10:24:32,701 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,702 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:24:32,705 INFO Response: 201
2024-05-12 10:24:32,729 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,729 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:24:32,736 INFO Response: 201
2024-05-12 10:24:32,743 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,743 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:24:32,746 INFO Response: 201
2024-05-12 10:24:32,767 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,767 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:24:32,771 INFO Response: 201
2024-05-12 10:24:32,802 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,802 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:24:32,806 INFO Response: 201
2024-05-12 10:24:32,814 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,814 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:32,818 INFO Response: 201
2024-05-12 10:24:32,828 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,828 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:32,831 INFO Response: 201
2024-05-12 10:24:32,841 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,841 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:32,844 INFO Response: 201
2024-05-12 10:24:32,851 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,852 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:32,855 INFO Response: 201
2024-05-12 10:24:32,863 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,863 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:32,867 INFO Response: 201
2024-05-12 10:24:32,952 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,953 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:32,956 INFO Response: 201
2024-05-12 10:24:32,979 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,979 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:32,985 INFO Response: 201
2024-05-12 10:24:32,995 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:32,995 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:32,999 INFO Response: 201
2024-05-12 10:24:33,022 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,022 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:33,045 INFO Response: 201
2024-05-12 10:24:33,053 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,053 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:33,056 INFO Response: 201
2024-05-12 10:24:33,067 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,067 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:33,070 INFO Response: 201
2024-05-12 10:24:33,080 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,083 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:33,086 INFO Response: 201
2024-05-12 10:24:33,107 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,108 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:33,116 INFO Response: 201
2024-05-12 10:24:33,125 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,125 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:33,128 INFO Response: 201
2024-05-12 10:24:33,135 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,136 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:33,139 INFO Response: 201
2024-05-12 10:24:33,147 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,148 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:24:33,151 INFO Response: 201
2024-05-12 10:24:33,160 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,160 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:24:33,165 INFO Response: 201
2024-05-12 10:24:33,173 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,173 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:24:33,177 INFO Response: 201
2024-05-12 10:24:33,184 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,184 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:24:33,188 INFO Response: 201
2024-05-12 10:24:33,196 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,196 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:24:33,199 INFO Response: 201
2024-05-12 10:24:33,207 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,207 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:24:33,210 INFO Response: 201
2024-05-12 10:24:33,218 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,218 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:24:33,221 INFO Response: 201
2024-05-12 10:24:33,229 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,229 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:24:33,233 INFO Response: 201
2024-05-12 10:24:33,242 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,242 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:24:33,245 INFO Response: 201
2024-05-12 10:24:33,253 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,253 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:24:33,256 INFO Response: 201
2024-05-12 10:24:33,264 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,264 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:24:33,267 INFO Response: 201
2024-05-12 10:24:33,275 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,275 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:24:33,279 INFO Response: 201
2024-05-12 10:24:33,287 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,288 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:24:33,291 INFO Response: 201
2024-05-12 10:24:33,316 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,317 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:24:33,320 INFO Response: 201
2024-05-12 10:24:33,329 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,329 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:24:33,332 INFO Response: 201
2024-05-12 10:24:33,348 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,348 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:24:33,360 INFO Response: 201
2024-05-12 10:24:33,388 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:33,388 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:24:33,393 INFO Response: 201
2024-05-12 10:24:37,392 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:37,392 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 10:24:37,414 INFO Response: 200
2024-05-12 10:24:45,992 ERROR JWT validation error: Signature has expired
2024-05-12 10:24:50,999 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:24:51,000 INFO Request: GET /api/v1/manage/products/
2024-05-12 10:24:51,007 INFO Response: 200
2024-05-12 10:25:11,305 ERROR JWT validation error: Signature has expired
2024-05-12 10:25:54,449 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:25:54,450 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:25:54,457 INFO Response: 201
2024-05-12 10:25:54,463 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:25:54,467 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:25:54,516 INFO Response: 201
2024-05-12 10:25:54,563 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:25:54,563 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:25:54,597 INFO Response: 201
2024-05-12 10:25:54,692 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:25:54,717 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:25:54,728 ERROR Failed to create tenant or domain: Tenant() got unexpected keyword arguments: 'user_id'
2024-05-12 10:25:54,728 INFO Response: 400
2024-05-12 10:28:49,815 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-12 10:28:50,202 INFO Watching for file changes with StatReloader
2024-05-12 10:37:09,441 INFO Watching for file changes with StatReloader
2024-05-12 10:37:13,603 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,603 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:37:13,628 INFO Response: 201
2024-05-12 10:37:13,637 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,638 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:37:13,648 INFO Response: 201
2024-05-12 10:37:13,656 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,656 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:37:13,662 INFO Response: 201
2024-05-12 10:37:13,672 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,672 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:37:13,677 INFO Response: 201
2024-05-12 10:37:13,684 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,684 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:37:13,689 INFO Response: 201
2024-05-12 10:37:13,696 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,696 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:37:13,702 INFO Response: 201
2024-05-12 10:37:13,710 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,710 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:37:13,717 INFO Response: 201
2024-05-12 10:37:13,726 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,726 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:37:13,732 INFO Response: 201
2024-05-12 10:37:13,743 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,743 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:37:13,750 INFO Response: 201
2024-05-12 10:37:13,764 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,764 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:37:13,769 INFO Response: 201
2024-05-12 10:37:13,776 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,777 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:37:13,781 INFO Response: 201
2024-05-12 10:37:13,790 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,790 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:37:13,793 INFO Response: 201
2024-05-12 10:37:13,803 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,803 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:37:13,806 INFO Response: 201
2024-05-12 10:37:13,835 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,835 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:37:13,853 INFO Response: 201
2024-05-12 10:37:13,876 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,876 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:37:13,900 INFO Response: 201
2024-05-12 10:37:13,911 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,911 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:37:13,914 INFO Response: 201
2024-05-12 10:37:13,922 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,923 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:37:13,929 INFO Response: 201
2024-05-12 10:37:13,938 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,938 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:37:13,941 INFO Response: 201
2024-05-12 10:37:13,957 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,957 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:37:13,960 INFO Response: 201
2024-05-12 10:37:13,969 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,969 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:37:13,973 INFO Response: 201
2024-05-12 10:37:13,981 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,981 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:37:13,984 INFO Response: 201
2024-05-12 10:37:13,992 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:13,992 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:37:13,996 INFO Response: 201
2024-05-12 10:37:14,004 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,004 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:37:14,007 INFO Response: 201
2024-05-12 10:37:14,018 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,018 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:37:14,021 INFO Response: 201
2024-05-12 10:37:14,031 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,031 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:37:14,035 INFO Response: 201
2024-05-12 10:37:14,043 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,043 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:37:14,046 INFO Response: 201
2024-05-12 10:37:14,055 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,055 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:37:14,058 INFO Response: 201
2024-05-12 10:37:14,067 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,067 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:37:14,071 INFO Response: 201
2024-05-12 10:37:14,080 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,080 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:37:14,083 INFO Response: 201
2024-05-12 10:37:14,095 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,095 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:37:14,098 INFO Response: 201
2024-05-12 10:37:14,107 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,107 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:37:14,112 INFO Response: 201
2024-05-12 10:37:14,137 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,137 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:37:14,140 INFO Response: 201
2024-05-12 10:37:14,148 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,148 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:37:14,152 INFO Response: 201
2024-05-12 10:37:14,160 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,160 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:37:14,162 INFO Response: 201
2024-05-12 10:37:14,169 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,169 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:37:14,173 INFO Response: 201
2024-05-12 10:37:14,183 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,183 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:37:14,185 INFO Response: 201
2024-05-12 10:37:14,204 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,205 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,211 INFO Response: 201
2024-05-12 10:37:14,219 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,219 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,222 INFO Response: 201
2024-05-12 10:37:14,230 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,230 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,233 INFO Response: 201
2024-05-12 10:37:14,244 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,244 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,249 INFO Response: 201
2024-05-12 10:37:14,262 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,262 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,265 INFO Response: 201
2024-05-12 10:37:14,273 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,273 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,276 INFO Response: 201
2024-05-12 10:37:14,284 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,284 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,288 INFO Response: 201
2024-05-12 10:37:14,297 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,297 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,301 INFO Response: 201
2024-05-12 10:37:14,317 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,319 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,324 INFO Response: 201
2024-05-12 10:37:14,331 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,331 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,335 INFO Response: 201
2024-05-12 10:37:14,343 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,343 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,345 INFO Response: 201
2024-05-12 10:37:14,353 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,354 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,357 INFO Response: 201
2024-05-12 10:37:14,366 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,366 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,371 INFO Response: 201
2024-05-12 10:37:14,380 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,380 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,383 INFO Response: 201
2024-05-12 10:37:14,391 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,392 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,395 INFO Response: 201
2024-05-12 10:37:14,403 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,403 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:37:14,406 INFO Response: 201
2024-05-12 10:37:14,439 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,439 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:37:14,449 INFO Response: 201
2024-05-12 10:37:14,458 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,458 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:37:14,461 INFO Response: 201
2024-05-12 10:37:14,469 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,469 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:37:14,471 INFO Response: 201
2024-05-12 10:37:14,478 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,478 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:37:14,481 INFO Response: 201
2024-05-12 10:37:14,487 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,487 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:37:14,490 INFO Response: 201
2024-05-12 10:37:14,525 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,525 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:37:14,528 INFO Response: 201
2024-05-12 10:37:14,564 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,564 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:37:14,568 INFO Response: 201
2024-05-12 10:37:14,577 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,577 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:37:14,582 INFO Response: 201
2024-05-12 10:37:14,590 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,591 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:37:14,599 INFO Response: 201
2024-05-12 10:37:14,607 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,607 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:37:14,611 INFO Response: 201
2024-05-12 10:37:14,642 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,642 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:37:14,646 INFO Response: 201
2024-05-12 10:37:14,653 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,654 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:37:14,657 INFO Response: 201
2024-05-12 10:37:14,663 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,664 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:37:14,666 INFO Response: 201
2024-05-12 10:37:14,673 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,673 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:37:14,676 INFO Response: 201
2024-05-12 10:37:14,683 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,683 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:37:14,686 INFO Response: 201
2024-05-12 10:37:14,695 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:14,695 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:37:14,698 INFO Response: 201
2024-05-12 10:37:16,454 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:16,455 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:37:16,460 INFO Response: 201
2024-05-12 10:37:16,470 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:16,470 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:37:16,479 INFO Response: 201
2024-05-12 10:37:16,491 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:16,491 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:37:16,499 INFO Response: 201
2024-05-12 10:37:16,507 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:16,507 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:37:17,685 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 10:37:17,703 INFO Response: 201
2024-05-12 10:37:26,075 ERROR JWT validation error: Signature has expired
2024-05-12 10:37:34,294 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:37:34,294 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 10:37:34,300 INFO Response: 200
2024-05-12 10:38:14,584 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-12 10:38:15,078 INFO Watching for file changes with StatReloader
2024-05-12 10:38:28,706 INFO Watching for file changes with StatReloader
2024-05-12 10:38:30,839 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,839 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:38:30,859 INFO Response: 201
2024-05-12 10:38:30,871 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,871 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:38:30,876 INFO Response: 201
2024-05-12 10:38:30,889 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,889 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:38:30,894 INFO Response: 201
2024-05-12 10:38:30,904 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,904 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:38:30,910 INFO Response: 201
2024-05-12 10:38:30,920 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,921 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:38:30,926 INFO Response: 201
2024-05-12 10:38:30,933 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,934 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:38:30,940 INFO Response: 201
2024-05-12 10:38:30,956 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,957 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:38:30,962 INFO Response: 201
2024-05-12 10:38:30,971 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,971 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:38:30,976 INFO Response: 201
2024-05-12 10:38:30,993 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:30,994 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:38:30,999 INFO Response: 201
2024-05-12 10:38:31,011 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,011 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:38:31,022 INFO Response: 201
2024-05-12 10:38:31,030 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,031 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:38:31,035 INFO Response: 201
2024-05-12 10:38:31,043 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,043 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:38:31,046 INFO Response: 201
2024-05-12 10:38:31,053 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,054 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:38:31,073 INFO Response: 201
2024-05-12 10:38:31,123 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,123 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:38:31,138 INFO Response: 201
2024-05-12 10:38:31,164 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,164 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:38:31,168 INFO Response: 201
2024-05-12 10:38:31,183 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,184 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:38:31,191 INFO Response: 201
2024-05-12 10:38:31,198 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,198 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:38:31,202 INFO Response: 201
2024-05-12 10:38:31,208 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,209 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:38:31,211 INFO Response: 201
2024-05-12 10:38:31,223 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,252 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:38:31,255 INFO Response: 201
2024-05-12 10:38:31,269 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,270 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:38:31,275 INFO Response: 201
2024-05-12 10:38:31,283 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,283 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:38:31,286 INFO Response: 201
2024-05-12 10:38:31,294 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,294 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:38:31,297 INFO Response: 201
2024-05-12 10:38:31,304 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,304 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:38:31,307 INFO Response: 201
2024-05-12 10:38:31,315 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,315 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:38:31,318 INFO Response: 201
2024-05-12 10:38:31,325 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,326 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:38:31,329 INFO Response: 201
2024-05-12 10:38:31,338 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,339 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:38:31,343 INFO Response: 201
2024-05-12 10:38:31,352 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,352 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:38:31,356 INFO Response: 201
2024-05-12 10:38:31,364 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,364 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:38:31,368 INFO Response: 201
2024-05-12 10:38:31,375 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,375 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:38:31,378 INFO Response: 201
2024-05-12 10:38:31,385 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,385 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:38:31,388 INFO Response: 201
2024-05-12 10:38:31,394 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,395 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:38:31,398 INFO Response: 201
2024-05-12 10:38:31,405 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,405 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:38:31,408 INFO Response: 201
2024-05-12 10:38:31,416 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,417 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:38:31,421 INFO Response: 201
2024-05-12 10:38:31,429 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,429 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:38:31,433 INFO Response: 201
2024-05-12 10:38:31,441 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,441 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:38:31,450 INFO Response: 201
2024-05-12 10:38:31,458 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,458 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:38:31,462 INFO Response: 201
2024-05-12 10:38:31,469 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,469 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,476 INFO Response: 201
2024-05-12 10:38:31,485 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,485 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,491 INFO Response: 201
2024-05-12 10:38:31,498 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,498 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,501 INFO Response: 201
2024-05-12 10:38:31,511 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,511 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,514 INFO Response: 201
2024-05-12 10:38:31,522 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,522 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,525 INFO Response: 201
2024-05-12 10:38:31,533 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,533 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,537 INFO Response: 201
2024-05-12 10:38:31,544 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,544 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,547 INFO Response: 201
2024-05-12 10:38:31,555 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,555 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,558 INFO Response: 201
2024-05-12 10:38:31,566 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,566 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,569 INFO Response: 201
2024-05-12 10:38:31,576 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,576 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,579 INFO Response: 201
2024-05-12 10:38:31,587 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,587 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,590 INFO Response: 201
2024-05-12 10:38:31,602 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,602 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,609 INFO Response: 201
2024-05-12 10:38:31,616 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,616 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,619 INFO Response: 201
2024-05-12 10:38:31,627 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,627 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,631 INFO Response: 201
2024-05-12 10:38:31,639 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,639 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,642 INFO Response: 201
2024-05-12 10:38:31,649 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,649 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:38:31,653 INFO Response: 201
2024-05-12 10:38:31,661 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,661 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:38:31,665 INFO Response: 201
2024-05-12 10:38:31,673 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,673 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:38:31,676 INFO Response: 201
2024-05-12 10:38:31,684 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,684 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:38:31,687 INFO Response: 201
2024-05-12 10:38:31,695 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,696 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:38:31,699 INFO Response: 201
2024-05-12 10:38:31,707 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,708 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:38:31,711 INFO Response: 201
2024-05-12 10:38:31,719 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,719 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:38:31,723 INFO Response: 201
2024-05-12 10:38:31,730 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,730 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:38:31,734 INFO Response: 201
2024-05-12 10:38:31,742 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,742 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:38:31,745 INFO Response: 201
2024-05-12 10:38:31,753 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,753 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:38:31,756 INFO Response: 201
2024-05-12 10:38:31,763 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,763 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:38:31,766 INFO Response: 201
2024-05-12 10:38:31,775 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,776 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:38:31,779 INFO Response: 201
2024-05-12 10:38:31,787 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,787 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:38:31,791 INFO Response: 201
2024-05-12 10:38:31,798 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,798 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:38:31,801 INFO Response: 201
2024-05-12 10:38:31,809 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,809 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:38:31,812 INFO Response: 201
2024-05-12 10:38:31,819 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,820 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:38:31,823 INFO Response: 201
2024-05-12 10:38:31,830 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:31,830 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:38:31,833 INFO Response: 201
2024-05-12 10:38:32,789 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:32,789 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:38:32,805 INFO Response: 201
2024-05-12 10:38:32,824 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:32,824 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:38:32,834 INFO Response: 201
2024-05-12 10:38:32,843 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:32,843 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:38:32,854 INFO Response: 201
2024-05-12 10:38:32,863 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:32,863 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:38:34,015 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 10:38:34,022 INFO Response: 201
2024-05-12 10:38:35,143 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:38:35,143 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 10:38:35,152 INFO Response: 200
2024-05-12 10:39:15,010 INFO /root/delta_api/delta_sase/tenants_app/serializers.py changed, reloading.
2024-05-12 10:39:15,480 INFO Watching for file changes with StatReloader
2024-05-12 10:39:38,014 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:39:38,014 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:39:38,030 INFO Response: 400
2024-05-12 10:39:47,869 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:39:47,870 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:39:47,878 INFO Response: 201
2024-05-12 10:39:47,891 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:39:47,892 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:39:47,901 INFO Response: 201
2024-05-12 10:39:47,909 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:39:47,909 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:39:47,914 INFO Response: 201
2024-05-12 10:39:47,921 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:39:47,921 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:39:49,199 INFO Created new Tenant Tenant2 with domain 1002
2024-05-12 10:39:49,212 INFO Response: 201
2024-05-12 10:39:56,059 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:39:56,059 INFO Request: GET /api/v1/manage/tenants/4/
2024-05-12 10:39:56,069 INFO Response: 200
2024-05-12 10:44:23,065 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:44:23,553 INFO Watching for file changes with StatReloader
2024-05-12 10:44:34,612 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:44:34,612 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:44:34,624 INFO Response: 201
2024-05-12 10:44:34,633 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:44:34,633 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:44:34,646 INFO Response: 201
2024-05-12 10:44:34,691 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:44:34,691 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:44:34,698 INFO Response: 201
2024-05-12 10:44:34,722 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:44:34,723 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:44:36,117 INFO Created new Tenant Tenant4 with domain 1003
2024-05-12 10:44:36,123 INFO Response: 201
2024-05-12 10:45:43,754 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:45:44,101 INFO Watching for file changes with StatReloader
2024-05-12 10:45:58,181 INFO Watching for file changes with StatReloader
2024-05-12 10:45:59,188 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,188 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:45:59,235 INFO Response: 201
2024-05-12 10:45:59,244 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,244 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:45:59,251 INFO Response: 201
2024-05-12 10:45:59,260 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,262 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:45:59,268 INFO Response: 201
2024-05-12 10:45:59,279 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,279 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:45:59,295 INFO Response: 201
2024-05-12 10:45:59,307 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,307 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:45:59,317 INFO Response: 201
2024-05-12 10:45:59,327 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,327 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:45:59,334 INFO Response: 201
2024-05-12 10:45:59,347 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,348 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:45:59,358 INFO Response: 201
2024-05-12 10:45:59,366 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,366 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:45:59,381 INFO Response: 201
2024-05-12 10:45:59,391 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,391 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:45:59,411 INFO Response: 201
2024-05-12 10:45:59,419 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,419 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:45:59,425 INFO Response: 201
2024-05-12 10:45:59,432 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,432 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:45:59,436 INFO Response: 201
2024-05-12 10:45:59,444 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,444 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:45:59,447 INFO Response: 201
2024-05-12 10:45:59,455 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,455 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:45:59,461 INFO Response: 201
2024-05-12 10:45:59,472 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,472 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:45:59,477 INFO Response: 201
2024-05-12 10:45:59,507 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,507 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:45:59,515 INFO Response: 201
2024-05-12 10:45:59,530 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,530 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:45:59,547 INFO Response: 201
2024-05-12 10:45:59,555 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,555 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:45:59,558 INFO Response: 201
2024-05-12 10:45:59,572 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,572 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:45:59,580 INFO Response: 201
2024-05-12 10:45:59,590 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,590 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:45:59,593 INFO Response: 201
2024-05-12 10:45:59,600 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,600 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:45:59,604 INFO Response: 201
2024-05-12 10:45:59,624 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,624 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:45:59,647 INFO Response: 201
2024-05-12 10:45:59,659 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,659 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:45:59,663 INFO Response: 201
2024-05-12 10:45:59,670 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,671 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:45:59,674 INFO Response: 201
2024-05-12 10:45:59,682 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,682 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:45:59,686 INFO Response: 201
2024-05-12 10:45:59,693 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,693 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:45:59,696 INFO Response: 201
2024-05-12 10:45:59,704 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,704 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:45:59,708 INFO Response: 201
2024-05-12 10:45:59,719 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,719 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:45:59,722 INFO Response: 201
2024-05-12 10:45:59,731 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,731 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:45:59,735 INFO Response: 201
2024-05-12 10:45:59,756 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,756 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:45:59,770 INFO Response: 201
2024-05-12 10:45:59,779 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,780 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:45:59,783 INFO Response: 201
2024-05-12 10:45:59,795 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,795 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:45:59,803 INFO Response: 201
2024-05-12 10:45:59,815 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,815 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:45:59,818 INFO Response: 201
2024-05-12 10:45:59,826 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,827 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:45:59,830 INFO Response: 201
2024-05-12 10:45:59,839 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,840 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:45:59,843 INFO Response: 201
2024-05-12 10:45:59,852 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,852 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:45:59,855 INFO Response: 201
2024-05-12 10:45:59,863 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,864 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:45:59,867 INFO Response: 201
2024-05-12 10:45:59,876 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,876 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,880 INFO Response: 201
2024-05-12 10:45:59,887 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,888 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,891 INFO Response: 201
2024-05-12 10:45:59,898 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,898 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,901 INFO Response: 201
2024-05-12 10:45:59,911 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,911 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,915 INFO Response: 201
2024-05-12 10:45:59,923 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,923 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,926 INFO Response: 201
2024-05-12 10:45:59,934 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,934 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,938 INFO Response: 201
2024-05-12 10:45:59,960 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,960 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,964 INFO Response: 201
2024-05-12 10:45:59,971 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,971 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,974 INFO Response: 201
2024-05-12 10:45:59,984 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:45:59,984 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:45:59,993 INFO Response: 201
2024-05-12 10:46:00,001 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,001 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:46:00,005 INFO Response: 201
2024-05-12 10:46:00,012 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,012 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:46:00,015 INFO Response: 201
2024-05-12 10:46:00,023 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,023 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:46:00,025 INFO Response: 201
2024-05-12 10:46:00,037 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,037 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:46:00,040 INFO Response: 201
2024-05-12 10:46:00,048 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,048 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:46:00,051 INFO Response: 201
2024-05-12 10:46:00,059 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,059 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:46:00,062 INFO Response: 201
2024-05-12 10:46:00,072 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,072 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:46:00,076 INFO Response: 201
2024-05-12 10:46:00,095 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,095 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:46:00,107 INFO Response: 201
2024-05-12 10:46:00,115 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,115 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:46:00,119 INFO Response: 201
2024-05-12 10:46:00,129 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,129 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:46:00,133 INFO Response: 201
2024-05-12 10:46:00,144 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,144 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:46:00,147 INFO Response: 201
2024-05-12 10:46:00,163 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,163 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:46:00,167 INFO Response: 201
2024-05-12 10:46:00,175 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,175 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:46:00,178 INFO Response: 201
2024-05-12 10:46:00,186 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,186 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:46:00,189 INFO Response: 201
2024-05-12 10:46:00,196 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,196 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:46:00,199 INFO Response: 201
2024-05-12 10:46:00,206 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,206 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:46:00,210 INFO Response: 201
2024-05-12 10:46:00,217 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,218 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:46:00,221 INFO Response: 201
2024-05-12 10:46:00,229 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,229 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:46:00,233 INFO Response: 201
2024-05-12 10:46:00,241 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,242 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:46:00,245 INFO Response: 201
2024-05-12 10:46:00,253 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,254 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:46:00,257 INFO Response: 201
2024-05-12 10:46:00,266 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,267 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:46:00,270 INFO Response: 201
2024-05-12 10:46:00,277 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,277 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:46:00,280 INFO Response: 201
2024-05-12 10:46:00,288 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:00,288 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:46:00,291 INFO Response: 201
2024-05-12 10:46:02,514 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:02,514 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:46:02,523 INFO Response: 201
2024-05-12 10:46:02,536 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:02,537 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:46:02,547 INFO Response: 201
2024-05-12 10:46:02,559 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:02,560 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:46:02,567 INFO Response: 201
2024-05-12 10:46:02,587 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:46:02,587 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:46:04,049 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 10:46:04,056 INFO Response: 201
2024-05-12 10:48:00,992 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:48:01,414 INFO Watching for file changes with StatReloader
2024-05-12 10:48:21,961 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:48:21,966 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:48:21,985 INFO Response: 201
2024-05-12 10:48:22,041 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:48:22,041 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:48:22,066 INFO Response: 201
2024-05-12 10:48:22,121 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:48:22,122 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:48:22,127 INFO Response: 201
2024-05-12 10:48:22,132 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:48:22,132 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:48:23,589 INFO Created new Tenant Tenant2 with domain 1002
2024-05-12 10:48:23,595 INFO Response: 201
2024-05-12 10:48:38,339 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:48:38,639 INFO Watching for file changes with StatReloader
2024-05-12 10:50:48,072 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:50:48,564 INFO Watching for file changes with StatReloader
2024-05-12 10:52:18,666 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:52:19,011 INFO Watching for file changes with StatReloader
2024-05-12 10:52:33,923 INFO Watching for file changes with StatReloader
2024-05-12 10:52:34,882 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:34,882 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:52:34,902 INFO Response: 201
2024-05-12 10:52:34,920 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:34,920 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:52:34,931 INFO Response: 201
2024-05-12 10:52:34,941 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:34,943 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:52:34,948 INFO Response: 201
2024-05-12 10:52:34,979 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:34,979 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:52:34,984 INFO Response: 201
2024-05-12 10:52:34,993 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:34,993 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:52:34,998 INFO Response: 201
2024-05-12 10:52:35,007 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,007 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:52:35,013 INFO Response: 201
2024-05-12 10:52:35,022 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,022 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:52:35,028 INFO Response: 201
2024-05-12 10:52:35,036 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,036 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:52:35,041 INFO Response: 201
2024-05-12 10:52:35,050 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,050 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:52:35,056 INFO Response: 201
2024-05-12 10:52:35,075 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,076 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:52:35,087 INFO Response: 201
2024-05-12 10:52:35,097 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,097 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:52:35,101 INFO Response: 201
2024-05-12 10:52:35,109 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,110 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:52:35,112 INFO Response: 201
2024-05-12 10:52:35,121 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,121 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:52:35,125 INFO Response: 201
2024-05-12 10:52:35,133 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,133 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:52:35,137 INFO Response: 201
2024-05-12 10:52:35,145 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,146 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:52:35,149 INFO Response: 201
2024-05-12 10:52:35,163 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,163 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:52:35,168 INFO Response: 201
2024-05-12 10:52:35,176 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,177 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:52:35,180 INFO Response: 201
2024-05-12 10:52:35,188 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,188 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:52:35,191 INFO Response: 201
2024-05-12 10:52:35,200 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,200 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:52:35,204 INFO Response: 201
2024-05-12 10:52:35,232 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,232 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:52:35,259 INFO Response: 201
2024-05-12 10:52:35,285 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,285 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:52:35,291 INFO Response: 201
2024-05-12 10:52:35,300 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,300 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:52:35,307 INFO Response: 201
2024-05-12 10:52:35,326 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,326 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:52:35,330 INFO Response: 201
2024-05-12 10:52:35,341 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,341 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:52:35,350 INFO Response: 201
2024-05-12 10:52:35,368 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,368 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:52:35,376 INFO Response: 201
2024-05-12 10:52:35,384 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,384 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:52:35,387 INFO Response: 201
2024-05-12 10:52:35,397 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,397 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:52:35,400 INFO Response: 201
2024-05-12 10:52:35,408 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,408 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:52:35,412 INFO Response: 201
2024-05-12 10:52:35,420 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,420 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:52:35,428 INFO Response: 201
2024-05-12 10:52:35,436 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,436 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:52:35,439 INFO Response: 201
2024-05-12 10:52:35,455 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,456 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:52:35,459 INFO Response: 201
2024-05-12 10:52:35,467 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,467 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:52:35,470 INFO Response: 201
2024-05-12 10:52:35,478 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,479 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:52:35,482 INFO Response: 201
2024-05-12 10:52:35,489 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,490 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:52:35,493 INFO Response: 201
2024-05-12 10:52:35,504 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,505 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:52:35,508 INFO Response: 201
2024-05-12 10:52:35,517 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,518 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:52:35,521 INFO Response: 201
2024-05-12 10:52:35,543 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,544 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,549 INFO Response: 201
2024-05-12 10:52:35,580 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,580 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,596 INFO Response: 201
2024-05-12 10:52:35,612 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,612 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,615 INFO Response: 201
2024-05-12 10:52:35,626 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,626 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,629 INFO Response: 201
2024-05-12 10:52:35,638 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,638 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,641 INFO Response: 201
2024-05-12 10:52:35,652 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,652 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,656 INFO Response: 201
2024-05-12 10:52:35,666 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,666 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,669 INFO Response: 201
2024-05-12 10:52:35,709 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,710 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,713 INFO Response: 201
2024-05-12 10:52:35,728 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,728 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,731 INFO Response: 201
2024-05-12 10:52:35,740 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,740 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,743 INFO Response: 201
2024-05-12 10:52:35,753 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,754 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,757 INFO Response: 201
2024-05-12 10:52:35,766 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,766 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,770 INFO Response: 201
2024-05-12 10:52:35,781 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,781 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,783 INFO Response: 201
2024-05-12 10:52:35,791 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,791 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,795 INFO Response: 201
2024-05-12 10:52:35,802 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,803 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,806 INFO Response: 201
2024-05-12 10:52:35,813 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,814 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:52:35,817 INFO Response: 201
2024-05-12 10:52:35,827 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,828 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:52:35,832 INFO Response: 201
2024-05-12 10:52:35,844 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,844 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:52:35,847 INFO Response: 201
2024-05-12 10:52:35,859 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,859 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:52:35,862 INFO Response: 201
2024-05-12 10:52:35,876 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,877 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:52:35,881 INFO Response: 201
2024-05-12 10:52:35,890 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,890 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:52:35,893 INFO Response: 201
2024-05-12 10:52:35,901 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,901 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:52:35,905 INFO Response: 201
2024-05-12 10:52:35,912 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,912 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:52:35,914 INFO Response: 201
2024-05-12 10:52:35,922 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,922 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:52:35,925 INFO Response: 201
2024-05-12 10:52:35,932 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,932 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:52:35,935 INFO Response: 201
2024-05-12 10:52:35,943 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,943 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:52:35,946 INFO Response: 201
2024-05-12 10:52:35,955 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,955 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:52:35,960 INFO Response: 201
2024-05-12 10:52:35,969 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,969 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:52:35,973 INFO Response: 201
2024-05-12 10:52:35,983 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,983 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:52:35,988 INFO Response: 201
2024-05-12 10:52:35,996 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:35,996 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:52:35,999 INFO Response: 201
2024-05-12 10:52:36,012 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:36,012 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:52:36,016 INFO Response: 201
2024-05-12 10:52:36,028 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:36,029 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:52:36,032 INFO Response: 201
2024-05-12 10:52:37,066 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:37,066 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:52:37,074 INFO Response: 201
2024-05-12 10:52:37,083 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:37,083 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:52:37,092 INFO Response: 201
2024-05-12 10:52:37,099 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:37,099 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:52:37,106 INFO Response: 201
2024-05-12 10:52:37,113 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:52:37,113 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:52:38,514 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 10:52:38,531 INFO Response: 201
2024-05-12 10:53:11,893 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-12 10:53:12,447 INFO Watching for file changes with StatReloader
2024-05-12 10:53:17,328 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:53:17,328 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:53:17,354 INFO Response: 201
2024-05-12 10:53:17,377 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:53:17,377 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:53:17,412 INFO Response: 201
2024-05-12 10:53:17,469 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:53:17,469 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:53:17,485 INFO Response: 201
2024-05-12 10:53:17,501 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:53:17,501 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:53:19,379 INFO Created new Tenant Tenant2 with domain 1002
2024-05-12 10:53:19,383 INFO Response: 201
2024-05-12 10:53:32,967 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-12 10:53:33,404 INFO Watching for file changes with StatReloader
2024-05-12 10:55:53,833 INFO Watching for file changes with StatReloader
2024-05-12 10:56:00,821 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,821 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:56:00,841 INFO Response: 201
2024-05-12 10:56:00,855 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,855 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:56:00,860 INFO Response: 201
2024-05-12 10:56:00,869 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,870 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:56:00,884 INFO Response: 201
2024-05-12 10:56:00,893 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,893 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:56:00,898 INFO Response: 201
2024-05-12 10:56:00,912 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,913 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:56:00,918 INFO Response: 201
2024-05-12 10:56:00,926 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,926 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:56:00,932 INFO Response: 201
2024-05-12 10:56:00,942 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,942 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:56:00,949 INFO Response: 201
2024-05-12 10:56:00,958 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,958 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:56:00,963 INFO Response: 201
2024-05-12 10:56:00,971 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,972 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:56:00,977 INFO Response: 201
2024-05-12 10:56:00,983 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,984 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:56:00,989 INFO Response: 201
2024-05-12 10:56:00,999 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:00,999 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:56:01,004 INFO Response: 201
2024-05-12 10:56:01,012 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,012 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:56:01,015 INFO Response: 201
2024-05-12 10:56:01,022 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,022 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:56:01,025 INFO Response: 201
2024-05-12 10:56:01,033 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,033 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:56:01,037 INFO Response: 201
2024-05-12 10:56:01,045 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,045 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:56:01,049 INFO Response: 201
2024-05-12 10:56:01,058 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,058 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:56:01,061 INFO Response: 201
2024-05-12 10:56:01,069 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,069 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:56:01,073 INFO Response: 201
2024-05-12 10:56:01,081 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,081 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:56:01,085 INFO Response: 201
2024-05-12 10:56:01,093 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,093 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:56:01,097 INFO Response: 201
2024-05-12 10:56:01,105 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,105 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:56:01,109 INFO Response: 201
2024-05-12 10:56:01,119 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,120 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:56:01,124 INFO Response: 201
2024-05-12 10:56:01,132 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,132 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:56:01,137 INFO Response: 201
2024-05-12 10:56:01,145 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,145 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:56:01,149 INFO Response: 201
2024-05-12 10:56:01,159 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,159 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:56:01,168 INFO Response: 201
2024-05-12 10:56:01,176 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,176 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:56:01,180 INFO Response: 201
2024-05-12 10:56:01,189 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,189 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:56:01,192 INFO Response: 201
2024-05-12 10:56:01,200 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,200 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:56:01,203 INFO Response: 201
2024-05-12 10:56:01,224 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,225 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:56:01,228 INFO Response: 201
2024-05-12 10:56:01,237 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,237 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:56:01,240 INFO Response: 201
2024-05-12 10:56:01,255 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,258 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:56:01,267 INFO Response: 201
2024-05-12 10:56:01,281 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,281 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:56:01,290 INFO Response: 201
2024-05-12 10:56:01,313 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,314 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:56:01,317 INFO Response: 201
2024-05-12 10:56:01,330 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,331 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:56:01,339 INFO Response: 201
2024-05-12 10:56:01,360 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,365 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:56:01,380 INFO Response: 201
2024-05-12 10:56:01,397 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,397 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:56:01,401 INFO Response: 201
2024-05-12 10:56:01,415 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,415 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:56:01,418 INFO Response: 201
2024-05-12 10:56:01,426 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,427 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,432 INFO Response: 201
2024-05-12 10:56:01,452 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,452 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,463 INFO Response: 201
2024-05-12 10:56:01,471 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,471 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,475 INFO Response: 201
2024-05-12 10:56:01,482 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,482 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,485 INFO Response: 201
2024-05-12 10:56:01,503 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,504 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,508 INFO Response: 201
2024-05-12 10:56:01,527 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,527 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,530 INFO Response: 201
2024-05-12 10:56:01,542 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,543 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,547 INFO Response: 201
2024-05-12 10:56:01,559 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,559 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,562 INFO Response: 201
2024-05-12 10:56:01,570 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,570 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,573 INFO Response: 201
2024-05-12 10:56:01,581 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,581 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,588 INFO Response: 201
2024-05-12 10:56:01,599 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,599 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,602 INFO Response: 201
2024-05-12 10:56:01,611 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,611 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,614 INFO Response: 201
2024-05-12 10:56:01,622 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,622 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,626 INFO Response: 201
2024-05-12 10:56:01,639 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,640 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,644 INFO Response: 201
2024-05-12 10:56:01,652 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,652 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,655 INFO Response: 201
2024-05-12 10:56:01,664 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,665 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:56:01,668 INFO Response: 201
2024-05-12 10:56:01,676 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,676 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:56:01,681 INFO Response: 201
2024-05-12 10:56:01,691 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,691 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:56:01,695 INFO Response: 201
2024-05-12 10:56:01,703 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,703 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:56:01,718 INFO Response: 201
2024-05-12 10:56:01,732 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,735 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:56:01,759 INFO Response: 201
2024-05-12 10:56:01,789 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,790 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:56:01,800 INFO Response: 201
2024-05-12 10:56:01,815 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,815 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:56:01,818 INFO Response: 201
2024-05-12 10:56:01,827 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,827 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:56:01,830 INFO Response: 201
2024-05-12 10:56:01,847 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,847 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:56:01,851 INFO Response: 201
2024-05-12 10:56:01,861 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,861 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:56:01,864 INFO Response: 201
2024-05-12 10:56:01,877 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,879 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:56:01,882 INFO Response: 201
2024-05-12 10:56:01,890 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,891 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:56:01,895 INFO Response: 201
2024-05-12 10:56:01,903 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,904 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:56:01,907 INFO Response: 201
2024-05-12 10:56:01,916 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,916 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:56:01,919 INFO Response: 201
2024-05-12 10:56:01,930 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,930 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:56:01,934 INFO Response: 201
2024-05-12 10:56:01,941 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,941 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:56:01,944 INFO Response: 201
2024-05-12 10:56:01,954 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:01,954 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:56:01,957 INFO Response: 201
2024-05-12 10:56:05,030 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:05,031 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:56:05,036 INFO Response: 201
2024-05-12 10:56:05,045 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:05,045 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:56:05,053 INFO Response: 201
2024-05-12 10:56:05,061 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:05,061 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:56:05,067 INFO Response: 201
2024-05-12 10:56:05,077 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:05,077 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:56:06,160 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 10:56:06,167 INFO Response: 201
2024-05-12 10:56:33,840 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:33,840 INFO Request: GET /api/v1/manage/tenants/4/
2024-05-12 10:56:33,842 INFO Response: 404
2024-05-12 10:56:39,071 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:56:39,071 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 10:56:39,085 INFO Response: 200
2024-05-12 10:58:27,130 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:58:27,558 INFO Watching for file changes with StatReloader
2024-05-12 10:58:39,762 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:58:39,762 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:58:39,773 INFO Response: 201
2024-05-12 10:58:39,779 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:58:39,779 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:58:39,784 INFO Response: 201
2024-05-12 10:58:39,790 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:58:39,790 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:58:39,794 INFO Response: 201
2024-05-12 10:58:39,823 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:58:39,823 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:58:40,623 INFO Created new Tenant Tenant2 with domain 1002
2024-05-12 10:58:40,628 INFO Response: 201
2024-05-12 10:59:37,467 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 10:59:37,900 INFO Watching for file changes with StatReloader
2024-05-12 10:59:52,314 INFO Watching for file changes with StatReloader
2024-05-12 10:59:53,308 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,308 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:59:53,327 INFO Response: 201
2024-05-12 10:59:53,338 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,339 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:59:53,344 INFO Response: 201
2024-05-12 10:59:53,352 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,352 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:59:53,357 INFO Response: 201
2024-05-12 10:59:53,372 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,372 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:59:53,378 INFO Response: 201
2024-05-12 10:59:53,387 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,387 INFO Request: POST /api/v1/network/regions/
2024-05-12 10:59:53,392 INFO Response: 201
2024-05-12 10:59:53,400 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,400 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:59:53,404 INFO Response: 201
2024-05-12 10:59:53,412 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,412 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:59:53,424 INFO Response: 201
2024-05-12 10:59:53,450 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,451 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:59:53,461 INFO Response: 201
2024-05-12 10:59:53,468 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,468 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:59:53,476 INFO Response: 201
2024-05-12 10:59:53,492 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,492 INFO Request: POST /api/v1/manage/products/
2024-05-12 10:59:53,497 INFO Response: 201
2024-05-12 10:59:53,506 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,506 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:59:53,510 INFO Response: 201
2024-05-12 10:59:53,519 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,519 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:59:53,529 INFO Response: 201
2024-05-12 10:59:53,538 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,538 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 10:59:53,542 INFO Response: 201
2024-05-12 10:59:53,551 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,551 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:59:53,555 INFO Response: 201
2024-05-12 10:59:53,580 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,580 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:59:53,588 INFO Response: 201
2024-05-12 10:59:53,604 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,604 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 10:59:53,613 INFO Response: 201
2024-05-12 10:59:53,649 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,650 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:59:53,655 INFO Response: 201
2024-05-12 10:59:53,679 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,679 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:59:53,682 INFO Response: 201
2024-05-12 10:59:53,697 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,698 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 10:59:53,711 INFO Response: 201
2024-05-12 10:59:53,721 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,721 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:59:53,725 INFO Response: 201
2024-05-12 10:59:53,732 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,732 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 10:59:53,749 INFO Response: 201
2024-05-12 10:59:53,783 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,784 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:59:53,787 INFO Response: 201
2024-05-12 10:59:53,795 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,795 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:59:53,798 INFO Response: 201
2024-05-12 10:59:53,806 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,806 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 10:59:53,809 INFO Response: 201
2024-05-12 10:59:53,816 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,816 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:59:53,819 INFO Response: 201
2024-05-12 10:59:53,826 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,827 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:59:53,829 INFO Response: 201
2024-05-12 10:59:53,841 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,841 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 10:59:53,844 INFO Response: 201
2024-05-12 10:59:53,853 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,853 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:59:53,861 INFO Response: 201
2024-05-12 10:59:53,870 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,870 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:59:53,873 INFO Response: 201
2024-05-12 10:59:53,881 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,881 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 10:59:53,885 INFO Response: 201
2024-05-12 10:59:53,897 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,897 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:59:53,900 INFO Response: 201
2024-05-12 10:59:53,909 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,909 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 10:59:53,915 INFO Response: 201
2024-05-12 10:59:53,927 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,927 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:59:53,931 INFO Response: 201
2024-05-12 10:59:53,942 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,942 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:59:53,945 INFO Response: 201
2024-05-12 10:59:53,954 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,954 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:59:53,957 INFO Response: 201
2024-05-12 10:59:53,967 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,967 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 10:59:53,970 INFO Response: 201
2024-05-12 10:59:53,979 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,979 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:53,983 INFO Response: 201
2024-05-12 10:59:53,992 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:53,992 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:53,996 INFO Response: 201
2024-05-12 10:59:54,022 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,023 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,026 INFO Response: 201
2024-05-12 10:59:54,045 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,045 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,050 INFO Response: 201
2024-05-12 10:59:54,060 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,062 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,086 INFO Response: 201
2024-05-12 10:59:54,097 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,097 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,115 INFO Response: 201
2024-05-12 10:59:54,122 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,122 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,125 INFO Response: 201
2024-05-12 10:59:54,133 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,133 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,137 INFO Response: 201
2024-05-12 10:59:54,147 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,147 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,154 INFO Response: 201
2024-05-12 10:59:54,165 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,165 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,168 INFO Response: 201
2024-05-12 10:59:54,177 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,177 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,180 INFO Response: 201
2024-05-12 10:59:54,191 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,191 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,194 INFO Response: 201
2024-05-12 10:59:54,201 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,201 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,204 INFO Response: 201
2024-05-12 10:59:54,211 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,212 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,214 INFO Response: 201
2024-05-12 10:59:54,225 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,225 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,228 INFO Response: 201
2024-05-12 10:59:54,237 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,237 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 10:59:54,240 INFO Response: 201
2024-05-12 10:59:54,249 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,249 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:59:54,253 INFO Response: 201
2024-05-12 10:59:54,269 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,270 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:59:54,273 INFO Response: 201
2024-05-12 10:59:54,283 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,283 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 10:59:54,287 INFO Response: 201
2024-05-12 10:59:54,296 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,297 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:59:54,300 INFO Response: 201
2024-05-12 10:59:54,309 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,309 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:59:54,312 INFO Response: 201
2024-05-12 10:59:54,320 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,321 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:59:54,323 INFO Response: 201
2024-05-12 10:59:54,331 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,332 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:59:54,335 INFO Response: 201
2024-05-12 10:59:54,343 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,343 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:59:54,346 INFO Response: 201
2024-05-12 10:59:54,355 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,355 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:59:54,359 INFO Response: 201
2024-05-12 10:59:54,367 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,367 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 10:59:54,371 INFO Response: 201
2024-05-12 10:59:54,380 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,380 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:59:54,384 INFO Response: 201
2024-05-12 10:59:54,393 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,393 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:59:54,396 INFO Response: 201
2024-05-12 10:59:54,406 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,406 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:59:54,410 INFO Response: 201
2024-05-12 10:59:54,418 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,423 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:59:54,426 INFO Response: 201
2024-05-12 10:59:54,449 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,449 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:59:54,455 INFO Response: 201
2024-05-12 10:59:54,464 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:54,464 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 10:59:54,467 INFO Response: 201
2024-05-12 10:59:55,884 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:55,884 INFO Request: POST /api/v1/manage/customers/
2024-05-12 10:59:55,917 INFO Response: 201
2024-05-12 10:59:55,956 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:55,956 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:59:55,965 INFO Response: 201
2024-05-12 10:59:55,973 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:55,973 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 10:59:55,979 INFO Response: 201
2024-05-12 10:59:55,989 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 10:59:55,990 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 10:59:57,359 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 10:59:57,365 INFO Response: 201
2024-05-12 11:00:57,514 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:00:57,889 INFO Watching for file changes with StatReloader
2024-05-12 11:01:05,852 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:01:05,853 INFO Request: POST /api/v1/manage/customers/
2024-05-12 11:01:05,870 INFO Response: 201
2024-05-12 11:01:05,882 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:01:05,882 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:01:05,954 INFO Response: 201
2024-05-12 11:01:05,999 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:01:05,999 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:01:06,005 INFO Response: 201
2024-05-12 11:01:06,023 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:01:06,023 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 11:01:07,764 INFO Created new Tenant Tenant2 with domain 1002
2024-05-12 11:01:07,769 INFO Response: 201
2024-05-12 11:01:51,756 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:01:52,173 INFO Watching for file changes with StatReloader
2024-05-12 11:02:31,893 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:02:32,330 INFO Watching for file changes with StatReloader
2024-05-12 11:02:45,476 INFO Watching for file changes with StatReloader
2024-05-12 11:02:46,689 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,689 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:02:46,734 INFO Response: 201
2024-05-12 11:02:46,747 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,747 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:02:46,774 INFO Response: 201
2024-05-12 11:02:46,793 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,794 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:02:46,825 INFO Response: 201
2024-05-12 11:02:46,842 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,845 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:02:46,852 INFO Response: 201
2024-05-12 11:02:46,860 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,860 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:02:46,866 INFO Response: 201
2024-05-12 11:02:46,874 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,874 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:02:46,880 INFO Response: 201
2024-05-12 11:02:46,888 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,888 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:02:46,894 INFO Response: 201
2024-05-12 11:02:46,901 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,901 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:02:46,906 INFO Response: 201
2024-05-12 11:02:46,914 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,914 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:02:46,918 INFO Response: 201
2024-05-12 11:02:46,927 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,927 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:02:46,933 INFO Response: 201
2024-05-12 11:02:46,942 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,942 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:02:46,947 INFO Response: 201
2024-05-12 11:02:46,955 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,955 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:02:46,959 INFO Response: 201
2024-05-12 11:02:46,967 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,967 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:02:46,970 INFO Response: 201
2024-05-12 11:02:46,978 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,979 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:02:46,982 INFO Response: 201
2024-05-12 11:02:46,992 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:46,992 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:02:46,996 INFO Response: 201
2024-05-12 11:02:47,004 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,004 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:02:47,007 INFO Response: 201
2024-05-12 11:02:47,015 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,016 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:02:47,019 INFO Response: 201
2024-05-12 11:02:47,028 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,029 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:02:47,033 INFO Response: 201
2024-05-12 11:02:47,042 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,042 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:02:47,045 INFO Response: 201
2024-05-12 11:02:47,053 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,054 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 11:02:47,058 INFO Response: 201
2024-05-12 11:02:47,067 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,067 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 11:02:47,070 INFO Response: 201
2024-05-12 11:02:47,079 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,079 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:02:47,083 INFO Response: 201
2024-05-12 11:02:47,092 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,093 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:02:47,097 INFO Response: 201
2024-05-12 11:02:47,105 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,105 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:02:47,131 INFO Response: 201
2024-05-12 11:02:47,147 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,148 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:02:47,154 INFO Response: 201
2024-05-12 11:02:47,162 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,163 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:02:47,166 INFO Response: 201
2024-05-12 11:02:47,173 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,174 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:02:47,176 INFO Response: 201
2024-05-12 11:02:47,185 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,185 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:02:47,189 INFO Response: 201
2024-05-12 11:02:47,197 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,197 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:02:47,200 INFO Response: 201
2024-05-12 11:02:47,208 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,208 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:02:47,212 INFO Response: 201
2024-05-12 11:02:47,220 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,220 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 11:02:47,224 INFO Response: 201
2024-05-12 11:02:47,235 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,235 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 11:02:47,238 INFO Response: 201
2024-05-12 11:02:47,245 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,246 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:02:47,249 INFO Response: 201
2024-05-12 11:02:47,257 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,257 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:02:47,260 INFO Response: 201
2024-05-12 11:02:47,276 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,276 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:02:47,280 INFO Response: 201
2024-05-12 11:02:47,288 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,288 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:02:47,293 INFO Response: 201
2024-05-12 11:02:47,305 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,305 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,310 INFO Response: 201
2024-05-12 11:02:47,318 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,319 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,322 INFO Response: 201
2024-05-12 11:02:47,329 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,329 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,332 INFO Response: 201
2024-05-12 11:02:47,339 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,340 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,342 INFO Response: 201
2024-05-12 11:02:47,352 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,353 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,356 INFO Response: 201
2024-05-12 11:02:47,364 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,364 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,368 INFO Response: 201
2024-05-12 11:02:47,375 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,375 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,378 INFO Response: 201
2024-05-12 11:02:47,382 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,382 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,385 INFO Response: 201
2024-05-12 11:02:47,393 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,393 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,397 INFO Response: 201
2024-05-12 11:02:47,404 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,404 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,408 INFO Response: 201
2024-05-12 11:02:47,415 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,415 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,419 INFO Response: 201
2024-05-12 11:02:47,426 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,426 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,430 INFO Response: 201
2024-05-12 11:02:47,437 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,438 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,441 INFO Response: 201
2024-05-12 11:02:47,449 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,449 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,452 INFO Response: 201
2024-05-12 11:02:47,460 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,460 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,463 INFO Response: 201
2024-05-12 11:02:47,471 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,471 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:02:47,475 INFO Response: 201
2024-05-12 11:02:47,482 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,482 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:02:47,486 INFO Response: 201
2024-05-12 11:02:47,495 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,495 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:02:47,498 INFO Response: 201
2024-05-12 11:02:47,505 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,506 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:02:47,508 INFO Response: 201
2024-05-12 11:02:47,517 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,517 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:02:47,520 INFO Response: 201
2024-05-12 11:02:47,529 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,529 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:02:47,532 INFO Response: 201
2024-05-12 11:02:47,540 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,540 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:02:47,543 INFO Response: 201
2024-05-12 11:02:47,551 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,552 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:02:47,555 INFO Response: 201
2024-05-12 11:02:47,563 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,563 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:02:47,565 INFO Response: 201
2024-05-12 11:02:47,574 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,575 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:02:47,578 INFO Response: 201
2024-05-12 11:02:47,588 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,588 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:02:47,592 INFO Response: 201
2024-05-12 11:02:47,599 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,600 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:02:47,603 INFO Response: 201
2024-05-12 11:02:47,611 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,611 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:02:47,614 INFO Response: 201
2024-05-12 11:02:47,622 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,622 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:02:47,626 INFO Response: 201
2024-05-12 11:02:47,634 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,634 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:02:47,640 INFO Response: 201
2024-05-12 11:02:47,648 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,648 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:02:47,651 INFO Response: 201
2024-05-12 11:02:47,661 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:47,663 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:02:47,666 INFO Response: 201
2024-05-12 11:02:49,498 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:49,498 INFO Request: POST /api/v1/manage/customers/
2024-05-12 11:02:49,514 INFO Response: 201
2024-05-12 11:02:49,525 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:49,525 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:02:49,568 INFO Response: 201
2024-05-12 11:02:49,577 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:49,577 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:02:49,584 INFO Response: 201
2024-05-12 11:02:49,591 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:49,592 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 11:02:51,169 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 11:02:51,176 INFO Response: 201
2024-05-12 11:02:55,308 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:02:55,308 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:02:55,318 INFO Response: 200
2024-05-12 11:03:07,573 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:03:07,573 INFO Request: GET /api/v1/manage/tenants/?name=Tenant1/
2024-05-12 11:03:07,590 INFO Response: 200
2024-05-12 11:03:07,598 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:03:07,598 INFO Request: GET /api/v1/manage/customers/?name=CustomerA&is_active=True/
2024-05-12 11:03:07,602 INFO Response: 200
2024-05-12 11:03:21,647 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:03:21,647 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 11:03:21,666 INFO Response: 200
2024-05-12 11:03:56,409 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:03:56,410 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:03:56,413 ERROR Attempt to delete tenant that is enabled
2024-05-12 11:03:56,413 ERROR Failed to delete tenant Tenant1: Cannot delete tenant because it is currently enabled.
2024-05-12 11:03:56,413 INFO Response: 400
2024-05-12 11:04:42,590 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:04:42,590 INFO Request: PUT /api/v1/manage/tenants/1/
2024-05-12 11:04:42,592 INFO Response: 400
2024-05-12 11:04:50,707 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:04:50,707 INFO Request: PATCH /api/v1/manage/tenants/1/
2024-05-12 11:04:50,715 INFO Response: 200
2024-05-12 11:04:55,049 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:04:55,049 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:04:55,060 ERROR Attempt to delete tenant that is enabled
2024-05-12 11:04:55,061 ERROR Failed to delete tenant Tenant1: Cannot delete tenant because it is currently enabled.
2024-05-12 11:04:55,061 INFO Response: 400
2024-05-12 11:05:04,357 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:05:04,357 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:05:04,363 INFO Response: 200
2024-05-12 11:05:14,678 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:05:14,678 INFO Request: PATCH /api/v1/manage/tenants/1/
2024-05-12 11:05:14,692 INFO Response: 200
2024-05-12 11:05:22,693 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:05:22,693 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 11:05:22,701 INFO Response: 200
2024-05-12 11:05:25,189 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:05:25,189 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:05:25,194 INFO Deleted tenant Tenant1 and associated data.
2024-05-12 11:05:25,194 INFO Response: 204
2024-05-12 11:05:34,168 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:05:34,168 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:05:34,177 INFO Response: 200
2024-05-12 11:05:50,691 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:05:51,034 INFO Watching for file changes with StatReloader
2024-05-12 11:06:01,242 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:06:01,242 INFO Request: GET /api/v1/manage/customers/
2024-05-12 11:06:01,253 INFO Response: 200
2024-05-12 11:06:09,328 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:06:09,328 INFO Request: GET /api/v1/manage/customers/1/
2024-05-12 11:06:09,331 INFO Response: 200
2024-05-12 11:06:26,434 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:06:26,434 INFO Request: DELETE /api/v1/manage/customers/1/
2024-05-12 11:06:26,445 INFO Response: 204
2024-05-12 11:08:29,585 INFO Watching for file changes with StatReloader
2024-05-12 11:08:44,467 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,467 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:08:44,485 INFO Response: 201
2024-05-12 11:08:44,495 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,495 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:08:44,500 INFO Response: 201
2024-05-12 11:08:44,516 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,517 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:08:44,522 INFO Response: 201
2024-05-12 11:08:44,530 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,530 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:08:44,535 INFO Response: 201
2024-05-12 11:08:44,548 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,548 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:08:44,554 INFO Response: 201
2024-05-12 11:08:44,564 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,565 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:08:44,571 INFO Response: 201
2024-05-12 11:08:44,580 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,580 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:08:44,586 INFO Response: 201
2024-05-12 11:08:44,593 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,593 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:08:44,598 INFO Response: 201
2024-05-12 11:08:44,612 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,612 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:08:44,620 INFO Response: 201
2024-05-12 11:08:44,629 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,629 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:08:44,634 INFO Response: 201
2024-05-12 11:08:44,642 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,642 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:08:44,646 INFO Response: 201
2024-05-12 11:08:44,654 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,655 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:08:44,657 INFO Response: 201
2024-05-12 11:08:44,672 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,672 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:08:44,678 INFO Response: 201
2024-05-12 11:08:44,686 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,686 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:08:44,690 INFO Response: 201
2024-05-12 11:08:44,697 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,697 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:08:44,700 INFO Response: 201
2024-05-12 11:08:44,708 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,708 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:08:44,711 INFO Response: 201
2024-05-12 11:08:44,718 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,719 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:08:44,722 INFO Response: 201
2024-05-12 11:08:44,731 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,731 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:08:44,735 INFO Response: 201
2024-05-12 11:08:44,743 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,744 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:08:44,747 INFO Response: 201
2024-05-12 11:08:44,756 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,756 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 11:08:44,760 INFO Response: 201
2024-05-12 11:08:44,769 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,769 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 11:08:44,772 INFO Response: 201
2024-05-12 11:08:44,780 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,780 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:08:44,784 INFO Response: 201
2024-05-12 11:08:44,792 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,792 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:08:44,795 INFO Response: 201
2024-05-12 11:08:44,803 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,803 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:08:44,807 INFO Response: 201
2024-05-12 11:08:44,815 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,815 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:08:44,818 INFO Response: 201
2024-05-12 11:08:44,827 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,828 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:08:44,831 INFO Response: 201
2024-05-12 11:08:44,906 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,906 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:08:44,911 INFO Response: 201
2024-05-12 11:08:44,919 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,919 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:08:44,923 INFO Response: 201
2024-05-12 11:08:44,961 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,962 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:08:44,965 INFO Response: 201
2024-05-12 11:08:44,975 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,975 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:08:44,979 INFO Response: 201
2024-05-12 11:08:44,986 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,986 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 11:08:44,990 INFO Response: 201
2024-05-12 11:08:44,997 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:44,997 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 11:08:45,000 INFO Response: 201
2024-05-12 11:08:45,008 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,009 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:08:45,012 INFO Response: 201
2024-05-12 11:08:45,019 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,019 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:08:45,023 INFO Response: 201
2024-05-12 11:08:45,031 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,031 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:08:45,034 INFO Response: 201
2024-05-12 11:08:45,045 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,045 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:08:45,049 INFO Response: 201
2024-05-12 11:08:45,060 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,061 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,064 INFO Response: 201
2024-05-12 11:08:45,072 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,072 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,075 INFO Response: 201
2024-05-12 11:08:45,085 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,085 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,089 INFO Response: 201
2024-05-12 11:08:45,103 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,103 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,108 INFO Response: 201
2024-05-12 11:08:45,118 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,118 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,122 INFO Response: 201
2024-05-12 11:08:45,154 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,155 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,166 INFO Response: 201
2024-05-12 11:08:45,182 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,182 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,187 INFO Response: 201
2024-05-12 11:08:45,214 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,214 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,220 INFO Response: 201
2024-05-12 11:08:45,229 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,230 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,233 INFO Response: 201
2024-05-12 11:08:45,241 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,241 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,244 INFO Response: 201
2024-05-12 11:08:45,252 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,252 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,254 INFO Response: 201
2024-05-12 11:08:45,262 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,262 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,265 INFO Response: 201
2024-05-12 11:08:45,272 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,273 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,275 INFO Response: 201
2024-05-12 11:08:45,283 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,283 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,285 INFO Response: 201
2024-05-12 11:08:45,293 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,293 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,296 INFO Response: 201
2024-05-12 11:08:45,304 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,305 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:08:45,307 INFO Response: 201
2024-05-12 11:08:45,315 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,315 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:08:45,323 INFO Response: 201
2024-05-12 11:08:45,332 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,332 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:08:45,336 INFO Response: 201
2024-05-12 11:08:45,345 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,345 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:08:45,348 INFO Response: 201
2024-05-12 11:08:45,356 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,356 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:08:45,360 INFO Response: 201
2024-05-12 11:08:45,370 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,370 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:08:45,374 INFO Response: 201
2024-05-12 11:08:45,382 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,383 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:08:45,386 INFO Response: 201
2024-05-12 11:08:45,395 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,395 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:08:45,400 INFO Response: 201
2024-05-12 11:08:45,412 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,413 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:08:45,416 INFO Response: 201
2024-05-12 11:08:45,424 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,424 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:08:45,428 INFO Response: 201
2024-05-12 11:08:45,442 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,442 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:08:45,447 INFO Response: 201
2024-05-12 11:08:45,463 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,463 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:08:45,478 INFO Response: 201
2024-05-12 11:08:45,490 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,490 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:08:45,494 INFO Response: 201
2024-05-12 11:08:45,502 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,502 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:08:45,505 INFO Response: 201
2024-05-12 11:08:45,511 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,511 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:08:45,514 INFO Response: 201
2024-05-12 11:08:45,520 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,521 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:08:45,523 INFO Response: 201
2024-05-12 11:08:45,530 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:45,530 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:08:45,532 INFO Response: 201
2024-05-12 11:08:46,398 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:46,398 INFO Request: POST /api/v1/manage/customers/
2024-05-12 11:08:46,403 INFO Response: 201
2024-05-12 11:08:46,421 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:46,421 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:08:46,435 INFO Response: 201
2024-05-12 11:08:46,443 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:46,443 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:08:46,466 INFO Response: 201
2024-05-12 11:08:46,475 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:46,475 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 11:08:47,746 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 11:08:47,759 INFO Response: 201
2024-05-12 11:08:53,680 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:08:53,680 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:08:53,690 INFO Response: 200
2024-05-12 11:09:02,015 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:09:02,015 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 11:09:02,027 INFO Response: 200
2024-05-12 11:09:11,591 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:09:11,591 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:09:11,598 INFO Deleted tenant Tenant1 and associated data.
2024-05-12 11:09:11,599 INFO Response: 204
2024-05-12 11:09:18,196 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:09:18,197 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 11:09:18,217 INFO Response: 200
2024-05-12 11:23:40,934 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-12 11:23:41,387 INFO Watching for file changes with StatReloader
2024-05-12 11:24:24,998 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:24:25,339 INFO Watching for file changes with StatReloader
2024-05-12 11:24:39,831 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:24:40,244 INFO Watching for file changes with StatReloader
2024-05-12 11:24:53,603 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:24:54,102 INFO Watching for file changes with StatReloader
2024-05-12 11:28:11,961 INFO Watching for file changes with StatReloader
2024-05-12 11:28:13,035 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:28:13,035 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:28:17,724 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:28:17,724 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:28:22,360 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:28:22,361 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:28:27,084 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:28:27,085 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:28:31,667 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:28:31,667 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:30:38,370 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,370 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:30:38,420 INFO Response: 201
2024-05-12 11:30:38,432 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,433 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:30:38,471 INFO Response: 201
2024-05-12 11:30:38,483 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,483 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:30:38,495 INFO Response: 201
2024-05-12 11:30:38,499 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,499 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:30:38,503 INFO Response: 201
2024-05-12 11:30:38,508 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,508 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:30:38,511 INFO Response: 201
2024-05-12 11:30:38,516 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,516 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:30:38,520 INFO Response: 201
2024-05-12 11:30:38,559 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,563 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:30:38,584 INFO Response: 201
2024-05-12 11:30:38,589 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,589 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:30:38,593 INFO Response: 201
2024-05-12 11:30:38,597 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,598 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:30:38,601 INFO Response: 201
2024-05-12 11:30:38,606 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,606 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:30:38,610 INFO Response: 201
2024-05-12 11:30:38,615 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,615 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:30:38,618 INFO Response: 201
2024-05-12 11:30:38,623 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,623 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:30:38,625 INFO Response: 201
2024-05-12 11:30:38,630 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,630 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:30:38,632 INFO Response: 201
2024-05-12 11:30:38,637 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,637 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:30:38,639 INFO Response: 201
2024-05-12 11:30:38,644 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,644 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:30:38,646 INFO Response: 201
2024-05-12 11:30:38,651 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,651 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:30:38,653 INFO Response: 201
2024-05-12 11:30:38,657 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,657 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:30:38,660 INFO Response: 201
2024-05-12 11:30:38,664 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,664 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:30:38,666 INFO Response: 201
2024-05-12 11:30:38,670 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,670 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:30:38,672 INFO Response: 201
2024-05-12 11:30:38,723 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,723 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 11:30:38,735 INFO Response: 201
2024-05-12 11:30:38,740 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,740 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 11:30:38,742 INFO Response: 201
2024-05-12 11:30:38,746 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,746 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:30:38,748 INFO Response: 201
2024-05-12 11:30:38,753 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,753 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:30:38,767 INFO Response: 201
2024-05-12 11:30:38,852 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,853 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:30:38,859 INFO Response: 201
2024-05-12 11:30:38,869 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,869 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:30:38,873 INFO Response: 201
2024-05-12 11:30:38,881 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,881 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:30:38,884 INFO Response: 201
2024-05-12 11:30:38,892 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,892 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:30:38,895 INFO Response: 201
2024-05-12 11:30:38,902 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,903 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:30:38,906 INFO Response: 201
2024-05-12 11:30:38,913 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,913 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:30:38,915 INFO Response: 201
2024-05-12 11:30:38,920 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,920 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:30:38,922 INFO Response: 201
2024-05-12 11:30:38,927 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,927 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 11:30:38,930 INFO Response: 201
2024-05-12 11:30:38,934 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,935 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 11:30:38,937 INFO Response: 201
2024-05-12 11:30:38,942 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,942 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:30:38,944 INFO Response: 201
2024-05-12 11:30:38,949 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,949 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:30:38,951 INFO Response: 201
2024-05-12 11:30:38,955 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,955 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:30:38,957 INFO Response: 201
2024-05-12 11:30:38,962 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,962 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:30:38,964 INFO Response: 201
2024-05-12 11:30:38,969 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,969 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:38,972 INFO Response: 201
2024-05-12 11:30:38,978 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,979 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:38,981 INFO Response: 201
2024-05-12 11:30:38,985 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,986 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:38,987 INFO Response: 201
2024-05-12 11:30:38,992 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:38,992 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:38,995 INFO Response: 201
2024-05-12 11:30:39,000 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,000 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,002 INFO Response: 201
2024-05-12 11:30:39,007 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,007 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,009 INFO Response: 201
2024-05-12 11:30:39,014 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,014 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,016 INFO Response: 201
2024-05-12 11:30:39,021 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,021 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,023 INFO Response: 201
2024-05-12 11:30:39,028 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,028 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,030 INFO Response: 201
2024-05-12 11:30:39,035 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,035 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,037 INFO Response: 201
2024-05-12 11:30:39,041 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,041 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,043 INFO Response: 201
2024-05-12 11:30:39,048 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,048 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,050 INFO Response: 201
2024-05-12 11:30:39,054 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,055 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,056 INFO Response: 201
2024-05-12 11:30:39,062 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,062 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,064 INFO Response: 201
2024-05-12 11:30:39,068 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,068 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,070 INFO Response: 201
2024-05-12 11:30:39,075 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,075 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:30:39,078 INFO Response: 201
2024-05-12 11:30:39,083 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,083 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:30:39,086 INFO Response: 201
2024-05-12 11:30:39,091 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,091 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:30:39,093 INFO Response: 201
2024-05-12 11:30:39,099 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,099 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:30:39,124 INFO Response: 201
2024-05-12 11:30:39,134 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,134 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:30:39,138 INFO Response: 201
2024-05-12 11:30:39,145 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,145 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:30:39,147 INFO Response: 201
2024-05-12 11:30:39,152 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,152 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:30:39,156 INFO Response: 201
2024-05-12 11:30:39,161 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,161 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:30:39,163 INFO Response: 201
2024-05-12 11:30:39,167 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,167 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:30:39,169 INFO Response: 201
2024-05-12 11:30:39,173 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,174 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:30:39,176 INFO Response: 201
2024-05-12 11:30:39,181 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,181 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:30:39,183 INFO Response: 201
2024-05-12 11:30:39,187 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,187 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:30:39,189 INFO Response: 201
2024-05-12 11:30:39,194 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,194 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:30:39,196 INFO Response: 201
2024-05-12 11:30:39,200 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,200 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:30:39,202 INFO Response: 201
2024-05-12 11:30:39,206 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,206 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:30:39,209 INFO Response: 201
2024-05-12 11:30:39,216 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,216 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:30:39,218 INFO Response: 201
2024-05-12 11:30:39,222 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:39,222 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:30:39,224 INFO Response: 201
2024-05-12 11:30:42,342 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:42,342 INFO Request: POST /api/v1/manage/customers/
2024-05-12 11:30:42,346 INFO Response: 201
2024-05-12 11:30:42,358 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:42,359 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:30:42,369 INFO Response: 201
2024-05-12 11:30:42,550 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:42,550 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:30:42,561 INFO Response: 201
2024-05-12 11:30:42,569 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:42,569 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 11:30:43,806 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 11:30:43,810 INFO Response: 201
2024-05-12 11:30:49,732 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:49,733 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:30:49,739 INFO Response: 200
2024-05-12 11:30:54,721 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:54,722 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 11:30:54,731 INFO Response: 200
2024-05-12 11:30:58,544 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:30:58,544 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:30:58,552 INFO Deleted tenant Tenant1 and associated data.
2024-05-12 11:30:58,552 INFO Response: 204
2024-05-12 11:31:02,356 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:31:02,356 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:31:02,363 INFO Response: 200
2024-05-12 11:36:14,078 INFO Watching for file changes with StatReloader
2024-05-12 11:36:16,546 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:16,546 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:36:21,941 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:21,941 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:36:55,949 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:55,949 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:36:55,965 INFO Response: 201
2024-05-12 11:36:55,979 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:55,979 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:36:55,995 INFO Response: 201
2024-05-12 11:36:56,016 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,016 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:36:56,022 INFO Response: 201
2024-05-12 11:36:56,033 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,033 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:36:56,038 INFO Response: 201
2024-05-12 11:36:56,046 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,046 INFO Request: POST /api/v1/network/regions/
2024-05-12 11:36:56,054 INFO Response: 201
2024-05-12 11:36:56,062 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,062 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:36:56,069 INFO Response: 201
2024-05-12 11:36:56,079 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,079 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:36:56,085 INFO Response: 201
2024-05-12 11:36:56,094 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,094 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:36:56,099 INFO Response: 201
2024-05-12 11:36:56,106 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,107 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:36:56,112 INFO Response: 201
2024-05-12 11:36:56,120 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,120 INFO Request: POST /api/v1/manage/products/
2024-05-12 11:36:56,125 INFO Response: 201
2024-05-12 11:36:56,136 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,136 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:36:56,141 INFO Response: 201
2024-05-12 11:36:56,151 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,151 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:36:56,155 INFO Response: 201
2024-05-12 11:36:56,173 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,174 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-12 11:36:56,192 INFO Response: 201
2024-05-12 11:36:56,201 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,201 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:36:56,209 INFO Response: 201
2024-05-12 11:36:56,216 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,216 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:36:56,220 INFO Response: 201
2024-05-12 11:36:56,230 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,230 INFO Request: POST /api/v1/support/ike/hash/
2024-05-12 11:36:56,233 INFO Response: 201
2024-05-12 11:36:56,241 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,242 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:36:56,246 INFO Response: 201
2024-05-12 11:36:56,255 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,255 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:36:56,258 INFO Response: 201
2024-05-12 11:36:56,267 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,267 INFO Request: POST /api/v1/support/ike/dh/
2024-05-12 11:36:56,270 INFO Response: 201
2024-05-12 11:36:56,278 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,278 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 11:36:56,282 INFO Response: 201
2024-05-12 11:36:56,289 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,290 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-12 11:36:56,293 INFO Response: 201
2024-05-12 11:36:56,301 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,301 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:36:56,308 INFO Response: 201
2024-05-12 11:36:56,316 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,316 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:36:56,323 INFO Response: 201
2024-05-12 11:36:56,330 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,330 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-12 11:36:56,333 INFO Response: 201
2024-05-12 11:36:56,341 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,341 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:36:56,345 INFO Response: 201
2024-05-12 11:36:56,355 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,355 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:36:56,359 INFO Response: 201
2024-05-12 11:36:56,368 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,368 INFO Request: POST /api/v1/support/esp/hash/
2024-05-12 11:36:56,373 INFO Response: 201
2024-05-12 11:36:56,380 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,380 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:36:56,384 INFO Response: 201
2024-05-12 11:36:56,391 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,391 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:36:56,394 INFO Response: 201
2024-05-12 11:36:56,401 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,401 INFO Request: POST /api/v1/support/esp/dh/
2024-05-12 11:36:56,404 INFO Response: 201
2024-05-12 11:36:56,411 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,412 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 11:36:56,415 INFO Response: 201
2024-05-12 11:36:56,427 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,427 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-12 11:36:56,438 INFO Response: 201
2024-05-12 11:36:56,447 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,447 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:36:56,451 INFO Response: 201
2024-05-12 11:36:56,459 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,459 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:36:56,462 INFO Response: 201
2024-05-12 11:36:56,470 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,470 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:36:56,476 INFO Response: 201
2024-05-12 11:36:56,499 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,505 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-12 11:36:56,531 INFO Response: 201
2024-05-12 11:36:56,543 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,543 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,548 INFO Response: 201
2024-05-12 11:36:56,556 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,556 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,559 INFO Response: 201
2024-05-12 11:36:56,575 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,575 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,583 INFO Response: 201
2024-05-12 11:36:56,592 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,592 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,595 INFO Response: 201
2024-05-12 11:36:56,603 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,603 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,607 INFO Response: 201
2024-05-12 11:36:56,614 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,614 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,619 INFO Response: 201
2024-05-12 11:36:56,626 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,626 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,629 INFO Response: 201
2024-05-12 11:36:56,636 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,636 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,641 INFO Response: 201
2024-05-12 11:36:56,652 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,652 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,655 INFO Response: 201
2024-05-12 11:36:56,663 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,663 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,666 INFO Response: 201
2024-05-12 11:36:56,674 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,674 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,677 INFO Response: 201
2024-05-12 11:36:56,686 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,686 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,689 INFO Response: 201
2024-05-12 11:36:56,699 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,699 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,702 INFO Response: 201
2024-05-12 11:36:56,711 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,712 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,715 INFO Response: 201
2024-05-12 11:36:56,724 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,724 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,728 INFO Response: 201
2024-05-12 11:36:56,736 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,737 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-12 11:36:56,740 INFO Response: 201
2024-05-12 11:36:56,750 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,750 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:36:56,755 INFO Response: 201
2024-05-12 11:36:56,764 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,764 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:36:56,767 INFO Response: 201
2024-05-12 11:36:56,776 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,776 INFO Request: POST /api/v1/support/devices/models/
2024-05-12 11:36:56,779 INFO Response: 201
2024-05-12 11:36:56,788 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,788 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:36:56,792 INFO Response: 201
2024-05-12 11:36:56,799 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,799 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:36:56,802 INFO Response: 201
2024-05-12 11:36:56,811 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,811 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:36:56,814 INFO Response: 201
2024-05-12 11:36:56,824 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,825 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:36:56,828 INFO Response: 201
2024-05-12 11:36:56,837 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,837 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:36:56,840 INFO Response: 201
2024-05-12 11:36:56,849 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,849 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:36:56,852 INFO Response: 201
2024-05-12 11:36:56,860 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,861 INFO Request: POST /api/v1/support/vrf/role/
2024-05-12 11:36:56,864 INFO Response: 201
2024-05-12 11:36:56,873 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,873 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:36:56,877 INFO Response: 201
2024-05-12 11:36:56,885 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,885 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:36:56,888 INFO Response: 201
2024-05-12 11:36:56,899 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,899 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:36:56,903 INFO Response: 201
2024-05-12 11:36:56,910 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,910 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:36:56,914 INFO Response: 201
2024-05-12 11:36:56,929 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,929 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:36:56,933 INFO Response: 201
2024-05-12 11:36:56,944 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:56,945 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-12 11:36:57,003 INFO Response: 201
2024-05-12 11:36:58,791 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:58,791 INFO Request: POST /api/v1/manage/customers/
2024-05-12 11:36:58,804 INFO Response: 201
2024-05-12 11:36:58,815 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:58,815 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:36:58,823 INFO Response: 201
2024-05-12 11:36:58,840 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:58,840 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:36:58,851 INFO Response: 201
2024-05-12 11:36:58,867 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:36:58,867 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 11:37:00,131 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 11:37:00,138 INFO Response: 201
2024-05-12 11:37:02,931 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:37:02,931 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:37:02,943 INFO Response: 200
2024-05-12 11:37:06,900 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:37:06,900 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 11:37:06,914 INFO Response: 200
2024-05-12 11:37:10,016 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:37:10,017 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:37:10,026 INFO Deleted tenant Tenant1 and associated data.
2024-05-12 11:37:10,027 INFO Response: 204
2024-05-12 11:37:12,895 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:37:12,895 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:37:12,905 INFO Response: 200
2024-05-12 11:43:45,519 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:43:46,083 INFO Watching for file changes with StatReloader
2024-05-12 11:45:13,593 INFO Watching for file changes with StatReloader
2024-05-12 11:45:15,283 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:15,283 INFO Request: POST /api/v1/manage/customers/
2024-05-12 11:45:15,303 INFO Response: 201
2024-05-12 11:45:15,312 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:15,312 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:45:15,323 INFO Response: 201
2024-05-12 11:45:15,332 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:15,332 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:45:15,338 INFO Response: 201
2024-05-12 11:45:15,347 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:15,347 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 11:45:16,656 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 11:45:16,662 INFO Response: 201
2024-05-12 11:45:22,792 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:22,792 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:45:22,804 INFO Response: 200
2024-05-12 11:45:24,705 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:24,705 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 11:45:24,718 INFO Response: 200
2024-05-12 11:45:27,901 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:27,901 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:45:27,915 INFO Deleted tenant Tenant1 and associated data.
2024-05-12 11:45:27,916 INFO Response: 204
2024-05-12 11:45:30,442 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:30,442 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 11:45:30,461 INFO Response: 200
2024-05-12 11:45:32,183 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:45:32,186 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:45:32,196 INFO Response: 200
2024-05-12 11:49:34,669 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:49:35,207 INFO Watching for file changes with StatReloader
2024-05-12 11:50:18,807 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 11:50:19,191 INFO Watching for file changes with StatReloader
2024-05-12 11:50:33,138 INFO Watching for file changes with StatReloader
2024-05-12 11:50:38,329 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:50:38,329 INFO Request: POST /api/v1/manage/customers/
2024-05-12 11:50:38,351 INFO Response: 201
2024-05-12 11:50:38,363 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:50:38,363 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:50:38,382 INFO Response: 201
2024-05-12 11:50:38,395 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:50:38,395 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:50:38,402 INFO Response: 201
2024-05-12 11:50:38,410 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:50:38,410 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 11:50:39,693 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 11:50:39,703 INFO Response: 201
2024-05-12 11:50:42,233 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:50:42,233 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:50:42,242 INFO Response: 200
2024-05-12 11:50:44,191 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:50:44,191 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 11:50:44,207 INFO Response: 200
2024-05-12 11:50:47,239 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:50:47,239 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:50:47,252 INFO Hard deleted tenant Tenant1 and its schema.
2024-05-12 11:50:47,253 INFO Response: 204
2024-05-12 11:50:49,780 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:50:49,781 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:50:49,790 INFO Response: 200
2024-05-12 11:54:38,180 INFO /root/delta_api/delta_sase/delta_sase/settings.py changed, reloading.
2024-05-12 11:55:07,677 INFO Watching for file changes with StatReloader
2024-05-12 11:55:13,510 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:13,510 INFO Request: POST /api/v1/manage/customers/
2024-05-12 11:55:13,530 INFO Response: 201
2024-05-12 11:55:13,538 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:13,539 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:55:13,547 INFO Response: 201
2024-05-12 11:55:13,566 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:13,566 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 11:55:13,573 INFO Response: 201
2024-05-12 11:55:13,582 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:13,583 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 11:55:14,853 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 11:55:14,860 INFO Response: 201
2024-05-12 11:55:39,129 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:39,129 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:55:39,136 INFO Response: 200
2024-05-12 11:55:41,180 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:41,180 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:55:41,186 INFO Response: 200
2024-05-12 11:55:43,201 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:43,202 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:55:43,216 ERROR Attempt to delete tenant that is enabled
2024-05-12 11:55:43,216 ERROR Failed to delete tenant Tenant1: Cannot delete tenant because it is currently enabled.
2024-05-12 11:55:43,217 INFO Response: 400
2024-05-12 11:55:56,304 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:56,304 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 11:55:56,314 INFO Response: 200
2024-05-12 11:55:59,500 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:55:59,500 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:55:59,507 INFO Response: 200
2024-05-12 11:56:06,474 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:56:06,474 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 11:56:06,480 INFO Hard deleted tenant Tenant1 and its schema.
2024-05-12 11:56:06,481 INFO Response: 204
2024-05-12 11:56:10,516 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 11:56:10,516 INFO Request: GET /api/v1/manage/tenants/3/
2024-05-12 11:56:10,576 INFO Response: 200
2024-05-12 12:00:34,726 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:00:34,727 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:00:34,732 INFO Response: 201
2024-05-12 12:00:34,761 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:00:34,762 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:00:34,768 INFO Response: 201
2024-05-12 12:00:34,824 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:00:34,824 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:00:34,910 INFO Response: 201
2024-05-12 12:00:34,919 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:00:34,919 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:00:36,380 INFO Created new Tenant Tenant2 with domain 1002
2024-05-12 12:00:36,386 INFO Response: 201
2024-05-12 12:00:41,545 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:00:41,546 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:00:41,559 INFO Response: 200
2024-05-12 12:01:22,974 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:01:22,974 INFO Request: GET /api/v1/manage/tenants/4/
2024-05-12 12:01:22,981 INFO Response: 200
2024-05-12 12:01:28,301 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:01:28,301 INFO Request: PATCH /api/v1/manage/tenants/4/
2024-05-12 12:01:28,309 INFO Response: 200
2024-05-12 12:01:32,604 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:01:32,604 INFO Request: DELETE /api/v1/manage/tenants/4/
2024-05-12 12:01:32,613 INFO Hard deleted tenant Tenant2 and its schema.
2024-05-12 12:01:32,615 INFO Response: 204
2024-05-12 12:01:55,185 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:01:55,185 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:01:55,204 INFO Response: 200
2024-05-12 12:03:34,710 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-12 12:03:35,160 INFO Watching for file changes with StatReloader
2024-05-12 12:03:42,188 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:03:42,188 INFO Request: DELETE /api/v1/manage/tenants/4/
2024-05-12 12:03:42,201 INFO Attempting to delete tenant: Tenant2
2024-05-12 12:03:42,210 ERROR Failed to delete tenant Tenant2: duplicate key value violates unique constraint "tenants_app_deletedtenant_schema_name_key"
DETAIL:  Key (schema_name)=(Tenant_1002) already exists.

2024-05-12 12:03:42,211 INFO Response: 400
2024-05-12 12:05:23,368 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 12:05:23,645 INFO Watching for file changes with StatReloader
2024-05-12 12:06:41,465 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 12:06:42,002 INFO Watching for file changes with StatReloader
2024-05-12 12:06:57,106 INFO Watching for file changes with StatReloader
2024-05-12 12:10:01,881 INFO Watching for file changes with StatReloader
2024-05-12 12:10:03,142 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:10:03,142 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:10:03,162 INFO Response: 201
2024-05-12 12:10:03,190 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:10:03,191 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:10:03,223 INFO Response: 201
2024-05-12 12:10:03,249 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:10:03,249 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:10:03,261 INFO Response: 201
2024-05-12 12:10:03,276 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:10:03,279 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:10:04,656 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 12:10:04,663 INFO Response: 201
2024-05-12 12:11:55,080 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:12:03,075 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:12:03,075 INFO Request: PATCH /api/v1/manage/tenants/4/
2024-05-12 12:12:03,076 INFO Response: 404
2024-05-12 12:12:08,651 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:12:08,651 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 12:12:08,715 INFO Response: 200
2024-05-12 12:12:11,959 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:14:08,720 INFO /root/delta_api/delta_sase/tenants_app/views.py changed, reloading.
2024-05-12 12:14:09,123 INFO Watching for file changes with StatReloader
2024-05-12 12:16:22,551 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 12:16:22,974 INFO Watching for file changes with StatReloader
2024-05-12 12:16:31,536 INFO Watching for file changes with StatReloader
2024-05-12 12:16:40,735 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 12:16:41,087 INFO Watching for file changes with StatReloader
2024-05-12 12:16:54,836 INFO Watching for file changes with StatReloader
2024-05-12 12:16:56,041 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:16:56,041 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:16:56,057 INFO Response: 201
2024-05-12 12:16:56,070 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:16:56,070 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:16:56,080 INFO Response: 201
2024-05-12 12:16:56,088 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:16:56,088 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:16:56,097 INFO Response: 201
2024-05-12 12:16:56,105 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:16:56,106 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:16:57,545 INFO Created new Tenant Tenant1 with domain 1001
2024-05-12 12:16:57,552 INFO Response: 201
2024-05-12 12:17:01,414 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:17:01,414 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 12:17:01,435 INFO Response: 200
2024-05-12 12:17:08,309 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:17:08,310 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 12:17:08,311 INFO Attempting to delete tenant: Tenant1
2024-05-12 12:17:08,362 INFO Hard deleted tenant Tenant1 and its schema.
2024-05-12 12:17:08,372 INFO Response: 204
2024-05-12 12:17:10,958 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:17:10,958 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:17:10,972 INFO Response: 200
2024-05-12 12:17:22,422 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:17:22,422 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:17:22,425 INFO Response: 400
2024-05-12 12:24:06,440 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:06,440 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:24:06,452 INFO Response: 201
2024-05-12 12:24:06,490 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:06,491 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:24:06,553 INFO Response: 201
2024-05-12 12:24:06,566 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:06,567 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:24:07,781 INFO Created new Tenant Tenant 1 with domain 1001
2024-05-12 12:24:07,785 INFO Response: 201
2024-05-12 12:24:07,790 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:07,790 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:24:07,828 INFO Response: 201
2024-05-12 12:24:07,842 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:07,842 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:24:07,854 INFO Response: 201
2024-05-12 12:24:07,862 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:07,863 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:24:09,103 INFO Created new Tenant Tenant 2 with domain 1002
2024-05-12 12:24:09,107 INFO Response: 201
2024-05-12 12:24:09,122 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:09,122 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:24:09,147 INFO Response: 201
2024-05-12 12:24:09,153 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:09,154 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:24:09,158 INFO Response: 201
2024-05-12 12:24:09,163 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:09,163 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:24:10,354 INFO Created new Tenant Tenant 3 with domain 1003
2024-05-12 12:24:10,358 INFO Response: 201
2024-05-12 12:24:10,362 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:10,363 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:24:10,366 INFO Response: 201
2024-05-12 12:24:10,370 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:10,370 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:24:10,376 INFO Response: 201
2024-05-12 12:24:10,381 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:24:10,381 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:24:11,380 INFO Created new Tenant Tenant 4 with domain 1004
2024-05-12 12:24:11,384 INFO Response: 201
2024-05-12 12:25:26,789 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:25:26,790 INFO Request: GET /api/v1/manage/tenants/?name=Tenant1/
2024-05-12 12:25:26,809 INFO Response: 200
2024-05-12 12:25:26,831 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:25:26,831 INFO Request: GET /api/v1/manage/customers/?name=CustomerA&is_active=True/
2024-05-12 12:25:26,840 INFO Response: 200
2024-05-12 12:25:46,813 INFO Watching for file changes with StatReloader
2024-05-12 12:32:22,814 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:32:22,815 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:32:22,831 INFO Response: 200
2024-05-12 12:32:22,852 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:32:22,852 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:32:24,420 INFO Created new Tenant Tenant_30 with domain 1001
2024-05-12 12:32:24,426 INFO Response: 201
2024-05-12 12:35:05,180 INFO /root/delta_api/delta_sase/tenants_app/models.py changed, reloading.
2024-05-12 12:35:05,613 INFO Watching for file changes with StatReloader
2024-05-12 12:35:41,205 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:35:41,205 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:35:41,258 INFO Response: 200
2024-05-12 12:35:41,300 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:35:41,301 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:35:43,112 INFO Created new Tenant Tenant_94 with domain 1002
2024-05-12 12:35:43,149 INFO Response: 201
2024-05-12 12:35:43,158 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:35:43,158 INFO Request: DELETE /api/v1/manage/tenants/?name=Tenant_30/
2024-05-12 12:35:43,159 INFO Response: 405
2024-05-12 12:39:06,365 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:39:06,366 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:39:06,370 INFO Response: 200
2024-05-12 12:39:06,384 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:39:06,384 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:39:07,781 INFO Created new Tenant Tenant_60 with domain 1003
2024-05-12 12:39:07,784 INFO Response: 201
2024-05-12 12:39:07,801 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:39:07,828 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:39:07,845 INFO Response: 200
2024-05-12 12:39:07,850 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:39:07,850 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 12:39:07,851 INFO Attempting to delete tenant: Tenant_30
2024-05-12 12:39:07,854 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:39:07,854 ERROR Failed to delete tenant Tenant_30: Cannot delete tenant because it is currently enabled.
2024-05-12 12:39:07,855 INFO Response: 400
2024-05-12 12:39:07,859 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:39:07,859 INFO Request: DELETE /api/v1/manage/tenants/4/
2024-05-12 12:39:07,860 INFO Attempting to delete tenant: Tenant_94
2024-05-12 12:39:07,863 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:39:07,863 ERROR Failed to delete tenant Tenant_94: Cannot delete tenant because it is currently enabled.
2024-05-12 12:39:07,863 INFO Response: 400
2024-05-12 12:39:07,868 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:39:07,868 INFO Request: DELETE /api/v1/manage/tenants/5/
2024-05-12 12:39:07,869 INFO Attempting to delete tenant: Tenant_60
2024-05-12 12:39:07,871 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:39:07,872 ERROR Failed to delete tenant Tenant_60: Cannot delete tenant because it is currently enabled.
2024-05-12 12:39:07,872 INFO Response: 400
2024-05-12 12:41:41,535 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:41,546 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:41:41,550 INFO Response: 200
2024-05-12 12:41:41,562 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:41,562 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:41:42,570 INFO Created new Tenant Tenant_91 with domain 1004
2024-05-12 12:41:42,574 INFO Response: 201
2024-05-12 12:41:42,579 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,579 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:41:42,600 INFO Response: 200
2024-05-12 12:41:42,605 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,606 INFO Request: PUT /api/v1/manage/tenants/3/
2024-05-12 12:41:42,608 INFO Response: 400
2024-05-12 12:41:42,612 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,613 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 12:41:42,614 INFO Attempting to delete tenant: Tenant_30
2024-05-12 12:41:42,623 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:41:42,624 ERROR Failed to delete tenant Tenant_30: Cannot delete tenant because it is currently enabled.
2024-05-12 12:41:42,624 INFO Response: 400
2024-05-12 12:41:42,630 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,630 INFO Request: PUT /api/v1/manage/tenants/4/
2024-05-12 12:41:42,633 INFO Response: 400
2024-05-12 12:41:42,641 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,641 INFO Request: DELETE /api/v1/manage/tenants/4/
2024-05-12 12:41:42,642 INFO Attempting to delete tenant: Tenant_94
2024-05-12 12:41:42,645 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:41:42,645 ERROR Failed to delete tenant Tenant_94: Cannot delete tenant because it is currently enabled.
2024-05-12 12:41:42,646 INFO Response: 400
2024-05-12 12:41:42,651 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,651 INFO Request: PUT /api/v1/manage/tenants/5/
2024-05-12 12:41:42,653 INFO Response: 400
2024-05-12 12:41:42,658 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,658 INFO Request: DELETE /api/v1/manage/tenants/5/
2024-05-12 12:41:42,659 INFO Attempting to delete tenant: Tenant_60
2024-05-12 12:41:42,662 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:41:42,663 ERROR Failed to delete tenant Tenant_60: Cannot delete tenant because it is currently enabled.
2024-05-12 12:41:42,663 INFO Response: 400
2024-05-12 12:41:42,669 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,669 INFO Request: PUT /api/v1/manage/tenants/6/
2024-05-12 12:41:42,671 INFO Response: 400
2024-05-12 12:41:42,677 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:41:42,677 INFO Request: DELETE /api/v1/manage/tenants/6/
2024-05-12 12:41:42,679 INFO Attempting to delete tenant: Tenant_91
2024-05-12 12:41:42,683 ERROR Attempt to delete tenant that is enabled
2024-05-12 12:41:42,683 ERROR Failed to delete tenant Tenant_91: Cannot delete tenant because it is currently enabled.
2024-05-12 12:41:42,683 INFO Response: 400
2024-05-12 12:42:16,236 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:42:16,236 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:42:16,262 INFO Response: 200
2024-05-12 12:42:34,127 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:42:34,127 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 12:42:34,136 INFO Response: 200
2024-05-12 12:43:42,777 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:42,779 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:43:42,782 INFO Response: 200
2024-05-12 12:43:42,790 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:42,823 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:43:44,704 INFO Created new Tenant Tenant_6 with domain 1005
2024-05-12 12:43:44,707 INFO Response: 201
2024-05-12 12:43:44,719 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:44,722 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:43:44,787 INFO Response: 200
2024-05-12 12:43:44,792 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:44,792 INFO Request: PATCH /api/v1/manage/tenants/4/
2024-05-12 12:43:44,800 INFO Response: 200
2024-05-12 12:43:44,804 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:44,805 INFO Request: DELETE /api/v1/manage/tenants/4/
2024-05-12 12:43:44,805 INFO Attempting to delete tenant: Tenant_94
2024-05-12 12:43:44,830 INFO Hard deleted tenant Tenant_94 and its schema.
2024-05-12 12:43:44,836 INFO Response: 204
2024-05-12 12:43:44,845 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:44,845 INFO Request: PATCH /api/v1/manage/tenants/5/
2024-05-12 12:43:44,853 INFO Response: 200
2024-05-12 12:43:44,858 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:44,859 INFO Request: DELETE /api/v1/manage/tenants/5/
2024-05-12 12:43:44,860 INFO Attempting to delete tenant: Tenant_60
2024-05-12 12:43:44,887 INFO Hard deleted tenant Tenant_60 and its schema.
2024-05-12 12:43:44,960 INFO Response: 204
2024-05-12 12:43:44,975 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:44,975 INFO Request: PATCH /api/v1/manage/tenants/6/
2024-05-12 12:43:44,986 INFO Response: 200
2024-05-12 12:43:44,998 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:44,999 INFO Request: DELETE /api/v1/manage/tenants/6/
2024-05-12 12:43:45,000 INFO Attempting to delete tenant: Tenant_91
2024-05-12 12:43:45,146 INFO Hard deleted tenant Tenant_91 and its schema.
2024-05-12 12:43:45,156 INFO Response: 204
2024-05-12 12:43:45,177 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:45,179 INFO Request: PATCH /api/v1/manage/tenants/3/
2024-05-12 12:43:45,227 INFO Response: 200
2024-05-12 12:43:45,241 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:45,241 INFO Request: DELETE /api/v1/manage/tenants/3/
2024-05-12 12:43:45,244 INFO Attempting to delete tenant: Tenant_30
2024-05-12 12:43:45,288 INFO Hard deleted tenant Tenant_30 and its schema.
2024-05-12 12:43:45,310 INFO Response: 204
2024-05-12 12:43:45,525 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:45,525 INFO Request: PATCH /api/v1/manage/tenants/7/
2024-05-12 12:43:45,539 INFO Response: 200
2024-05-12 12:43:45,556 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:43:45,556 INFO Request: DELETE /api/v1/manage/tenants/7/
2024-05-12 12:43:45,558 INFO Attempting to delete tenant: Tenant_6
2024-05-12 12:43:45,675 INFO Hard deleted tenant Tenant_6 and its schema.
2024-05-12 12:43:45,685 INFO Response: 204
2024-05-12 12:45:43,477 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:43,477 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:45:43,479 INFO Response: 200
2024-05-12 12:45:43,484 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:43,484 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:45:44,600 INFO Created new Tenant Tenant_30 with domain 1001
2024-05-12 12:45:44,604 INFO Response: 201
2024-05-12 12:45:44,643 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:44,644 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:45:45,608 INFO Created new Tenant Tenant_21 with domain 1002
2024-05-12 12:45:45,614 INFO Response: 201
2024-05-12 12:45:45,630 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:45,631 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:45:47,050 INFO Created new Tenant Tenant_76 with domain 1003
2024-05-12 12:45:47,054 INFO Response: 201
2024-05-12 12:45:47,060 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:47,060 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:45:48,235 INFO Created new Tenant Tenant_10 with domain 1004
2024-05-12 12:45:48,285 INFO Response: 201
2024-05-12 12:45:48,296 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:48,296 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:45:49,211 INFO Created new Tenant Tenant_95 with domain 1005
2024-05-12 12:45:49,225 INFO Response: 201
2024-05-12 12:45:56,516 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:56,516 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:45:56,531 INFO Response: 200
2024-05-12 12:45:56,558 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:56,558 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:45:57,624 INFO Created new Tenant Tenant_52 with domain 1006
2024-05-12 12:45:57,683 INFO Response: 201
2024-05-12 12:45:57,696 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:57,696 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:45:57,732 INFO Response: 200
2024-05-12 12:45:57,746 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:57,746 INFO Request: PATCH /api/v1/manage/tenants/8/
2024-05-12 12:45:57,754 INFO Response: 200
2024-05-12 12:45:57,759 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:57,759 INFO Request: DELETE /api/v1/manage/tenants/8/
2024-05-12 12:45:57,760 INFO Attempting to delete tenant: Tenant_30
2024-05-12 12:45:57,787 INFO Hard deleted tenant Tenant_30 and its schema.
2024-05-12 12:45:57,795 INFO Response: 204
2024-05-12 12:45:57,806 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:57,807 INFO Request: PATCH /api/v1/manage/tenants/9/
2024-05-12 12:45:57,818 INFO Response: 200
2024-05-12 12:45:57,822 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:57,823 INFO Request: DELETE /api/v1/manage/tenants/9/
2024-05-12 12:45:57,824 INFO Attempting to delete tenant: Tenant_21
2024-05-12 12:45:57,847 INFO Hard deleted tenant Tenant_21 and its schema.
2024-05-12 12:45:57,873 INFO Response: 204
2024-05-12 12:45:57,915 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:57,917 INFO Request: PATCH /api/v1/manage/tenants/10/
2024-05-12 12:45:57,998 INFO Response: 200
2024-05-12 12:45:58,003 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:58,003 INFO Request: DELETE /api/v1/manage/tenants/10/
2024-05-12 12:45:58,003 INFO Attempting to delete tenant: Tenant_76
2024-05-12 12:45:58,065 INFO Hard deleted tenant Tenant_76 and its schema.
2024-05-12 12:45:58,076 INFO Response: 204
2024-05-12 12:45:58,086 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:58,111 INFO Request: PATCH /api/v1/manage/tenants/11/
2024-05-12 12:45:58,180 INFO Response: 200
2024-05-12 12:45:58,192 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:58,192 INFO Request: DELETE /api/v1/manage/tenants/11/
2024-05-12 12:45:58,193 INFO Attempting to delete tenant: Tenant_10
2024-05-12 12:45:58,216 INFO Hard deleted tenant Tenant_10 and its schema.
2024-05-12 12:45:58,222 INFO Response: 204
2024-05-12 12:45:58,227 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:58,227 INFO Request: PATCH /api/v1/manage/tenants/12/
2024-05-12 12:45:58,235 INFO Response: 200
2024-05-12 12:45:58,240 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:58,240 INFO Request: DELETE /api/v1/manage/tenants/12/
2024-05-12 12:45:58,241 INFO Attempting to delete tenant: Tenant_95
2024-05-12 12:45:58,266 INFO Hard deleted tenant Tenant_95 and its schema.
2024-05-12 12:45:58,272 INFO Response: 204
2024-05-12 12:45:58,277 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:58,277 INFO Request: PATCH /api/v1/manage/tenants/13/
2024-05-12 12:45:58,285 INFO Response: 200
2024-05-12 12:45:58,289 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:45:58,289 INFO Request: DELETE /api/v1/manage/tenants/13/
2024-05-12 12:45:58,290 INFO Attempting to delete tenant: Tenant_52
2024-05-12 12:45:58,323 INFO Hard deleted tenant Tenant_52 and its schema.
2024-05-12 12:45:58,331 INFO Response: 204
2024-05-12 12:46:09,345 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:46:09,345 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:46:09,347 INFO Response: 200
2024-05-12 12:46:09,355 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:46:09,355 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:46:10,445 INFO Created new Tenant Tenant_92 with domain 1001
2024-05-12 12:46:10,449 INFO Response: 201
2024-05-12 12:46:10,454 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:46:10,454 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:46:11,901 INFO Created new Tenant Tenant_96 with domain 1002
2024-05-12 12:46:11,905 INFO Response: 201
2024-05-12 12:46:11,912 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:46:11,922 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:46:13,330 INFO Created new Tenant Tenant_73 with domain 1003
2024-05-12 12:46:13,334 INFO Response: 201
2024-05-12 12:46:13,380 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:46:13,380 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:46:14,758 INFO Created new Tenant Tenant_79 with domain 1004
2024-05-12 12:46:14,762 INFO Response: 201
2024-05-12 12:46:14,787 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:46:14,787 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:46:15,982 INFO Created new Tenant Tenant_37 with domain 1005
2024-05-12 12:46:15,985 INFO Response: 201
2024-05-12 12:47:07,913 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:07,914 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:47:07,917 INFO Response: 200
2024-05-12 12:47:07,925 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:07,925 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:47:08,867 INFO Created new Tenant Tenant_84 with domain 1006
2024-05-12 12:47:08,871 INFO Response: 201
2024-05-12 12:47:08,879 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:08,881 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:47:08,984 INFO Response: 200
2024-05-12 12:47:09,010 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,010 INFO Request: PATCH /api/v1/manage/tenants/14/
2024-05-12 12:47:09,022 INFO Response: 200
2024-05-12 12:47:09,042 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,042 INFO Request: DELETE /api/v1/manage/tenants/14/
2024-05-12 12:47:09,044 INFO Attempting to delete tenant: Tenant_92
2024-05-12 12:47:09,068 INFO Hard deleted tenant Tenant_92 and its schema.
2024-05-12 12:47:09,074 INFO Response: 204
2024-05-12 12:47:09,079 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,080 INFO Request: PATCH /api/v1/manage/tenants/15/
2024-05-12 12:47:09,088 INFO Response: 200
2024-05-12 12:47:09,093 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,093 INFO Request: DELETE /api/v1/manage/tenants/15/
2024-05-12 12:47:09,094 INFO Attempting to delete tenant: Tenant_96
2024-05-12 12:47:09,146 INFO Hard deleted tenant Tenant_96 and its schema.
2024-05-12 12:47:09,152 INFO Response: 204
2024-05-12 12:47:09,158 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,158 INFO Request: PATCH /api/v1/manage/tenants/16/
2024-05-12 12:47:09,210 INFO Response: 200
2024-05-12 12:47:09,234 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,234 INFO Request: DELETE /api/v1/manage/tenants/16/
2024-05-12 12:47:09,236 INFO Attempting to delete tenant: Tenant_73
2024-05-12 12:47:09,372 INFO Hard deleted tenant Tenant_73 and its schema.
2024-05-12 12:47:09,377 INFO Response: 204
2024-05-12 12:47:09,401 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,402 INFO Request: PATCH /api/v1/manage/tenants/17/
2024-05-12 12:47:09,415 INFO Response: 200
2024-05-12 12:47:09,501 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,501 INFO Request: DELETE /api/v1/manage/tenants/17/
2024-05-12 12:47:09,503 INFO Attempting to delete tenant: Tenant_79
2024-05-12 12:47:09,634 INFO Hard deleted tenant Tenant_79 and its schema.
2024-05-12 12:47:09,643 INFO Response: 204
2024-05-12 12:47:09,653 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,654 INFO Request: PATCH /api/v1/manage/tenants/18/
2024-05-12 12:47:09,666 INFO Response: 200
2024-05-12 12:47:09,703 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,703 INFO Request: DELETE /api/v1/manage/tenants/18/
2024-05-12 12:47:09,704 INFO Attempting to delete tenant: Tenant_37
2024-05-12 12:47:09,728 INFO Hard deleted tenant Tenant_37 and its schema.
2024-05-12 12:47:09,735 INFO Response: 204
2024-05-12 12:47:09,771 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,771 INFO Request: PATCH /api/v1/manage/tenants/19/
2024-05-12 12:47:09,788 INFO Response: 200
2024-05-12 12:47:09,809 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:09,809 INFO Request: DELETE /api/v1/manage/tenants/19/
2024-05-12 12:47:09,810 INFO Attempting to delete tenant: Tenant_84
2024-05-12 12:47:09,842 INFO Hard deleted tenant Tenant_84 and its schema.
2024-05-12 12:47:09,853 INFO Response: 204
2024-05-12 12:47:13,523 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:13,523 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:47:13,525 INFO Response: 200
2024-05-12 12:47:13,541 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:13,543 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:47:14,618 INFO Created new Tenant Tenant_48 with domain 1001
2024-05-12 12:47:14,624 INFO Response: 201
2024-05-12 12:47:14,639 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:14,639 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:47:16,479 INFO Created new Tenant Tenant_91 with domain 1002
2024-05-12 12:47:16,482 INFO Response: 201
2024-05-12 12:47:16,511 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:16,511 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:47:17,436 INFO Created new Tenant Tenant_50 with domain 1003
2024-05-12 12:47:17,440 INFO Response: 201
2024-05-12 12:47:17,544 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:17,546 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:47:18,732 INFO Created new Tenant Tenant_69 with domain 1004
2024-05-12 12:47:18,736 INFO Response: 201
2024-05-12 12:47:18,751 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:47:18,751 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:47:19,668 INFO Created new Tenant Tenant_8 with domain 1005
2024-05-12 12:47:19,672 INFO Response: 201
2024-05-12 12:50:14,773 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,773 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:14,784 INFO Response: 201
2024-05-12 12:50:14,815 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,815 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:14,823 INFO Response: 201
2024-05-12 12:50:14,827 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,828 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:14,831 INFO Response: 201
2024-05-12 12:50:14,839 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,839 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:14,845 INFO Response: 201
2024-05-12 12:50:14,851 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,851 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:14,854 INFO Response: 201
2024-05-12 12:50:14,861 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,861 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:14,897 INFO Response: 201
2024-05-12 12:50:14,907 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,908 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:14,913 INFO Response: 201
2024-05-12 12:50:14,930 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,930 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:14,936 INFO Response: 201
2024-05-12 12:50:14,950 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,951 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:14,955 INFO Response: 201
2024-05-12 12:50:14,963 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:14,963 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:14,970 INFO Response: 201
2024-05-12 12:50:36,189 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,189 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:36,194 INFO Response: 201
2024-05-12 12:50:36,216 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,216 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:36,221 INFO Response: 201
2024-05-12 12:50:36,226 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,226 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:36,229 INFO Response: 201
2024-05-12 12:50:36,234 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,234 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:36,239 INFO Response: 201
2024-05-12 12:50:36,244 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,244 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:36,247 INFO Response: 201
2024-05-12 12:50:36,253 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,253 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:36,258 INFO Response: 201
2024-05-12 12:50:36,263 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,336 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:36,342 INFO Response: 201
2024-05-12 12:50:36,352 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,352 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:36,360 INFO Response: 201
2024-05-12 12:50:36,367 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,367 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:50:36,371 INFO Response: 201
2024-05-12 12:50:36,377 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:50:36,377 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:50:36,383 INFO Response: 201
2024-05-12 12:51:03,042 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,042 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:51:03,045 INFO Response: 201
2024-05-12 12:51:03,050 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,050 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:51:03,054 INFO Response: 201
2024-05-12 12:51:03,058 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,058 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:51:03,061 INFO Response: 201
2024-05-12 12:51:03,065 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,065 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:51:03,070 INFO Response: 201
2024-05-12 12:51:03,075 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,075 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:51:03,078 INFO Response: 201
2024-05-12 12:51:03,083 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,083 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:51:03,088 INFO Response: 201
2024-05-12 12:51:03,093 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,093 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:51:03,096 INFO Response: 201
2024-05-12 12:51:03,105 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,105 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:51:03,112 INFO Response: 201
2024-05-12 12:51:03,120 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,120 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:51:03,123 INFO Response: 201
2024-05-12 12:51:03,128 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:51:03,128 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:51:03,132 INFO Response: 201
2024-05-12 12:53:04,382 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:53:04,382 INFO Request: GET /api/v1/manage/customers/?name=None&is_active=True/
2024-05-12 12:53:04,391 INFO Response: 200
2024-05-12 12:54:10,960 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:10,961 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:54:10,981 INFO Response: 200
2024-05-12 12:54:11,060 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,060 INFO Request: GET /api/v1/manage/contacts/?customer=1/
2024-05-12 12:54:11,087 INFO Response: 200
2024-05-12 12:54:11,091 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,092 INFO Request: DELETE /api/v1/manage/contacts/1/
2024-05-12 12:54:11,094 INFO Response: 204
2024-05-12 12:54:11,100 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,100 INFO Request: DELETE /api/v1/manage/contacts/2/
2024-05-12 12:54:11,103 INFO Response: 204
2024-05-12 12:54:11,108 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,108 INFO Request: DELETE /api/v1/manage/contacts/3/
2024-05-12 12:54:11,110 INFO Response: 204
2024-05-12 12:54:11,115 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,115 INFO Request: DELETE /api/v1/manage/contacts/4/
2024-05-12 12:54:11,120 INFO Response: 204
2024-05-12 12:54:11,130 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,130 INFO Request: DELETE /api/v1/manage/contacts/5/
2024-05-12 12:54:11,133 INFO Response: 204
2024-05-12 12:54:11,139 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,139 INFO Request: DELETE /api/v1/manage/contacts/6/
2024-05-12 12:54:11,142 INFO Response: 204
2024-05-12 12:54:11,147 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,147 INFO Request: DELETE /api/v1/manage/contacts/7/
2024-05-12 12:54:11,150 INFO Response: 204
2024-05-12 12:54:11,155 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,155 INFO Request: DELETE /api/v1/manage/contacts/8/
2024-05-12 12:54:11,158 INFO Response: 204
2024-05-12 12:54:11,176 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,176 INFO Request: DELETE /api/v1/manage/contacts/9/
2024-05-12 12:54:11,181 INFO Response: 204
2024-05-12 12:54:11,190 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,190 INFO Request: DELETE /api/v1/manage/contacts/10/
2024-05-12 12:54:11,193 INFO Response: 204
2024-05-12 12:54:11,200 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,200 INFO Request: DELETE /api/v1/manage/contacts/11/
2024-05-12 12:54:11,204 INFO Response: 204
2024-05-12 12:54:11,209 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,210 INFO Request: DELETE /api/v1/manage/contacts/12/
2024-05-12 12:54:11,213 INFO Response: 204
2024-05-12 12:54:11,219 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,219 INFO Request: DELETE /api/v1/manage/contacts/13/
2024-05-12 12:54:11,222 INFO Response: 204
2024-05-12 12:54:11,226 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,227 INFO Request: DELETE /api/v1/manage/contacts/14/
2024-05-12 12:54:11,229 INFO Response: 204
2024-05-12 12:54:11,234 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,234 INFO Request: DELETE /api/v1/manage/contacts/15/
2024-05-12 12:54:11,237 INFO Response: 204
2024-05-12 12:54:11,241 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,242 INFO Request: DELETE /api/v1/manage/customers/1/
2024-05-12 12:54:11,442 ERROR Unhandled exception occurred: cannot DROP TABLE "tenants_app_tenant" because it has pending trigger events
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 103, in _execute
    return self.cursor.execute(sql)
psycopg2.errors.ObjectInUse: cannot DROP TABLE "tenants_app_tenant" because it has pending trigger events


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/viewsets.py", line 124, in view
    return self.dispatch(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 91, in destroy
    self.perform_destroy(instance)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 95, in perform_destroy
    instance.delete()
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/models/base.py", line 1183, in delete
    return collector.delete()
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/models/deletion.py", line 512, in delete
    signals.post_delete.send(
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/dispatch/dispatcher.py", line 189, in send
    response = receiver(signal=self, sender=sender, **named)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django_tenants/signals.py", line 43, in tenant_delete_callback
    instance._drop_schema(True)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django_tenants/models.py", line 148, in _drop_schema
    cursor.execute('DROP SCHEMA "%s" CASCADE' % self.schema_name)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 103, in _execute
    return self.cursor.execute(sql)
django.db.utils.OperationalError: cannot DROP TABLE "tenants_app_tenant" because it has pending trigger events

2024-05-12 12:54:11,444 INFO Response: 500
2024-05-12 12:54:11,444 ERROR Internal Server Error: /api/v1/manage/customers/1/
2024-05-12 12:54:11,444 ERROR Internal Server Error: /api/v1/manage/customers/1/
2024-05-12 12:54:11,465 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,465 INFO Request: GET /api/v1/manage/contacts/?customer=2/
2024-05-12 12:54:11,488 INFO Response: 200
2024-05-12 12:54:11,533 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,533 INFO Request: DELETE /api/v1/manage/customers/2/
2024-05-12 12:54:11,546 INFO Response: 204
2024-05-12 12:54:11,585 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,586 INFO Request: GET /api/v1/manage/contacts/?customer=3/
2024-05-12 12:54:11,588 INFO Response: 200
2024-05-12 12:54:11,617 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,618 INFO Request: DELETE /api/v1/manage/customers/3/
2024-05-12 12:54:11,639 INFO Response: 204
2024-05-12 12:54:11,676 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,676 INFO Request: GET /api/v1/manage/contacts/?customer=4/
2024-05-12 12:54:11,678 INFO Response: 200
2024-05-12 12:54:11,683 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,683 INFO Request: DELETE /api/v1/manage/customers/4/
2024-05-12 12:54:11,688 INFO Response: 204
2024-05-12 12:54:11,693 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,693 INFO Request: GET /api/v1/manage/contacts/?customer=5/
2024-05-12 12:54:11,694 INFO Response: 200
2024-05-12 12:54:11,698 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,698 INFO Request: DELETE /api/v1/manage/customers/5/
2024-05-12 12:54:11,703 INFO Response: 204
2024-05-12 12:54:11,707 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,707 INFO Request: GET /api/v1/manage/contacts/?customer=6/
2024-05-12 12:54:11,708 INFO Response: 200
2024-05-12 12:54:11,712 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,712 INFO Request: DELETE /api/v1/manage/customers/6/
2024-05-12 12:54:11,718 INFO Response: 204
2024-05-12 12:54:11,722 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,722 INFO Request: GET /api/v1/manage/contacts/?customer=7/
2024-05-12 12:54:11,723 INFO Response: 200
2024-05-12 12:54:11,728 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,728 INFO Request: DELETE /api/v1/manage/customers/7/
2024-05-12 12:54:11,734 INFO Response: 204
2024-05-12 12:54:11,745 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,745 INFO Request: GET /api/v1/manage/contacts/?customer=8/
2024-05-12 12:54:11,747 INFO Response: 200
2024-05-12 12:54:11,758 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,758 INFO Request: DELETE /api/v1/manage/customers/8/
2024-05-12 12:54:11,766 INFO Response: 204
2024-05-12 12:54:11,774 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,774 INFO Request: GET /api/v1/manage/contacts/?customer=9/
2024-05-12 12:54:11,775 INFO Response: 200
2024-05-12 12:54:11,780 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,780 INFO Request: DELETE /api/v1/manage/customers/9/
2024-05-12 12:54:11,786 INFO Response: 204
2024-05-12 12:54:11,794 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,794 INFO Request: GET /api/v1/manage/contacts/?customer=10/
2024-05-12 12:54:11,796 INFO Response: 200
2024-05-12 12:54:11,806 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,806 INFO Request: DELETE /api/v1/manage/customers/10/
2024-05-12 12:54:11,815 INFO Response: 204
2024-05-12 12:54:11,827 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,827 INFO Request: GET /api/v1/manage/contacts/?customer=11/
2024-05-12 12:54:11,828 INFO Response: 200
2024-05-12 12:54:11,833 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,833 INFO Request: DELETE /api/v1/manage/customers/11/
2024-05-12 12:54:11,837 INFO Response: 204
2024-05-12 12:54:11,842 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,842 INFO Request: GET /api/v1/manage/contacts/?customer=12/
2024-05-12 12:54:11,843 INFO Response: 200
2024-05-12 12:54:11,847 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,847 INFO Request: DELETE /api/v1/manage/customers/12/
2024-05-12 12:54:11,852 INFO Response: 204
2024-05-12 12:54:11,856 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,856 INFO Request: GET /api/v1/manage/contacts/?customer=13/
2024-05-12 12:54:11,857 INFO Response: 200
2024-05-12 12:54:11,862 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,862 INFO Request: DELETE /api/v1/manage/customers/13/
2024-05-12 12:54:11,867 INFO Response: 204
2024-05-12 12:54:11,893 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,893 INFO Request: GET /api/v1/manage/contacts/?customer=14/
2024-05-12 12:54:11,895 INFO Response: 200
2024-05-12 12:54:11,901 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,902 INFO Request: DELETE /api/v1/manage/customers/14/
2024-05-12 12:54:11,978 INFO Response: 204
2024-05-12 12:54:11,986 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,988 INFO Request: GET /api/v1/manage/contacts/?customer=15/
2024-05-12 12:54:11,992 INFO Response: 200
2024-05-12 12:54:11,999 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:11,999 INFO Request: DELETE /api/v1/manage/customers/15/
2024-05-12 12:54:12,008 INFO Response: 204
2024-05-12 12:54:12,019 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:12,019 INFO Request: GET /api/v1/manage/contacts/?customer=16/
2024-05-12 12:54:12,021 INFO Response: 200
2024-05-12 12:54:12,029 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:54:12,029 INFO Request: DELETE /api/v1/manage/customers/16/
2024-05-12 12:54:12,034 INFO Response: 204
2024-05-12 12:55:49,333 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,333 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:49,336 INFO Response: 201
2024-05-12 12:55:49,341 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,341 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:49,345 INFO Response: 201
2024-05-12 12:55:49,349 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,349 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:49,352 INFO Response: 201
2024-05-12 12:55:49,357 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,357 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:49,361 INFO Response: 201
2024-05-12 12:55:49,366 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,366 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:49,369 INFO Response: 201
2024-05-12 12:55:49,374 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,374 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:49,379 INFO Response: 201
2024-05-12 12:55:49,385 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,385 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:49,388 INFO Response: 201
2024-05-12 12:55:49,393 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,393 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:49,397 INFO Response: 201
2024-05-12 12:55:49,403 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,403 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:49,406 INFO Response: 201
2024-05-12 12:55:49,411 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:49,412 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:49,416 INFO Response: 201
2024-05-12 12:55:53,269 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,269 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:55:53,274 INFO Response: 200
2024-05-12 12:55:53,280 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,280 INFO Request: GET /api/v1/manage/contacts/?customer=1/
2024-05-12 12:55:53,285 INFO Response: 200
2024-05-12 12:55:53,290 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,290 INFO Request: DELETE /api/v1/manage/contacts/16/
2024-05-12 12:55:53,326 INFO Response: 204
2024-05-12 12:55:53,352 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,353 INFO Request: DELETE /api/v1/manage/contacts/17/
2024-05-12 12:55:53,357 INFO Response: 204
2024-05-12 12:55:53,386 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,387 INFO Request: DELETE /api/v1/manage/contacts/18/
2024-05-12 12:55:53,398 INFO Response: 204
2024-05-12 12:55:53,418 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,418 INFO Request: DELETE /api/v1/manage/contacts/19/
2024-05-12 12:55:53,422 INFO Response: 204
2024-05-12 12:55:53,426 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,426 INFO Request: DELETE /api/v1/manage/contacts/20/
2024-05-12 12:55:53,429 INFO Response: 204
2024-05-12 12:55:53,434 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,434 INFO Request: DELETE /api/v1/manage/customers/1/
2024-05-12 12:55:53,562 ERROR Unhandled exception occurred: cannot DROP TABLE "tenants_app_tenant" because it has pending trigger events
Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 103, in _execute
    return self.cursor.execute(sql)
psycopg2.errors.ObjectInUse: cannot DROP TABLE "tenants_app_tenant" because it has pending trigger events


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/viewsets.py", line 124, in view
    return self.dispatch(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 91, in destroy
    self.perform_destroy(instance)
  File "/root/delta_api/env1/lib/python3.10/site-packages/rest_framework/mixins.py", line 95, in perform_destroy
    instance.delete()
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/models/base.py", line 1183, in delete
    return collector.delete()
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/models/deletion.py", line 512, in delete
    signals.post_delete.send(
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/dispatch/dispatcher.py", line 189, in send
    response = receiver(signal=self, sender=sender, **named)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django_tenants/signals.py", line 43, in tenant_delete_callback
    instance._drop_schema(True)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django_tenants/models.py", line 148, in _drop_schema
    cursor.execute('DROP SCHEMA "%s" CASCADE' % self.schema_name)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/root/delta_api/env1/lib/python3.10/site-packages/django/db/backends/utils.py", line 103, in _execute
    return self.cursor.execute(sql)
django.db.utils.OperationalError: cannot DROP TABLE "tenants_app_tenant" because it has pending trigger events

2024-05-12 12:55:53,563 INFO Response: 500
2024-05-12 12:55:53,563 ERROR Internal Server Error: /api/v1/manage/customers/1/
2024-05-12 12:55:53,563 ERROR Internal Server Error: /api/v1/manage/customers/1/
2024-05-12 12:55:53,637 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,639 INFO Request: GET /api/v1/manage/contacts/?customer=17/
2024-05-12 12:55:53,641 INFO Response: 200
2024-05-12 12:55:53,670 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,671 INFO Request: DELETE /api/v1/manage/customers/17/
2024-05-12 12:55:53,676 INFO Response: 204
2024-05-12 12:55:53,681 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,681 INFO Request: GET /api/v1/manage/contacts/?customer=18/
2024-05-12 12:55:53,682 INFO Response: 200
2024-05-12 12:55:53,691 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,691 INFO Request: DELETE /api/v1/manage/customers/18/
2024-05-12 12:55:53,716 INFO Response: 204
2024-05-12 12:55:53,725 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,725 INFO Request: GET /api/v1/manage/contacts/?customer=19/
2024-05-12 12:55:53,727 INFO Response: 200
2024-05-12 12:55:53,749 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,749 INFO Request: DELETE /api/v1/manage/customers/19/
2024-05-12 12:55:53,787 INFO Response: 204
2024-05-12 12:55:53,799 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,799 INFO Request: GET /api/v1/manage/contacts/?customer=20/
2024-05-12 12:55:53,801 INFO Response: 200
2024-05-12 12:55:53,809 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,809 INFO Request: DELETE /api/v1/manage/customers/20/
2024-05-12 12:55:53,816 INFO Response: 204
2024-05-12 12:55:53,822 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,822 INFO Request: GET /api/v1/manage/contacts/?customer=21/
2024-05-12 12:55:53,824 INFO Response: 200
2024-05-12 12:55:53,829 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:53,829 INFO Request: DELETE /api/v1/manage/customers/21/
2024-05-12 12:55:53,836 INFO Response: 204
2024-05-12 12:55:55,546 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,546 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:55,554 INFO Response: 201
2024-05-12 12:55:55,560 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,560 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:55,564 INFO Response: 201
2024-05-12 12:55:55,569 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,569 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:55,572 INFO Response: 201
2024-05-12 12:55:55,577 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,577 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:55,581 INFO Response: 201
2024-05-12 12:55:55,586 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,586 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:55,590 INFO Response: 201
2024-05-12 12:55:55,595 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,595 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:55,601 INFO Response: 201
2024-05-12 12:55:55,630 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,630 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:55,636 INFO Response: 201
2024-05-12 12:55:55,679 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,679 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:55,689 INFO Response: 201
2024-05-12 12:55:55,701 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,703 INFO Request: POST /api/v1/manage/customers/
2024-05-12 12:55:55,754 INFO Response: 201
2024-05-12 12:55:55,800 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:55:55,801 INFO Request: POST /api/v1/manage/contacts/
2024-05-12 12:55:55,837 INFO Response: 201
2024-05-12 12:56:09,061 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:09,064 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:56:09,070 INFO Response: 200
2024-05-12 12:56:09,082 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:09,082 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:56:09,091 INFO Response: 400
2024-05-12 12:56:09,165 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:09,165 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:56:10,512 INFO Created new Tenant Tenant_63 with domain 1006
2024-05-12 12:56:10,526 INFO Response: 201
2024-05-12 12:56:10,534 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:10,534 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:56:11,903 INFO Created new Tenant Tenant_39 with domain 1007
2024-05-12 12:56:11,906 INFO Response: 201
2024-05-12 12:56:11,912 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:11,912 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:56:13,141 INFO Created new Tenant Tenant_89 with domain 1008
2024-05-12 12:56:13,145 INFO Response: 201
2024-05-12 12:56:13,170 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:13,171 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:56:14,462 INFO Created new Tenant Tenant_41 with domain 1009
2024-05-12 12:56:14,466 INFO Response: 201
2024-05-12 12:56:45,731 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:45,731 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:56:45,736 INFO Response: 200
2024-05-12 12:56:45,751 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:45,751 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:56:47,127 INFO Created new Tenant Tenant_15 with domain 1010
2024-05-12 12:56:47,133 INFO Response: 201
2024-05-12 12:56:47,183 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,184 INFO Request: GET /api/v1/manage/tenants/
2024-05-12 12:56:47,229 INFO Response: 200
2024-05-12 12:56:47,234 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,235 INFO Request: PATCH /api/v1/manage/tenants/20/
2024-05-12 12:56:47,242 INFO Response: 200
2024-05-12 12:56:47,339 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,339 INFO Request: DELETE /api/v1/manage/tenants/20/
2024-05-12 12:56:47,342 INFO Attempting to delete tenant: Tenant_48
2024-05-12 12:56:47,382 INFO Hard deleted tenant Tenant_48 and its schema.
2024-05-12 12:56:47,388 INFO Response: 204
2024-05-12 12:56:47,393 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,393 INFO Request: PATCH /api/v1/manage/tenants/21/
2024-05-12 12:56:47,402 INFO Response: 200
2024-05-12 12:56:47,407 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,407 INFO Request: DELETE /api/v1/manage/tenants/21/
2024-05-12 12:56:47,408 INFO Attempting to delete tenant: Tenant_91
2024-05-12 12:56:47,436 INFO Hard deleted tenant Tenant_91 and its schema.
2024-05-12 12:56:47,446 INFO Response: 204
2024-05-12 12:56:47,502 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,502 INFO Request: PATCH /api/v1/manage/tenants/22/
2024-05-12 12:56:47,515 INFO Response: 200
2024-05-12 12:56:47,596 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,596 INFO Request: DELETE /api/v1/manage/tenants/22/
2024-05-12 12:56:47,598 INFO Attempting to delete tenant: Tenant_50
2024-05-12 12:56:47,651 INFO Hard deleted tenant Tenant_50 and its schema.
2024-05-12 12:56:47,666 INFO Response: 204
2024-05-12 12:56:47,707 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,707 INFO Request: PATCH /api/v1/manage/tenants/23/
2024-05-12 12:56:47,786 INFO Response: 200
2024-05-12 12:56:47,792 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,792 INFO Request: DELETE /api/v1/manage/tenants/23/
2024-05-12 12:56:47,793 INFO Attempting to delete tenant: Tenant_69
2024-05-12 12:56:47,855 INFO Hard deleted tenant Tenant_69 and its schema.
2024-05-12 12:56:47,864 INFO Response: 204
2024-05-12 12:56:47,875 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,876 INFO Request: PATCH /api/v1/manage/tenants/24/
2024-05-12 12:56:47,895 INFO Response: 200
2024-05-12 12:56:47,904 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:47,904 INFO Request: DELETE /api/v1/manage/tenants/24/
2024-05-12 12:56:47,906 INFO Attempting to delete tenant: Tenant_8
2024-05-12 12:56:47,995 INFO Hard deleted tenant Tenant_8 and its schema.
2024-05-12 12:56:48,001 INFO Response: 204
2024-05-12 12:56:48,006 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,006 INFO Request: PATCH /api/v1/manage/tenants/25/
2024-05-12 12:56:48,013 INFO Response: 200
2024-05-12 12:56:48,018 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,018 INFO Request: DELETE /api/v1/manage/tenants/25/
2024-05-12 12:56:48,019 INFO Attempting to delete tenant: Tenant_63
2024-05-12 12:56:48,055 INFO Hard deleted tenant Tenant_63 and its schema.
2024-05-12 12:56:48,065 INFO Response: 204
2024-05-12 12:56:48,074 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,074 INFO Request: PATCH /api/v1/manage/tenants/26/
2024-05-12 12:56:48,084 INFO Response: 200
2024-05-12 12:56:48,090 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,090 INFO Request: DELETE /api/v1/manage/tenants/26/
2024-05-12 12:56:48,092 INFO Attempting to delete tenant: Tenant_39
2024-05-12 12:56:48,119 INFO Hard deleted tenant Tenant_39 and its schema.
2024-05-12 12:56:48,125 INFO Response: 204
2024-05-12 12:56:48,130 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,130 INFO Request: PATCH /api/v1/manage/tenants/27/
2024-05-12 12:56:48,137 INFO Response: 200
2024-05-12 12:56:48,142 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,142 INFO Request: DELETE /api/v1/manage/tenants/27/
2024-05-12 12:56:48,169 INFO Attempting to delete tenant: Tenant_89
2024-05-12 12:56:48,241 INFO Hard deleted tenant Tenant_89 and its schema.
2024-05-12 12:56:48,284 INFO Response: 204
2024-05-12 12:56:48,315 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,316 INFO Request: PATCH /api/v1/manage/tenants/28/
2024-05-12 12:56:48,324 INFO Response: 200
2024-05-12 12:56:48,328 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,329 INFO Request: DELETE /api/v1/manage/tenants/28/
2024-05-12 12:56:48,330 INFO Attempting to delete tenant: Tenant_41
2024-05-12 12:56:48,376 INFO Hard deleted tenant Tenant_41 and its schema.
2024-05-12 12:56:48,385 INFO Response: 204
2024-05-12 12:56:48,395 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,395 INFO Request: PATCH /api/v1/manage/tenants/29/
2024-05-12 12:56:48,409 INFO Response: 200
2024-05-12 12:56:48,418 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:48,418 INFO Request: DELETE /api/v1/manage/tenants/29/
2024-05-12 12:56:48,420 INFO Attempting to delete tenant: Tenant_15
2024-05-12 12:56:48,563 INFO Hard deleted tenant Tenant_15 and its schema.
2024-05-12 12:56:48,575 INFO Response: 204
2024-05-12 12:56:57,751 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:57,751 INFO Request: GET /api/v1/manage/customers/
2024-05-12 12:56:57,788 INFO Response: 200
2024-05-12 12:56:57,802 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:57,802 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:56:58,793 INFO Created new Tenant Tenant_74 with domain 1001
2024-05-12 12:56:58,797 INFO Response: 201
2024-05-12 12:56:58,807 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:58,807 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:56:59,680 INFO Created new Tenant Tenant_38 with domain 1002
2024-05-12 12:56:59,684 INFO Response: 201
2024-05-12 12:56:59,699 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:56:59,699 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:57:00,873 INFO Created new Tenant Tenant_84 with domain 1003
2024-05-12 12:57:00,877 INFO Response: 201
2024-05-12 12:57:00,889 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:57:00,889 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:57:02,047 INFO Created new Tenant Tenant_2 with domain 1004
2024-05-12 12:57:02,052 INFO Response: 201
2024-05-12 12:57:02,085 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-12 12:57:02,087 INFO Request: POST /api/v1/manage/tenants/
2024-05-12 12:57:03,648 INFO Created new Tenant Tenant_77 with domain 1005
2024-05-12 12:57:03,674 INFO Response: 201
2024-05-13 15:35:35,182 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,197 INFO Request: POST /api/v1/network/regions/
2024-05-13 15:35:35,217 INFO Response: 201
2024-05-13 15:35:35,241 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,241 INFO Request: POST /api/v1/network/regions/
2024-05-13 15:35:35,245 INFO Response: 201
2024-05-13 15:35:35,251 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,251 INFO Request: POST /api/v1/network/regions/
2024-05-13 15:35:35,255 INFO Response: 201
2024-05-13 15:35:35,260 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,260 INFO Request: POST /api/v1/network/regions/
2024-05-13 15:35:35,264 INFO Response: 201
2024-05-13 15:35:35,269 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,269 INFO Request: POST /api/v1/network/regions/
2024-05-13 15:35:35,272 INFO Response: 201
2024-05-13 15:35:35,276 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,277 INFO Request: POST /api/v1/manage/products/
2024-05-13 15:35:35,281 INFO Response: 201
2024-05-13 15:35:35,286 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,286 INFO Request: POST /api/v1/manage/products/
2024-05-13 15:35:35,290 INFO Response: 201
2024-05-13 15:35:35,295 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,295 INFO Request: POST /api/v1/manage/products/
2024-05-13 15:35:35,299 INFO Response: 201
2024-05-13 15:35:35,305 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,306 INFO Request: POST /api/v1/manage/products/
2024-05-13 15:35:35,311 INFO Response: 201
2024-05-13 15:35:35,323 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,323 INFO Request: POST /api/v1/manage/products/
2024-05-13 15:35:35,328 INFO Response: 201
2024-05-13 15:35:35,334 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,334 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-13 15:35:35,340 INFO Response: 201
2024-05-13 15:35:35,351 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,352 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-13 15:35:35,355 INFO Response: 201
2024-05-13 15:35:35,367 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,367 INFO Request: POST /api/v1/support/ike/encrypt/
2024-05-13 15:35:35,369 INFO Response: 201
2024-05-13 15:35:35,374 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,375 INFO Request: POST /api/v1/support/ike/hash/
2024-05-13 15:35:35,377 INFO Response: 201
2024-05-13 15:35:35,383 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,384 INFO Request: POST /api/v1/support/ike/hash/
2024-05-13 15:35:35,386 INFO Response: 201
2024-05-13 15:35:35,391 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,391 INFO Request: POST /api/v1/support/ike/hash/
2024-05-13 15:35:35,394 INFO Response: 201
2024-05-13 15:35:35,401 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,401 INFO Request: POST /api/v1/support/ike/dh/
2024-05-13 15:35:35,404 INFO Response: 201
2024-05-13 15:35:35,409 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,410 INFO Request: POST /api/v1/support/ike/dh/
2024-05-13 15:35:35,412 INFO Response: 201
2024-05-13 15:35:35,424 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,425 INFO Request: POST /api/v1/support/ike/dh/
2024-05-13 15:35:35,428 INFO Response: 201
2024-05-13 15:35:35,442 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,442 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-13 15:35:35,445 INFO Response: 201
2024-05-13 15:35:35,451 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,451 INFO Request: POST /api/v1/support/ike/rpf/
2024-05-13 15:35:35,453 INFO Response: 201
2024-05-13 15:35:35,458 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,458 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-13 15:35:35,461 INFO Response: 201
2024-05-13 15:35:35,468 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,468 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-13 15:35:35,470 INFO Response: 201
2024-05-13 15:35:35,476 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,476 INFO Request: POST /api/v1/support/esp/encrypt/
2024-05-13 15:35:35,480 INFO Response: 201
2024-05-13 15:35:35,501 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,503 INFO Request: POST /api/v1/support/esp/hash/
2024-05-13 15:35:35,515 INFO Response: 201
2024-05-13 15:35:35,520 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,521 INFO Request: POST /api/v1/support/esp/hash/
2024-05-13 15:35:35,523 INFO Response: 201
2024-05-13 15:35:35,528 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,528 INFO Request: POST /api/v1/support/esp/hash/
2024-05-13 15:35:35,531 INFO Response: 201
2024-05-13 15:35:35,537 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,537 INFO Request: POST /api/v1/support/esp/dh/
2024-05-13 15:35:35,542 INFO Response: 201
2024-05-13 15:35:35,552 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,552 INFO Request: POST /api/v1/support/esp/dh/
2024-05-13 15:35:35,557 INFO Response: 201
2024-05-13 15:35:35,568 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,568 INFO Request: POST /api/v1/support/esp/dh/
2024-05-13 15:35:35,570 INFO Response: 201
2024-05-13 15:35:35,576 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,576 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-13 15:35:35,578 INFO Response: 201
2024-05-13 15:35:35,588 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,588 INFO Request: POST /api/v1/support/esp/pfs/
2024-05-13 15:35:35,592 INFO Response: 201
2024-05-13 15:35:35,603 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,603 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-13 15:35:35,607 INFO Response: 201
2024-05-13 15:35:35,611 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,612 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-13 15:35:35,615 INFO Response: 201
2024-05-13 15:35:35,620 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,620 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-13 15:35:35,622 INFO Response: 201
2024-05-13 15:35:35,636 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,637 INFO Request: POST /api/v1/support/protocols/routing/
2024-05-13 15:35:35,639 INFO Response: 201
2024-05-13 15:35:35,644 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,644 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,648 INFO Response: 201
2024-05-13 15:35:35,660 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,661 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,832 INFO Response: 201
2024-05-13 15:35:35,840 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,841 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,843 INFO Response: 201
2024-05-13 15:35:35,850 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,850 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,854 INFO Response: 201
2024-05-13 15:35:35,860 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,861 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,863 INFO Response: 201
2024-05-13 15:35:35,870 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,870 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,915 INFO Response: 201
2024-05-13 15:35:35,921 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,921 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,923 INFO Response: 201
2024-05-13 15:35:35,928 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,928 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,931 INFO Response: 201
2024-05-13 15:35:35,955 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,955 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,962 INFO Response: 201
2024-05-13 15:35:35,972 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,974 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,977 INFO Response: 201
2024-05-13 15:35:35,985 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,985 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,989 INFO Response: 201
2024-05-13 15:35:35,996 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:35,996 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:35,999 INFO Response: 201
2024-05-13 15:35:36,008 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,009 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:36,012 INFO Response: 201
2024-05-13 15:35:36,021 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,021 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:36,024 INFO Response: 201
2024-05-13 15:35:36,033 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,033 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:36,036 INFO Response: 201
2024-05-13 15:35:36,043 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,043 INFO Request: POST /api/v1/support/interfaces/roles/
2024-05-13 15:35:36,045 INFO Response: 201
2024-05-13 15:35:36,052 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,052 INFO Request: POST /api/v1/support/devices/models/
2024-05-13 15:35:36,056 INFO Response: 201
2024-05-13 15:35:36,062 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,063 INFO Request: POST /api/v1/support/devices/models/
2024-05-13 15:35:36,066 INFO Response: 201
2024-05-13 15:35:36,070 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,070 INFO Request: POST /api/v1/support/devices/models/
2024-05-13 15:35:36,074 INFO Response: 201
2024-05-13 15:35:36,082 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,082 INFO Request: POST /api/v1/support/vrf/role/
2024-05-13 15:35:36,086 INFO Response: 201
2024-05-13 15:35:36,093 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,094 INFO Request: POST /api/v1/support/vrf/role/
2024-05-13 15:35:36,097 INFO Response: 201
2024-05-13 15:35:36,105 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,105 INFO Request: POST /api/v1/support/vrf/role/
2024-05-13 15:35:36,109 INFO Response: 201
2024-05-13 15:35:36,123 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,123 INFO Request: POST /api/v1/support/vrf/role/
2024-05-13 15:35:36,126 INFO Response: 201
2024-05-13 15:35:36,136 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,136 INFO Request: POST /api/v1/support/vrf/role/
2024-05-13 15:35:36,140 INFO Response: 201
2024-05-13 15:35:36,150 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,150 INFO Request: POST /api/v1/support/vrf/role/
2024-05-13 15:35:36,153 INFO Response: 201
2024-05-13 15:35:36,162 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,162 INFO Request: POST /api/v1/support/vrf/role/
2024-05-13 15:35:36,166 INFO Response: 201
2024-05-13 15:35:36,174 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,174 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-13 15:35:36,178 INFO Response: 201
2024-05-13 15:35:36,192 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,192 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-13 15:35:36,202 INFO Response: 201
2024-05-13 15:35:36,215 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,219 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-13 15:35:36,235 INFO Response: 201
2024-05-13 15:35:36,244 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,244 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-13 15:35:36,250 INFO Response: 201
2024-05-13 15:35:36,268 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,268 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-13 15:35:36,279 INFO Response: 201
2024-05-13 15:35:36,351 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:35:36,351 INFO Request: POST /api/v1/support/lacp/hash/
2024-05-13 15:35:36,354 INFO Response: 201
2024-05-13 15:44:49,470 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:44:49,470 INFO Request: GET /api/v1/tenants/1001/snapshots/
2024-05-13 15:44:49,477 INFO Response: 404
2024-05-13 15:45:29,501 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:45:29,501 INFO Request: GET /api/v1/3/snapshots/
2024-05-13 15:45:29,506 INFO Response: 404
2024-05-13 15:45:44,735 INFO JWT decoded successfully with user_id: amir@deltasase.com and user_role: None
2024-05-13 15:45:44,735 INFO Request: GET /api/v1/tenants/3/snapshots/
2024-05-13 15:45:44,743 INFO Response: 404
2024-05-13 15:50:16,211 INFO /root/delta_api/delta_sase/base/urls.py changed, reloading.
2024-05-13 15:50:16,618 INFO Watching for file changes with StatReloader
2024-05-13 15:52:17,842 INFO /root/delta_api/delta_sase/base/urls.py changed, reloading.
2024-05-13 15:52:18,129 INFO Watching for file changes with StatReloader

#####end /root/delta_api/delta_sase/debug.log#####
______________________________
#####start /root/delta_api/delta_sase/README.md#####
# delta-api
#####end /root/delta_api/delta_sase/README.md#####
______________________________
#####start /root/delta_api/delta_sase/manage.py#####
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'delta_sase.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

#####end /root/delta_api/delta_sase/manage.py#####
______________________________
#####start /root/delta_api/delta_sase/base/apps.py#####
from django.apps import AppConfig


class BaseConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'base'

#####end /root/delta_api/delta_sase/base/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/base/__init__.py#####

#####end /root/delta_api/delta_sase/base/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/base/serializers.py#####
# base/serializers.py
from rest_framework import serializers
from .models import Tag, AvailableOverlayIP, BaseModel, CandidateConfig, SnapshotConfig, TenantSetting
from django.core.exceptions import ValidationError
import logging

logger = logging.getLogger(__name__)

class TagSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tag
        fields = ['key', 'value']

class ErrorHandlingMixin:
    def is_valid(self, raise_exception=False):
        try:
            super().is_valid(raise_exception=True)
        except ValidationError as e:
            logger.error(f"Validation error: {e.detail}")
            raise ValidationError({'error': 'Validation failed', 'details': e.detail})

class BaseModelSerializer(ErrorHandlingMixin, serializers.ModelSerializer):
    tags = TagSerializer(many=True)
    object_id = serializers.CharField(read_only=True) 
    uuid = serializers.CharField(read_only=True) 
    created_by = serializers.CharField(read_only=True)
    modified_by = serializers.CharField(read_only=True)
    created_at = serializers.DateTimeField(read_only=True)  # Ensure created_at is read-only
    modified_at = serializers.DateTimeField(read_only=True)  # Ensure modified_at is read-only

    class Meta:
        model = BaseModel
        exclude = ['id']
        read_only_fields = ['uuid', 'object_id', 'created_at', 'modified_at', 'modified_by', 'created_by']    

    def create(self, validated_data):
        tags_data = validated_data.pop('tags', [])
        instance = super().create(validated_data)
        self.update_or_create_tags(instance, tags_data)
        return instance

    def update(self, instance, validated_data):
        tags_data = validated_data.pop('tags', [])
        instance = super().update(instance, validated_data)
        self.update_or_create_tags(instance, tags_data)
        return instance

    def update_or_create_tags(self, instance, tags_data):
        instance.tags.clear()
        for tag_data in tags_data:
            tag, created = Tag.objects.get_or_create(
                key=tag_data['key'],
                defaults={'value': tag_data['value']}
            )
            instance.tags.add(tag)

class AvailableOverlayIPSerializer(serializers.ModelSerializer):
    class Meta:
        model = AvailableOverlayIP
        fields = '__all__'

class CandidateConfigSerializer(BaseModelSerializer):
    class Meta:
        model = CandidateConfig
        # exclude = ['id']

class SnapshotConfigSerializer(BaseModelSerializer):
    class Meta:
        model = SnapshotConfig
        # exclude = ['id']

# class AddressSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = Address
#         # exclude = ['id']

# class ContactSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = Contact
#         # exclude = ['id']

class SettingSerializer(serializers.ModelSerializer):
    class Meta:
        model = TenantSetting
        # exclude = ['id']

class TenantSettingSerializer(serializers.ModelSerializer):
    class Meta:
        model = TenantSetting
        fields = ['key', 'value']
        
#####end /root/delta_api/delta_sase/base/serializers.py#####
______________________________
#####start /root/delta_api/delta_sase/base/views.py#####
# base/views.py
from rest_framework import viewsets
from .models import AvailableOverlayIP, BaseModel, CandidateConfig, SnapshotConfig, TenantSetting
from .serializers import AvailableOverlayIPSerializer, BaseModelSerializer, CandidateConfigSerializer, SnapshotConfigSerializer, TenantSettingSerializer
from rest_framework.exceptions import APIException, ValidationError as DRFValidationError
from rest_framework import status
import logging

logger = logging.getLogger(__name__)

class BaseModelViewSet(viewsets.ModelViewSet):
    """
    A base viewset that provides default 'create', 'retrieve', 'update', 'partial_update', 'destroy'
    and 'list' actions for models inheriting from BaseModel.
    """
    # serializer_class = BaseModelSerializer
    # queryset = BaseModel.objects.all()

    def perform_create(self, serializer):
        try:
            serializer.save(created_by=self.request.user_id, modified_by=self.request.user_id)
        except Exception as e:  # Consider specifying the exception type if possible
            logger.error(f"Error during object creation: {str(e)}")
            raise APIException({'error': 'Error during creation', 'details': str(e)})

    def perform_update(self, serializer):
        try:
            serializer.save(modified_by=self.request.user_id)
        except Exception as e:  # Consider specifying the exception type if possible
            logger.error(f"Error during object update: {str(e)}")
            raise APIException({'error': 'Error during update', 'details': str(e)})

    def destroy(self, request, *args, **kwargs):
        try:
            return super(BaseModelViewSet, self).destroy(request, *args, **kwargs)
        except Exception as e:  # Consider specifying the exception type if possible
            logger.error(f"Error during object deletion: {str(e)}")
            raise APIException({'error': 'Error during deletion', 'details': str(e)})

class AvailableOverlayIPViewSet(viewsets.ModelViewSet):
    queryset = AvailableOverlayIP.objects.all()
    serializer_class = AvailableOverlayIPSerializer

class CandidateConfigViewSet(BaseModelViewSet):
    queryset = CandidateConfig.objects.all()
    serializer_class = CandidateConfigSerializer

class SnapshotConfigViewSet(BaseModelViewSet):
    queryset = SnapshotConfig.objects.all()
    serializer_class = SnapshotConfigSerializer

class TenantSettingViewSet(viewsets.ModelViewSet):
    queryset = TenantSetting.objects.all()
    serializer_class = TenantSettingSerializer

    def create(self, request, *args, **kwargs):
        key = request.data.get('key')
        if TenantSetting.objects.filter(key=key).exists():
            return Response({'error': 'Key already exists.'}, status=status.HTTP_400_BAD_REQUEST)
        return super(TenantSettingViewSet, self).create(request, *args, **kwargs)
#####end /root/delta_api/delta_sase/base/views.py#####
______________________________
#####start /root/delta_api/delta_sase/base/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/base/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/base/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/base/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/base/models.py#####
# base/models.py
from django.db import models
from django.db.models import JSONField
import uuid
import time
import random
from threading import Lock
from django.core.exceptions import ValidationError 
from polymorphic.models import PolymorphicModel, PolymorphicManager
import os
import logging

logger = logging.getLogger(__name__)

MACHINE_ID = os.environ.get('MACHINE_ID', '')

OBJECT_TYPE_CODES = {
    'BaseModel': '00000',  # Override in subclasses with specific codes
    'ooo': '00001',
}

def generate_unique_id(object_type):
    object_prefix = OBJECT_TYPE_CODES.get(object_type, '00000')
    current_timestamp = int(time.time() * 1000)
    sequence_number = random.randint(0, 99)
    unique_id = f"{object_prefix}{current_timestamp:010}{MACHINE_ID}{sequence_number:02}"
    return unique_id[:17]

class Tag(models.Model):
    key = models.CharField(max_length=100, unique=True)
    value = models.JSONField()

    class Meta:
        indexes = [
            models.Index(fields=['key']),
        ]

    def __str__(self):
        return f"{self.key}: {self.value}"
        
class BaseModel(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.CharField(max_length=100, null=True, blank=True)
    modified_at = models.DateTimeField(auto_now=True)
    modified_by = models.CharField(max_length=100, null=True, blank=True)
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True, )
    tags = models.ManyToManyField(Tag, blank=True, related_name="%(class)s_tags")
    object_id = models.CharField(max_length=16, unique=True, editable=False, db_index=True)

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        if not self.pk:  # Object is being created
            self.created_by = user_id
        self.modified_by = user_id
        if self.tags.count() > 5:
            raise ValidationError("Maximum number of tags exceeded (5 tags allowed).")
        if not self.object_id:
            # Using the class name as the object type for ID generation
            self.object_id = generate_unique_id(self.__class__.__name__)
        super().save(*args, **kwargs)

class BasePolymorphic(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.CharField(max_length=100, null=True, blank=True)
    modified_at = models.DateTimeField(auto_now=True)
    modified_by = models.CharField(max_length=100, null=True, blank=True)
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True, )
    tags = models.ManyToManyField(Tag, blank=True, related_name="%(class)s_tags")
    object_id = models.CharField(max_length=16, unique=True, editable=False, db_index=True)
    objects = PolymorphicManager()

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        if not self.pk:  # Object is being created
            self.created_by = user_id
        self.modified_by = user_id
        if self.tags.count() > 5:
            raise ValidationError("Maximum number of tags exceeded (5 tags allowed).")
        if not self.object_id:
            # Using the class name as the object type for ID generation
            self.object_id = generate_unique_id(self.__class__.__name__)
        super().save(*args, **kwargs)

class AvailableOverlayIP(models.Model):
    address=models.GenericIPAddressField(protocol='ipv4', unique=True, primary_key=True)

class CandidateConfig(BaseModel):
    committed_at = models.DateTimeField(null=True, blank=True, db_index=True)
    committed_by = models.CharField(max_length=100, null=True, blank=True)
    committed = models.BooleanField(default=False)
    base_config = JSONField()
    config_changes = JSONField()

class SnapshotConfig(BaseModel):
    name = models.CharField(max_length=255)
    path = models.CharField(max_length=255)
    config = JSONField()

# class Address(models.Model):
#     street1 = models.CharField(max_length=255, verbose_name="Street Line 1", blank=True, null=True)
#     street2 = models.CharField(max_length=255, verbose_name="Street Line 2", blank=True, null=True)
#     city = models.CharField(max_length=100)
#     region = models.CharField(max_length=100, verbose_name="State/Province/Region")
#     postal_code = models.CharField(max_length=20, verbose_name="Postal/ZIP Code")
#     country = models.CharField(max_length=100)
#     latitude = models.FloatField(null=True, blank=True, help_text="Latitude")
#     longitude = models.FloatField(null=True, blank=True, help_text="Longitude")

#     def __str__(self):
#         return f"{self.street1}, {self.city}, {self.region}, {self.postal_code}, {self.country}"

# class Contact(models.Model):
#     name = models.CharField(max_length=255, verbose_name="Full Name",db_index=True)
#     phone1 = models.CharField(max_length=20, verbose_name="Primary Phone Number", blank=True, null=True)
#     phone2 = models.CharField(max_length=20, verbose_name="Secondary Phone Number", blank=True, null=True)
#     email = models.EmailField(verbose_name="Email Address", blank=True, null=True)
#     url = models.URLField(verbose_name="Website URL", blank=True, null=True)

#     def __str__(self):
#         return self.name

class TenantSetting(models.Model):
    key = models.CharField(max_length=100, primary_key=True, unique=True, db_index=True)
    value = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.key}: {self.value}"

#####end /root/delta_api/delta_sase/base/models.py#####
______________________________
#####start /root/delta_api/delta_sase/base/urls.py#####
#base.urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import  CandidateConfigViewSet, SnapshotConfigViewSet, TenantSettingViewSet

router = DefaultRouter()
router.register(r'candidate', CandidateConfigViewSet)
router.register(r'snapshot', SnapshotConfigViewSet)
router.register(r'settings', TenantSettingViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

#####end /root/delta_api/delta_sase/base/urls.py#####
______________________________
#####start /root/delta_api/delta_sase/base/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/base/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/base/migrations/0001_initial.py#####
# Generated by Django 5.0.6 on 2024-05-12 12:25

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AvailableOverlayIP',
            fields=[
                ('address', models.GenericIPAddressField(primary_key=True, protocol='ipv4', serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TenantSetting',
            fields=[
                ('key', models.CharField(db_index=True, max_length=100, primary_key=True, serialize=False, unique=True)),
                ('value', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.JSONField()),
            ],
            options={
                'indexes': [models.Index(fields=['key'], name='base_tag_key_1f2c48_idx')],
            },
        ),
        migrations.CreateModel(
            name='SnapshotConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255)),
                ('config', models.JSONField()),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CandidateConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('committed_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('committed_by', models.CharField(blank=True, max_length=100, null=True)),
                ('committed', models.BooleanField(default=False)),
                ('base_config', models.JSONField()),
                ('config_changes', models.JSONField()),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

#####end /root/delta_api/delta_sase/base/migrations/0001_initial.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_security_app/apps.py#####
from django.apps import AppConfig


class StandardsSecurityAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'standards_security_app'

#####end /root/delta_api/delta_sase/standards_security_app/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_security_app/__init__.py#####

#####end /root/delta_api/delta_sase/standards_security_app/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_security_app/views.py#####
from django.shortcuts import render

# Create your views here.

#####end /root/delta_api/delta_sase/standards_security_app/views.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_security_app/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/standards_security_app/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_security_app/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/standards_security_app/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_security_app/models.py#####
# standards_security_app/models.py
from django.db import models
from django.utils import timezone
from django.contrib.postgres.fields import JSONField
import uuid
from django.contrib.postgres.fields import ArrayField
from django.utils import timezone
from django.utils.deprecation import MiddlewareMixin
from django.core.exceptions import ValidationError 
from django.core.validators import MaxValueValidator
from resources_app.models import Certificate ,DNSServer

import logging

logger = logging.getLogger(__name__)

class SecStandardTag(models.Model):
    key = models.CharField(max_length=100, unique=True)
    value = models.JSONField(default=dict)

    class Meta:
        indexes = [
            models.Index(fields=['key']),
        ]

    def __str__(self):
        return f"{self.key}: {self.value}"
        
class SecStandardBase(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(verbose_name="Description", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.CharField(max_length=100, null=True, blank=True)
    modified_at = models.DateTimeField(auto_now=True)
    modified_by = models.CharField(max_length=100, null=True, blank=True)
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    tags = models.ManyToManyField(SecStandardTag, blank=True, related_name="%(class)s_tags")
    detail = JSONField(default=dict)
    enabled = models.BooleanField(default=True)
    logging = models.BooleanField(default=False)

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        if not self.pk:  # Object is being created
            self.created_by = user_id
        self.modified_by = user_id
        if self.tags.count() > 5:
            raise ValidationError("Maximum number of tags exceeded (5 tags allowed).")
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        self.deleted_at = timezone.now()
        self.deleted_by = user_id
        super().delete(*args, **kwargs)

class AntivirusStandard(SecStandardBase):
    description = models.TextField(blank=True, null=True)
        # Scan settings
    scan_on_access = models.BooleanField(default=True)
    scan_on_write = models.BooleanField(default=True)
    scan_on_read = models.BooleanField(default=True)
       # Threat handling
    block_threats = models.BooleanField(default=True)
    quarantine_infected_files = models.BooleanField(default=True)
    # Update settings
    update_signatures_automatically = models.BooleanField(default=True)
    # Logging
    log_all_scanned_traffic = models.BooleanField(default=True)
    log_block_actions = models.BooleanField(default=True)

    def __str__(self):
        return self.name

class DLPStandard(SecStandardBase):    # Basic profile information
    enable_monitoring = models.BooleanField(default=True)
    enable_prevention = models.BooleanField(default=True)
    content_inspection_data_types = ArrayField(models.CharField(max_length=100), blank=True)

    network_protection_protocols = ArrayField(models.CharField(max_length=10), blank=True)
    inspect_encrypted_traffic = models.BooleanField(default=True)
    endpoint_protection_monitor_clipboard = models.BooleanField(default=True)
    endpoint_protection_block_transfers = ArrayField(models.CharField(max_length=50), blank=True)
    storage_protection_cloud_storage = ArrayField(models.CharField(max_length=100), blank=True)
    storage_protection_actions = ArrayField(models.CharField(max_length=50), blank=True)


    def __str__(self):
        return self.name

class DLPContentInspect(models.Model):
    dlp_standard = models.ForeignKey(DLPStandard, on_delete=models.CASCADE)
    deep_inspection = models.BooleanField(default=True)
    actions = ArrayField(models.CharField(max_length=50), blank=True)
    exceptions = JSONField(default=dict, blank=True, null=True)

class DLPNetworkProtection(models.Model):
    dlp_standard = models.ForeignKey(DLPStandard, on_delete=models.CASCADE)
    protocols = ArrayField(models.CharField(max_length=10), blank=True)
    inspection_encrypted_traffic = models.BooleanField(default=True)
    actions = ArrayField(models.CharField(max_length=50), blank=True)
    exceptions = JSONField(default=dict, blank=True, null=True)

class DLPEndPointProtection(models.Model):
    dlp_standard = models.ForeignKey(DLPStandard, on_delete=models.CASCADE)
    monitor_clipboard = models.BooleanField(default=True)
    block_transfers = ArrayField(models.CharField(max_length=50), blank=True)
    actions = ArrayField(models.CharField(max_length=50), blank=True)
    exceptions = JSONField(default=dict, blank=True, null=True)

class DLPStorageProtection(models.Model):
    dlp_standard = models.ForeignKey(DLPStandard, on_delete=models.CASCADE)
    cloud_storage = ArrayField(models.CharField(max_length=100), blank=True)
    actions = ArrayField(models.CharField(max_length=50), blank=True)
    exceptions = JSONField(default=dict, blank=True, null=True)
#####end /root/delta_api/delta_sase/standards_security_app/models.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_security_app/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/standards_security_app/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/apps.py#####
from django.apps import AppConfig


class ResourcesAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'resources_app'

#####end /root/delta_api/delta_sase/resources_app/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/__init__.py#####

#####end /root/delta_api/delta_sase/resources_app/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/serializers.py#####
# resources_app/serializers.py
from rest_framework import serializers
from .models import ResourceBase, Certificate, CACertificate, SSLCertificate, SSHCertificate, CustomCertificate, ServiceProvider, Transport, VRF, MachineGroup, Machine, DSNDevice, Server, CustomServer, SyslogServer, NTPServer, DNSServer, LDAPServer, RADIUSServer, FileServer, WebServer, ActiveDirectoryServer, AzureADServer, IdPServer, IPFixCollector
from base.serializers import BaseModelSerializer

class ResourceBaseSerializer(BaseModelSerializer):
    class Meta:
        model = ResourceBase

class CertificateSerializer(ResourceBaseSerializer):
    class Meta:
        model = Certificate

class CACertificateSerializer(CertificateSerializer):
    class Meta:
        model = CACertificate

class SSLCertificateSerializer(CertificateSerializer):
    class Meta:
        model = SSLCertificate

class SSHCertificateSerializer(CertificateSerializer):
    class Meta:
        model = SSHCertificate

class CustomCertificateSerializer(CertificateSerializer):
    class Meta:
        model = CustomCertificate

class ServiceProviderSerializer(ResourceBaseSerializer):
    class Meta:
        model = ServiceProvider

class TransportSerializer(ResourceBaseSerializer):
    class Meta:
        model = Transport

class VRFSerializer(ResourceBaseSerializer):
    class Meta:
        model = VRF

class MachineGroupSerializer(ResourceBaseSerializer):
    class Meta:
        model = MachineGroup

class MachineSerializer(ResourceBaseSerializer):
    class Meta:
        model = Machine

class DSNDeviceSerializer(ResourceBaseSerializer):
    class Meta:
        model = DSNDevice

class ServerSerializer(ResourceBaseSerializer):
    class Meta:
        model = Server

class CustomServerSerializer(ServerSerializer):
    class Meta:
        model = CustomServer

class SyslogServerSerializer(ServerSerializer):
    class Meta:
        model = SyslogServer

class NTPServerSerializer(ServerSerializer):
    class Meta:
        model = NTPServer

class DNSServerSerializer(ServerSerializer):
    class Meta:
        model = DNSServer

class LDAPServerSerializer(ServerSerializer):
    class Meta:
        model = LDAPServer

class RADIUSServerSerializer(ServerSerializer):
    class Meta:
        model = RADIUSServer

class FileServerSerializer(ServerSerializer):
    class Meta:
        model = FileServer

class WebServerSerializer(ServerSerializer):
    class Meta:
        model = WebServer

class ActiveDirectoryServerSerializer(ServerSerializer):
    class Meta:
        model = ActiveDirectoryServer

class AzureADServerSerializer(ServerSerializer):
    class Meta:
        model = AzureADServer

class IdPServerSerializer(ServerSerializer):
    class Meta:
        model = IdPServer

class IPFixCollectorSerializer(ServerSerializer):
    class Meta:
        model = IPFixCollector

#####end /root/delta_api/delta_sase/resources_app/serializers.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/views.py#####
# resources_app/views.py
from rest_framework import viewsets
from .models import CACertificate, SSLCertificate, SSHCertificate, CustomCertificate, ServiceProvider, Transport, VRF, MachineGroup, Machine, DSNDevice, Server, CustomServer, SyslogServer, NTPServer, DNSServer, LDAPServer, RADIUSServer, FileServer, WebServer, ActiveDirectoryServer, AzureADServer, IdPServer, IPFixCollector
from .serializers import CACertificateSerializer, SSLCertificateSerializer, SSHCertificateSerializer, CustomCertificateSerializer, ServiceProviderSerializer, TransportSerializer, VRFSerializer, MachineGroupSerializer, MachineSerializer, DSNDeviceSerializer, ServerSerializer, CustomServerSerializer, SyslogServerSerializer, NTPServerSerializer, DNSServerSerializer, LDAPServerSerializer, RADIUSServerSerializer, FileServerSerializer, WebServerSerializer, ActiveDirectoryServerSerializer, AzureADServerSerializer, IdPServerSerializer, IPFixCollectorSerializer
from base.views import BaseModelViewSet

class CACertificateViewSet(BaseModelViewSet):
    queryset = CACertificate.objects.all()
    serializer_class = CACertificateSerializer

class SSLCertificateViewSet(BaseModelViewSet):
    queryset = SSLCertificate.objects.all()
    serializer_class = SSLCertificateSerializer

class SSHCertificateViewSet(BaseModelViewSet):
    queryset = SSHCertificate.objects.all()
    serializer_class = SSHCertificateSerializer

class CustomCertificateViewSet(BaseModelViewSet):
    queryset = CustomCertificate.objects.all()
    serializer_class = CustomCertificateSerializer

class ServiceProviderViewSet(BaseModelViewSet):
    queryset = ServiceProvider.objects.all()
    serializer_class = ServiceProviderSerializer

class TransportViewSet(BaseModelViewSet):
    queryset = Transport.objects.all()
    serializer_class = TransportSerializer

class VRFViewSet(BaseModelViewSet):
    queryset = VRF.objects.all()
    serializer_class = VRFSerializer

class MachineGroupViewSet(BaseModelViewSet):
    queryset = MachineGroup.objects.all()
    serializer_class = MachineGroupSerializer

class MachineViewSet(BaseModelViewSet):
    queryset = Machine.objects.all()
    serializer_class = MachineSerializer

class DSNDeviceViewSet(BaseModelViewSet):
    queryset = DSNDevice.objects.all()
    serializer_class = DSNDeviceSerializer

class ServerViewSet(BaseModelViewSet):
    queryset = Server.objects.all()
    serializer_class = ServerSerializer

class CustomServerViewSet(BaseModelViewSet):
    queryset = CustomServer.objects.all()
    serializer_class = CustomServerSerializer

class SyslogServerViewSet(BaseModelViewSet):
    queryset = SyslogServer.objects.all()
    serializer_class = SyslogServerSerializer

class NTPServerViewSet(BaseModelViewSet):
    queryset = NTPServer.objects.all()
    serializer_class = NTPServerSerializer

class DNSServerViewSet(BaseModelViewSet):
    queryset = DNSServer.objects.all()
    serializer_class = DNSServerSerializer

class LDAPServerViewSet(BaseModelViewSet):
    queryset = LDAPServer.objects.all()
    serializer_class = LDAPServerSerializer

class RADIUSServerViewSet(BaseModelViewSet):
    queryset = RADIUSServer.objects.all()
    serializer_class = RADIUSServerSerializer

class FileServerViewSet(BaseModelViewSet):
    queryset = FileServer.objects.all()
    serializer_class = FileServerSerializer

class WebServerViewSet(BaseModelViewSet):
    queryset = WebServer.objects.all()
    serializer_class = WebServerSerializer

class ActiveDirectoryServerViewSet(BaseModelViewSet):
    queryset = ActiveDirectoryServer.objects.all()
    serializer_class = ActiveDirectoryServerSerializer

class AzureADServerViewSet(BaseModelViewSet):
    queryset = AzureADServer.objects.all()
    serializer_class = AzureADServerSerializer


#####end /root/delta_api/delta_sase/resources_app/views.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/resources_app/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/resources_app/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/models.py#####
# reserces_app/models.py
from django.db import models
from django.db.models import JSONField
# from django.contrib.postgres.fields import JSONField
from polymorphic.models import PolymorphicModel
import logging
from base.models import BaseModel, BasePolymorphic

logger = logging.getLogger(__name__)
        
class ResourceBase(BaseModel):
    name = models.CharField(max_length=255)
    description = models.TextField(verbose_name="Description", blank=True, null=True)
    detail = JSONField()

    class Meta:
        abstract = True

class Certificate(ResourceBase):
    certificate_type = models.CharField(max_length=100)
    valid_from = models.DateTimeField()
    valid_to = models.DateTimeField()
    certificate_url = models.URLField()
    private_key_url = models.URLField()  # URL to the vault location

    class Meta:
        abstract = True

class CACertificate(Certificate):
    issuer = models.CharField(max_length=255)
    subject = models.CharField(max_length=255)
    ca_bundle_url = models.URLField(blank=True, null=True)  # Optional CA bundle URL
    is_root_ca = models.BooleanField(default=False)  # Flag to identify if this is a Root CA
    type = models.CharField(max_length=20, default='ca', editable=False)
    signing_policies = models.TextField() 

class SSLCertificate(Certificate):
    issuer = models.CharField(max_length=255)
    subject = models.CharField(max_length=255)
    ca_bundle_url = models.URLField(blank=True, null=True)
    type = models.CharField(max_length=20, default='ssl', editable=False)

class SSHCertificate(Certificate):
    authorized_keys = models.TextField()
    type = models.CharField(max_length=50, default='ssh', editable=False)

class CustomCertificate(Certificate):
    custom_field = models.CharField(max_length=255)
    custom_data = models.JSONField()
    type = models.CharField(max_length=50, default='custom', editable=False)

class ServiceProvider(ResourceBase):

    def __str__(self):
        return self.name

class Transport(ResourceBase):

    def __str__(self):
        return self.name

class VRF(ResourceBase):

    def __str__(self):
        return self.name

class MachineGroup(ResourceBase):
    compliance = models.CharField(max_length=255, verbose_name="Compliance Standard")

    def __str__(self):
        return self.name
    
class Machine(ResourceBase):
    DEVICE_TYPE_CHOICES = [
        ('laptop', 'Laptop'),
        ('phone', 'Phone'),
        ('tablet', 'Tablet'),
        ('network', 'Network Device'),
        ('other', 'Other')
    ]
    OS_CHOICES = [
        ('windows', 'Windows'),
        ('linux', 'Linux'),
        ('mac_os', 'Mac OS'),
        ('ios', 'iOS'),
        ('android', 'Android')
    ]

    device_group = models.ForeignKey('MachineGroup', on_delete=models.CASCADE, related_name='devices_device_group')
    type = models.CharField(max_length=50, choices=DEVICE_TYPE_CHOICES)
    vendor = models.CharField(max_length=255)
    model = models.CharField(max_length=255)
    os = models.CharField(max_length=50, choices=OS_CHOICES)
    serial_number = models.CharField(max_length=255)
    certificate = models.URLField()
    trusted_ca = models.URLField()
    admins = models.JSONField()
    users = models.JSONField()

    def __str__(self):
        return self.name
    
class DSNDevice(ResourceBase):
    vendor = models.CharField(max_length=255)
    model = models.CharField(max_length=255)
    software = models.CharField(max_length=255, verbose_name="Software Version")
    serial_number = models.CharField(max_length=255)
    certificate = models.URLField()
    trusted_ca = models.URLField()
    descriptions = models.TextField(blank=True, null=True)
    registered = models.BooleanField(default=False)
    active = models.BooleanField(default=False)
    def __str__(self):
        return self.name

class Server(BasePolymorphic):
    address = models.CharField(max_length=100)
    fqdn = models.CharField(max_length=255)
    tls_enabled = models.BooleanField(default=False)
    tls_certificate = models.CharField(max_length=100, blank=True, null=True)
    tls_key = models.CharField(max_length=100, blank=True, null=True)
    ca_certificate = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return self.name

class CustomServer(Server):
    type = models.CharField(max_length=50, default='custom', editable=False)
    custom_data = JSONField()

    def save(self, *args, **kwargs):
        self.type = 'custom'
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

class SyslogServer(Server):
    port = models.IntegerField()
    transport_protocol = models.CharField(max_length=10)

    def save(self, *args, **kwargs):
        self.type = 'syslog'
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

class NTPServer(Server):
    version = models.IntegerField()
    auth_key = models.CharField(max_length=100, blank=True, null=True)
    max_poll = models.IntegerField()
    min_poll = models.IntegerField()

    def save(self, *args, **kwargs):
        self.type = 'ntp'
        super().save(*args, **kwargs)

    def __str__(self):
        return self.address

class DNSServer(Server):
    dnssec_active = models.BooleanField(default=False)
    unsigned_check = models.BooleanField(default=False)
    timecheck = models.BooleanField(default=False)
    dnssec_class = models.CharField(max_length=50, blank=True, null=True)
    key_tag = models.CharField(max_length=50, blank=True, null=True)
    algorithm = models.CharField(max_length=50, blank=True, null=True)
    digest_type = models.CharField(max_length=10, blank=True, null=True)
    digest = models.CharField(max_length=255, blank=True, null=True)
    public_key = models.CharField(max_length=255, blank=True, null=True)

    def save(self, *args, **kwargs):
        self.type = 'dns'
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

class LDAPServer(Server):
    base_dn = models.CharField(max_length=255)
    port = models.IntegerField(default=389)
    use_ssl = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        self.type = 'ldap'
        super().save(*args, **kwargs)

class RADIUSServer(Server):
    secret = models.CharField(max_length=255)
    auth_port = models.IntegerField(default=1812)
    acct_port = models.IntegerField(default=1813)

    def save(self, *args, **kwargs):
        self.type = 'radius'
        super().save(*args, **kwargs)

class FileServer(Server):
    storage_capacity = models.CharField(max_length=255)
    protocol = models.CharField(max_length=255)

    def save(self, *args, **kwargs):
        self.type = 'file'
        super().save(*args, **kwargs)

class WebServer(Server):
    technology = models.CharField(max_length=100)

    def save(self, *args, **kwargs):
        self.type = 'web'
        super().save(*args, **kwargs)

class ActiveDirectoryServer(Server):
    domain = models.CharField(max_length=255)

    def save(self, *args, **kwargs):
        self.type = 'ad'
        super().save(*args, **kwargs)

class AzureADServer(Server):
    tenant_id = models.CharField(max_length=255)
    client_id = models.CharField(max_length=255)
    client_secret = models.CharField(max_length=255)
    redirect_uri = models.URLField(max_length=1024, blank=True, null=True)
    domain = models.CharField(max_length=255)

    def save(self, *args, **kwargs):
        self.type = 'azure_ad'
        super().save(*args, **kwargs)

class IdPServer(Server):
    entity_id = models.CharField(max_length=255)
    sso_url = models.URLField(max_length=1024, blank=True, null=True)
    slo_url = models.URLField(max_length=1024, blank=True, null=True)
    public_cert = models.TextField(blank=True, null=True)
    private_key = models.TextField(blank=True, null=True)
    metadata_url = models.URLField(max_length=1024, blank=True, null=True)
    api_key = models.CharField(max_length=255, blank=True, null=True)

    def save(self, *args, **kwargs):
        self.type = 'idp'
        super().save(*args, **kwargs)

class IPFixCollector(Server):
    protocol = models.IntegerField()
    port = models.IntegerField()

    def save(self, *args, **kwargs):
        self.type = 'collector'
        super().save(*args, **kwargs)
#####end /root/delta_api/delta_sase/resources_app/models.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/urls.py#####
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import (
    SSLCertificateViewSet, SSHCertificateViewSet, CustomCertificateViewSet,
    ServiceProviderViewSet, TransportViewSet, VRFViewSet, MachineGroupViewSet,
    MachineViewSet, DSNDeviceViewSet, ServerViewSet, CustomServerViewSet,
    SyslogServerViewSet, NTPServerViewSet, DNSServerViewSet, LDAPServerViewSet,
    RADIUSServerViewSet, FileServerViewSet, WebServerViewSet,
    ActiveDirectoryServerViewSet, AzureADServerViewSet, CACertificateViewSet
)

# Create a router and register our viewsets with it.
router = DefaultRouter()
router.register(r'certificates/cacertificates', CACertificateViewSet)
router.register(r'certificates/sslcertificates', SSLCertificateViewSet)
router.register(r'certificates/sshcertificates', SSHCertificateViewSet)
router.register(r'certificates/customcertificates', CustomCertificateViewSet)
router.register(r'serviceproviders', ServiceProviderViewSet)
router.register(r'transports', TransportViewSet)
router.register(r'vrfs', VRFViewSet)
router.register(r'machinegroups', MachineGroupViewSet)
router.register(r'machines', MachineViewSet)
router.register(r'dsndevices', DSNDeviceViewSet)
router.register(r'servers', ServerViewSet)
router.register(r'customservers', CustomServerViewSet)
router.register(r'syslogservers', SyslogServerViewSet)
router.register(r'ntpservers', NTPServerViewSet)
router.register(r'dnsservers', DNSServerViewSet)
router.register(r'ldapservers', LDAPServerViewSet)
router.register(r'radiusservers', RADIUSServerViewSet)
router.register(r'fileservers', FileServerViewSet)
router.register(r'webservers', WebServerViewSet)
router.register(r'activedirectoryservers', ActiveDirectoryServerViewSet)
router.register(r'azureadservers', AzureADServerViewSet)

# The API URLs are now determined automatically by the router.
urlpatterns = [
    path('', include(router.urls)),
]

#####end /root/delta_api/delta_sase/resources_app/urls.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/resources_app/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/resources_app/migrations/0001_initial.py#####
# Generated by Django 5.0.6 on 2024-05-12 12:25

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('address', models.CharField(max_length=100)),
                ('fqdn', models.CharField(max_length=255)),
                ('tls_enabled', models.BooleanField(default=False)),
                ('tls_certificate', models.CharField(blank=True, max_length=100, null=True)),
                ('tls_key', models.CharField(blank=True, max_length=100, null=True)),
                ('ca_certificate', models.CharField(blank=True, max_length=100, null=True)),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActiveDirectoryServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('domain', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='AzureADServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('tenant_id', models.CharField(max_length=255)),
                ('client_id', models.CharField(max_length=255)),
                ('client_secret', models.CharField(max_length=255)),
                ('redirect_uri', models.URLField(blank=True, max_length=1024, null=True)),
                ('domain', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='CustomServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('type', models.CharField(default='custom', editable=False, max_length=50)),
                ('custom_data', models.JSONField()),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='DNSServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('dnssec_active', models.BooleanField(default=False)),
                ('unsigned_check', models.BooleanField(default=False)),
                ('timecheck', models.BooleanField(default=False)),
                ('dnssec_class', models.CharField(blank=True, max_length=50, null=True)),
                ('key_tag', models.CharField(blank=True, max_length=50, null=True)),
                ('algorithm', models.CharField(blank=True, max_length=50, null=True)),
                ('digest_type', models.CharField(blank=True, max_length=10, null=True)),
                ('digest', models.CharField(blank=True, max_length=255, null=True)),
                ('public_key', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='FileServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('storage_capacity', models.CharField(max_length=255)),
                ('protocol', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='IdPServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('entity_id', models.CharField(max_length=255)),
                ('sso_url', models.URLField(blank=True, max_length=1024, null=True)),
                ('slo_url', models.URLField(blank=True, max_length=1024, null=True)),
                ('public_cert', models.TextField(blank=True, null=True)),
                ('private_key', models.TextField(blank=True, null=True)),
                ('metadata_url', models.URLField(blank=True, max_length=1024, null=True)),
                ('api_key', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='IPFixCollector',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('protocol', models.IntegerField()),
                ('port', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='LDAPServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('base_dn', models.CharField(max_length=255)),
                ('port', models.IntegerField(default=389)),
                ('use_ssl', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='NTPServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('version', models.IntegerField()),
                ('auth_key', models.CharField(blank=True, max_length=100, null=True)),
                ('max_poll', models.IntegerField()),
                ('min_poll', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='RADIUSServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('secret', models.CharField(max_length=255)),
                ('auth_port', models.IntegerField(default=1812)),
                ('acct_port', models.IntegerField(default=1813)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='SyslogServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('port', models.IntegerField()),
                ('transport_protocol', models.CharField(max_length=10)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='WebServer',
            fields=[
                ('server_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources_app.server')),
                ('technology', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('resources_app.server',),
        ),
        migrations.CreateModel(
            name='CACertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('certificate_type', models.CharField(max_length=100)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('certificate_url', models.URLField()),
                ('private_key_url', models.URLField()),
                ('issuer', models.CharField(max_length=255)),
                ('subject', models.CharField(max_length=255)),
                ('ca_bundle_url', models.URLField(blank=True, null=True)),
                ('is_root_ca', models.BooleanField(default=False)),
                ('type', models.CharField(default='ca', editable=False, max_length=20)),
                ('signing_policies', models.TextField()),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('certificate_type', models.CharField(max_length=100)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('certificate_url', models.URLField()),
                ('private_key_url', models.URLField()),
                ('custom_field', models.CharField(max_length=255)),
                ('custom_data', models.JSONField()),
                ('type', models.CharField(default='custom', editable=False, max_length=50)),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DSNDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('vendor', models.CharField(max_length=255)),
                ('model', models.CharField(max_length=255)),
                ('software', models.CharField(max_length=255, verbose_name='Software Version')),
                ('serial_number', models.CharField(max_length=255)),
                ('certificate', models.URLField()),
                ('trusted_ca', models.URLField()),
                ('descriptions', models.TextField(blank=True, null=True)),
                ('registered', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=False)),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MachineGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('compliance', models.CharField(max_length=255, verbose_name='Compliance Standard')),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('type', models.CharField(choices=[('laptop', 'Laptop'), ('phone', 'Phone'), ('tablet', 'Tablet'), ('network', 'Network Device'), ('other', 'Other')], max_length=50)),
                ('vendor', models.CharField(max_length=255)),
                ('model', models.CharField(max_length=255)),
                ('os', models.CharField(choices=[('windows', 'Windows'), ('linux', 'Linux'), ('mac_os', 'Mac OS'), ('ios', 'iOS'), ('android', 'Android')], max_length=50)),
                ('serial_number', models.CharField(max_length=255)),
                ('certificate', models.URLField()),
                ('trusted_ca', models.URLField()),
                ('admins', models.JSONField()),
                ('users', models.JSONField()),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
                ('device_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices_device_group', to='resources_app.machinegroup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SSHCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('certificate_type', models.CharField(max_length=100)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('certificate_url', models.URLField()),
                ('private_key_url', models.URLField()),
                ('authorized_keys', models.TextField()),
                ('type', models.CharField(default='ssh', editable=False, max_length=50)),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SSLCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('certificate_type', models.CharField(max_length=100)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('certificate_url', models.URLField()),
                ('private_key_url', models.URLField()),
                ('issuer', models.CharField(max_length=255)),
                ('subject', models.CharField(max_length=255)),
                ('ca_bundle_url', models.URLField(blank=True, null=True)),
                ('type', models.CharField(default='ssl', editable=False, max_length=20)),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VRF',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('object_id', models.CharField(db_index=True, editable=False, max_length=16, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('detail', models.JSONField()),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_tags', to='base.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

#####end /root/delta_api/delta_sase/resources_app/migrations/0001_initial.py#####
______________________________
#####start /root/delta_api/delta_sase/.git/COMMIT_EDITMSG#####

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch new_tag
# Your branch is up to date with 'origin/new_tag'.
#
# Changes to be committed:
	deleted:    base/middleware.py
	modified:   base/migrations/0001_initial.py
	modified:   base/models.py
	modified:   delta_sase/__pycache__/settings.cpython-310.pyc
	deleted:    delta_sase/midddleware.py
	modified:   delta_sase/settings.py
	modified:   objects_app/models.py
	new file:   objects_app/urls.py
	modified:   requirements2.txt
	modified:   resources_app/migrations/0001_initial.py
	new file:   scripts/create_customer.py
	modified:   scripts/create_support.py
	modified:   scripts/create_tenant.py
	new file:   scripts/tests/tenants_app.py
	new file:   tenants_app/middleware.py
	modified:   tenants_app/migrations/0001_initial.py
	modified:   tenants_app/models.py
	modified:   tenants_app/serializers.py
	modified:   tenants_app/views.py
    added all auto scripts for test

#####end /root/delta_api/delta_sase/.git/COMMIT_EDITMSG#####
______________________________
#####start /root/delta_api/delta_sase/.git/ORIG_HEAD#####
8d589011d05d87cf1a95fc964bf0fb0179c96f87

#####end /root/delta_api/delta_sase/.git/ORIG_HEAD#####
______________________________
#####start /root/delta_api/delta_sase/.git/description#####
Unnamed repository; edit this file 'description' to name the repository.

#####end /root/delta_api/delta_sase/.git/description#####
______________________________
#####start /root/delta_api/delta_sase/.git/FETCH_HEAD#####
4118082559f26a0053129918f5e21b43e3c0040e		branch 'new_tag' of https://github.com/amirdeadline/delta-api
f909c84c185ef38ba4885e17c3d867f5f362d6c1	not-for-merge	branch 'main' of https://github.com/amirdeadline/delta-api
8d589011d05d87cf1a95fc964bf0fb0179c96f87	not-for-merge	branch 'v1' of https://github.com/amirdeadline/delta-api

#####end /root/delta_api/delta_sase/.git/FETCH_HEAD#####
______________________________
#####start /root/delta_api/delta_sase/.git/config#####
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = https://github.com/amirdeadline/delta-api.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
[branch "v1"]
	vscode-merge-base = origin/main
	remote = origin
	merge = refs/heads/v1
[branch "new_tag"]
	vscode-merge-base = origin/v1
	remote = origin
	merge = refs/heads/new_tag

#####end /root/delta_api/delta_sase/.git/config#####
______________________________
#####start /root/delta_api/delta_sase/.git/HEAD#####
ref: refs/heads/new_tag

#####end /root/delta_api/delta_sase/.git/HEAD#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/fsmonitor-watchman.sample#####
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

#####end /root/delta_api/delta_sase/.git/hooks/fsmonitor-watchman.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/post-update.sample#####
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

#####end /root/delta_api/delta_sase/.git/hooks/post-update.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/pre-push.sample#####
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

#####end /root/delta_api/delta_sase/.git/hooks/pre-push.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/pre-receive.sample#####
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

#####end /root/delta_api/delta_sase/.git/hooks/pre-receive.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/applypatch-msg.sample#####
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

#####end /root/delta_api/delta_sase/.git/hooks/applypatch-msg.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/push-to-checkout.sample#####
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

#####end /root/delta_api/delta_sase/.git/hooks/push-to-checkout.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/pre-rebase.sample#####
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

#####end /root/delta_api/delta_sase/.git/hooks/pre-rebase.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/pre-merge-commit.sample#####
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

#####end /root/delta_api/delta_sase/.git/hooks/pre-merge-commit.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/pre-commit.sample#####
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

#####end /root/delta_api/delta_sase/.git/hooks/pre-commit.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/prepare-commit-msg.sample#####
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

#####end /root/delta_api/delta_sase/.git/hooks/prepare-commit-msg.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/update.sample#####
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

#####end /root/delta_api/delta_sase/.git/hooks/update.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/commit-msg.sample#####
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

#####end /root/delta_api/delta_sase/.git/hooks/commit-msg.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/hooks/pre-applypatch.sample#####
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

#####end /root/delta_api/delta_sase/.git/hooks/pre-applypatch.sample#####
______________________________
#####start /root/delta_api/delta_sase/.git/info/exclude#####
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

#####end /root/delta_api/delta_sase/.git/info/exclude#####
______________________________
#####start /root/delta_api/delta_sase/.git/logs/HEAD#####
0000000000000000000000000000000000000000 e9bfe3db0437599b637811fbdd0d92a87cbb5ed5 amirdeadline <amir.rashidi2016@gmail.com> 1712784023 +0000	commit (initial): Initial commit
e9bfe3db0437599b637811fbdd0d92a87cbb5ed5 e9bfe3db0437599b637811fbdd0d92a87cbb5ed5 amirdeadline <amir.rashidi2016@gmail.com> 1712784028 +0000	checkout: moving from main to main
e9bfe3db0437599b637811fbdd0d92a87cbb5ed5 7cd5db0c758988598f8d6b5af98abf985971fa7f amirdeadline <amir.rashidi2016@gmail.com> 1712784171 +0000	commit: Initial commit
7cd5db0c758988598f8d6b5af98abf985971fa7f 7e96e8662a63cae7f18bbe606f31a1ce9f773013 amirdeadline <amir.rashidi2016@gmail.com> 1712784227 +0000	pull --rebase origin main (start): checkout 7e96e8662a63cae7f18bbe606f31a1ce9f773013
7e96e8662a63cae7f18bbe606f31a1ce9f773013 f909c84c185ef38ba4885e17c3d867f5f362d6c1 amirdeadline <amir.rashidi2016@gmail.com> 1712784227 +0000	pull --rebase origin main (pick): Initial commit
f909c84c185ef38ba4885e17c3d867f5f362d6c1 f909c84c185ef38ba4885e17c3d867f5f362d6c1 amirdeadline <amir.rashidi2016@gmail.com> 1712784227 +0000	pull --rebase origin main (finish): returning to refs/heads/main
f909c84c185ef38ba4885e17c3d867f5f362d6c1 e58f47abdec359d7d03e256e96bbfec785cf4ff0 amirdeadline <amir.rashidi2016@gmail.com> 1714344258 +0000	commit: Changes to be committed:
e58f47abdec359d7d03e256e96bbfec785cf4ff0 e58f47abdec359d7d03e256e96bbfec785cf4ff0 amirdeadline <amir.rashidi2016@gmail.com> 1714519114 +0000	checkout: moving from main to v1
e58f47abdec359d7d03e256e96bbfec785cf4ff0 311acf5b654c8c0ae168ab2e376111aea3e51c01 amirdeadline <amir.rashidi2016@gmail.com> 1714519117 +0000	commit: modified: delta_sase/settings.py
311acf5b654c8c0ae168ab2e376111aea3e51c01 1f7bab1f66b0404b8c053034a04ffceb6f67b06c amirdeadline <amir.rashidi2016@gmail.com> 1714565523 +0000	commit: modified: tenants_app/models.py
1f7bab1f66b0404b8c053034a04ffceb6f67b06c 8d589011d05d87cf1a95fc964bf0fb0179c96f87 amirdeadline <amir.rashidi2016@gmail.com> 1715011934 +0000	commit: Before I change TAGGING system
8d589011d05d87cf1a95fc964bf0fb0179c96f87 8d589011d05d87cf1a95fc964bf0fb0179c96f87 amirdeadline <amir.rashidi2016@gmail.com> 1715011969 +0000	checkout: moving from v1 to new_tag
8d589011d05d87cf1a95fc964bf0fb0179c96f87 4118082559f26a0053129918f5e21b43e3c0040e amirdeadline <amir.rashidi2016@gmail.com> 1715295816 +0000	commit: On branch new_tag
4118082559f26a0053129918f5e21b43e3c0040e bef33c32124c1af73000bb01d130373f4c27daf6 amirdeadline <amir.rashidi2016@gmail.com> 1715536807 +0000	commit: deleted: base/middleware.py

#####end /root/delta_api/delta_sase/.git/logs/HEAD#####
______________________________
#####start /root/delta_api/delta_sase/.git/logs/refs/remotes/origin/v1#####
0000000000000000000000000000000000000000 311acf5b654c8c0ae168ab2e376111aea3e51c01 amirdeadline <amir.rashidi2016@gmail.com> 1714519127 +0000	update by push
311acf5b654c8c0ae168ab2e376111aea3e51c01 1f7bab1f66b0404b8c053034a04ffceb6f67b06c amirdeadline <amir.rashidi2016@gmail.com> 1714565528 +0000	update by push
1f7bab1f66b0404b8c053034a04ffceb6f67b06c 8d589011d05d87cf1a95fc964bf0fb0179c96f87 amirdeadline <amir.rashidi2016@gmail.com> 1715011956 +0000	update by push

#####end /root/delta_api/delta_sase/.git/logs/refs/remotes/origin/v1#####
______________________________
#####start /root/delta_api/delta_sase/.git/logs/refs/remotes/origin/main#####
0000000000000000000000000000000000000000 7e96e8662a63cae7f18bbe606f31a1ce9f773013 amirdeadline <amir.rashidi2016@gmail.com> 1712784037 +0000	fetch: storing head
7e96e8662a63cae7f18bbe606f31a1ce9f773013 f909c84c185ef38ba4885e17c3d867f5f362d6c1 amirdeadline <amir.rashidi2016@gmail.com> 1712784248 +0000	update by push

#####end /root/delta_api/delta_sase/.git/logs/refs/remotes/origin/main#####
______________________________
#####start /root/delta_api/delta_sase/.git/logs/refs/remotes/origin/new_tag#####
0000000000000000000000000000000000000000 4118082559f26a0053129918f5e21b43e3c0040e amirdeadline <amir.rashidi2016@gmail.com> 1715295878 +0000	update by push

#####end /root/delta_api/delta_sase/.git/logs/refs/remotes/origin/new_tag#####
______________________________
#####start /root/delta_api/delta_sase/.git/logs/refs/heads/v1#####
0000000000000000000000000000000000000000 e58f47abdec359d7d03e256e96bbfec785cf4ff0 amirdeadline <amir.rashidi2016@gmail.com> 1714519114 +0000	branch: Created from HEAD
e58f47abdec359d7d03e256e96bbfec785cf4ff0 311acf5b654c8c0ae168ab2e376111aea3e51c01 amirdeadline <amir.rashidi2016@gmail.com> 1714519117 +0000	commit: modified: delta_sase/settings.py
311acf5b654c8c0ae168ab2e376111aea3e51c01 1f7bab1f66b0404b8c053034a04ffceb6f67b06c amirdeadline <amir.rashidi2016@gmail.com> 1714565523 +0000	commit: modified: tenants_app/models.py
1f7bab1f66b0404b8c053034a04ffceb6f67b06c 8d589011d05d87cf1a95fc964bf0fb0179c96f87 amirdeadline <amir.rashidi2016@gmail.com> 1715011934 +0000	commit: Before I change TAGGING system

#####end /root/delta_api/delta_sase/.git/logs/refs/heads/v1#####
______________________________
#####start /root/delta_api/delta_sase/.git/logs/refs/heads/main#####
0000000000000000000000000000000000000000 e9bfe3db0437599b637811fbdd0d92a87cbb5ed5 amirdeadline <amir.rashidi2016@gmail.com> 1712784023 +0000	commit (initial): Initial commit
e9bfe3db0437599b637811fbdd0d92a87cbb5ed5 7cd5db0c758988598f8d6b5af98abf985971fa7f amirdeadline <amir.rashidi2016@gmail.com> 1712784171 +0000	commit: Initial commit
7cd5db0c758988598f8d6b5af98abf985971fa7f f909c84c185ef38ba4885e17c3d867f5f362d6c1 amirdeadline <amir.rashidi2016@gmail.com> 1712784227 +0000	pull --rebase origin main (finish): refs/heads/main onto 7e96e8662a63cae7f18bbe606f31a1ce9f773013
f909c84c185ef38ba4885e17c3d867f5f362d6c1 e58f47abdec359d7d03e256e96bbfec785cf4ff0 amirdeadline <amir.rashidi2016@gmail.com> 1714344258 +0000	commit: Changes to be committed:

#####end /root/delta_api/delta_sase/.git/logs/refs/heads/main#####
______________________________
#####start /root/delta_api/delta_sase/.git/logs/refs/heads/new_tag#####
0000000000000000000000000000000000000000 8d589011d05d87cf1a95fc964bf0fb0179c96f87 amirdeadline <amir.rashidi2016@gmail.com> 1715011969 +0000	branch: Created from HEAD
8d589011d05d87cf1a95fc964bf0fb0179c96f87 4118082559f26a0053129918f5e21b43e3c0040e amirdeadline <amir.rashidi2016@gmail.com> 1715295816 +0000	commit: On branch new_tag
4118082559f26a0053129918f5e21b43e3c0040e bef33c32124c1af73000bb01d130373f4c27daf6 amirdeadline <amir.rashidi2016@gmail.com> 1715536807 +0000	commit: deleted: base/middleware.py

#####end /root/delta_api/delta_sase/.git/logs/refs/heads/new_tag#####
______________________________
#####start /root/delta_api/delta_sase/.git/refs/remotes/origin/v1#####
8d589011d05d87cf1a95fc964bf0fb0179c96f87

#####end /root/delta_api/delta_sase/.git/refs/remotes/origin/v1#####
______________________________
#####start /root/delta_api/delta_sase/.git/refs/remotes/origin/main#####
f909c84c185ef38ba4885e17c3d867f5f362d6c1

#####end /root/delta_api/delta_sase/.git/refs/remotes/origin/main#####
______________________________
#####start /root/delta_api/delta_sase/.git/refs/remotes/origin/new_tag#####
4118082559f26a0053129918f5e21b43e3c0040e

#####end /root/delta_api/delta_sase/.git/refs/remotes/origin/new_tag#####
______________________________
#####start /root/delta_api/delta_sase/.git/refs/heads/v1#####
8d589011d05d87cf1a95fc964bf0fb0179c96f87

#####end /root/delta_api/delta_sase/.git/refs/heads/v1#####
______________________________
#####start /root/delta_api/delta_sase/.git/refs/heads/main#####
e58f47abdec359d7d03e256e96bbfec785cf4ff0

#####end /root/delta_api/delta_sase/.git/refs/heads/main#####
______________________________
#####start /root/delta_api/delta_sase/.git/refs/heads/new_tag#####
bef33c32124c1af73000bb01d130373f4c27daf6

#####end /root/delta_api/delta_sase/.git/refs/heads/new_tag#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/context_processors.py#####
#delta_api project context_processors.py
from django.conf import settings as django_settings
from delta_api.settings import TENANT_SUBFOLDER_PREFIX

def settings(request):
    return {
        "settings": django_settings,
    }



def get_subfolder_code(request):
    subfolder_code = ""

    if request is None:
        return subfolder_code

    try:
        subfolder_code = "/" + TENANT_SUBFOLDER_PREFIX + "/" + request.tenant.name
    except:
        pass
    return subfolder_code

#for template
def get_program_settings(request):
    subfolder_code = get_subfolder_code(request)
    context = {
        'subfolder_code': subfolder_code
    }
    return {"program_settings": context}
#####end /root/delta_api/delta_sase/delta_sase/context_processors.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/celery.py#####
from __future__ import absolute_import, unicode_literals
import os
from celery import Celery
from django.conf import settings

# set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'delta_api.settings')

app = Celery('delta_api',
             broker='redis://localhost:6379/0',
             backend='redis://localhost:6379/0',
            #  include=['delta_api.tasks']
             )


# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)

@app.task(bind=True)
def debug_task(self):
    print('Request: {0!r}'.format(self.request))
#####end /root/delta_api/delta_sase/delta_sase/celery.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/__init__.py#####

#####end /root/delta_api/delta_sase/delta_sase/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/tasks.py#####
from celery import shared_task

@shared_task
def add(x, y):
    return x + y
#####end /root/delta_api/delta_sase/delta_sase/tasks.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/views.py#####
# import django
# from django.conf import settings
# from django.db import utils
# from django.views.generic import TemplateView
# from django_tenants.utils import remove_www
# from tenants_app.models import Client


# class HomeView(TemplateView):
#     template_name = "index_public.html"

#     def get_context_data(self, **kwargs):
#         context = super().get_context_data(**kwargs)

#         hostname_without_port = remove_www(self.request.get_host().split(':')[0])

#         try:
#             Client.objects.get(schema_name='public')
#         except utils.DatabaseError:
#             context['need_sync'] = True
#             context['shared_apps'] = settings.SHARED_APPS
#             context['tenants_list'] = []
#             return context
#         except Client.DoesNotExist:
#             context['no_public_tenant'] = True
#             context['hostname'] = hostname_without_port

#         if Client.objects.count() == 1:
#             context['only_public_tenant'] = True

#         context['tenants_list'] = Client.objects.all()
#         return context
#####end /root/delta_api/delta_sase/delta_sase/views.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/asgi.py#####
"""
ASGI config for delta_sase project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'delta_sase.settings')

application = get_asgi_application()

#####end /root/delta_api/delta_sase/delta_sase/asgi.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/settings.py#####
# Django settings for delta_sase project.
import sys
import os
from dotenv import load_dotenv
from django.conf import settings

MACHINE_ID = '1234'
DEBUG = True

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

PROJECT_DIR = os.path.join(BASE_DIR, os.pardir)

TENANT_APPS_DIR = os.path.join(PROJECT_DIR, os.pardir)
sys.path.insert(0, TENANT_APPS_DIR)

# DATABASES = {
#     'default': {
#         'ENGINE': 'django_tenants.postgresql_backend',  # Add 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
#         'NAME': 'delta98',
#         'USER': 'admin',
#         'PASSWORD': 'admin',
#         'HOST': '192.168.172.71',
#         'PORT': '5433',
#     }
# }
load_dotenv() 

DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',  # Add 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': os.environ.get('DATABASE_DB', 'postgres'),
        'USER': os.environ.get('DATABASE_USER', 'admin'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'admin'),
        'HOST': os.environ.get('DATABASE_HOST', '10.1.1.21'),
        'PORT': os.environ.get('DATABASE_PORT', '5432'),
    }
}

# Hosts/domain names that are valid for this site; required if DEBUG is False
# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts
ALLOWED_HOSTS = ['*']

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = False

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/var/www/example.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://example.com/media/", "http://media.example.com/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/var/www/example.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://example.com/static/", "http://static.example.com/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'as-%*_93v=r5*p_7cu8-%o6b&x^g+q$#*e*fl)k)x0-t=%q0qa'

# List of callables that know how to import templates from various sources.

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

TEST_RUNNER = 'django.test.runner.DiscoverRunner'

MIDDLEWARE = [
    'django_tenants.middleware.TenantSubfolderMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'tenants_app.middleware.JWTAuthenticationMiddleware',
    'tenants_app.middleware.ExceptionHandlingMiddleware',
    'tenants_app.middleware.LoggingMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')

        ],
        # 'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this
                # list if you haven't customized them:
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
                'delta_sase.context_processors.settings',
            ],
            'loaders': (
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ),

        },
    },
]
ROOT_URLCONF = 'delta_sase.urls_tenants'
PUBLIC_SCHEMA_URLCONF = 'delta_sase.urls_public'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'delta_sase.wsgi.application'

SHARED_APPS = (
    'django_tenants',  # mandatory
    'tenants_app',  # you must list the app where your tenant model resides in
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'rest_framework',
    'celery',
    'polymorphic',
    # 'staging_app',
    # 'tenants_app.apps.TenantsAppConfig',
)

TENANT_APPS = (
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.sessions',
    'django.contrib.messages',
    'base',
    'resources_app',
    # 'sites_app',
    # 'devices_app',
    # 'interfaces_app',
    # 'routes_app',
    # 'templates_app',
    # 'profiles_app',
    # 'security_policies_app',
    # 'routing_policies_app',
    # 'qos_policies_app',
    # 'nat_policies_app',
    # 'events_app',
    # 'remote_access_app',
    # 'general_settings_app',
    # 'auth_settings_app',
    # 'config_manager_app',
    # 'monitor_app',
    # 'objects_app',
    # 'custom_vpn_app',
    # 'dashboard_app',
    # 'cli_app',
    # 'network_app',
    # 'vpn_app',
    # 'auth_policies_app',
)

TENANT_MODEL = "tenants_app.Tenant"  # app.Model

TENANT_DOMAIN_MODEL = "tenants_app.Domain"  # app.Model

TEST_RUNNER = 'django.test.runner.DiscoverRunner'

AUTO_DROP_SCHEMA= True

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

TENANT_SUBFOLDER_PREFIX = "tenants"

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse'
#         }
#     },
#     'handlers': {
#         'mail_admins': {
#             'level': 'ERROR',
#             'filters': ['require_debug_false'],
#             'class': 'django.utils.log.AdminEmailHandler'
#         },
#         'file': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'debug.log'),
#         }
#     },
#     'loggers': {
#         'django.request': {
#             'handlers': ['mail_admins', 'file'],
#             'level': 'ERROR',
#             'propagate': True,
#         },
#         '': {  # The empty string catches everything not specified above
#             'handlers': ['file'],
#             'level': 'INFO',
#         },
#     }
# }
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'detailed': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(settings.BASE_DIR, 'debug.log'),
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'detailed',
        },
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
        '': {  # The empty string catches everything not specified above
            'handlers': ['file', 'console'],
            'level': 'INFO',  # Or use DEBUG to see more details during development
            'propagate': False,
        },
    }
}
# SHared Schemas between all tenants 
PG_EXTRA_SEARCH_PATHS = ['extensions', 'delta']
SHOW_PUBLIC_IF_NO_TENANT_FOUND = True


DEFAULT_FILE_STORAGE = "django_tenants.files.storage.TenantFileSystemStorage"
MULTITENANT_RELATIVE_MEDIA_ROOT = "uploaded_files"
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
# CELERY_BROKER_URL = 'redis://localhost:6379/0'


CELERY_BROKER_URL = os.environ.get('CELERY_URL', 'redis://localhost:6379/0'),
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'delta_sase')

#Keycloak and JWT token Environment variables
DEFAULT_PUB_KEY = """
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAly2mtHbJdSB4umYogMBO
obeYjEK6yq4jQzkFfTVYH1qKcL/4Qw/nLsBkAXL3CCb7eYKq4vqFrHE3g/KKbYsB
gkRePAZDensddFBDviFOxAyRn7WuH3d15KCm9SvyiWIC9JQlJJSk/1oHD0H/WP8S
RmPXZ4dL3tCu6sTT6VcLXOPdSR5N22tuUSlY2cMLYzVvDacOhvrvGZIN5ALPfRqv
NtCTH2dXznNt+9ZHwJE3O3tlTrp1Pl2QBkb8xMv87sMYGUDLFLbAxhJEmXhenlGP
vMzYVWcSMvj5JPpez6FNXlBb7MegCVLl+pPBlryHB2H9JrELK4qG3V0QhnlHXr5V
/QIDAQAB
-----END PUBLIC KEY-----
"""
KEYCLOAK_PUBLIC_KEY = os.getenv('KEYCLOAK_PUBLIC_KEY', DEFAULT_PUB_KEY)
JWT_AUDIENCE = os.getenv('JWT_AUDIENCE', 'default-audience-if-not-set')

#####end /root/delta_api/delta_sase/delta_sase/settings.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/urls_tenants.py#####
# delta_api project urls_tenants.py
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView
from django.http import HttpResponseServerError


urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/config/', include('base.urls')),
    path('api/v1/resources/', include('resources_app.urls')),
    # path('network/sites/', include('sites_app.urls')),
    # path('network/devices/', include('devices_app.urls')),
    # path('dashboard/', include('dashboard_app.urls')),
    # path('network/', include('network_app.urls')),
    # path('monitor/', include('monitor_app.urls')),
    # path('profiles/', include('profiles_app.urls')),
    # path('objects/', include('objects_app.urls')),
    # path('templates/', include('templates_app.urls')),
    # path('settings/', include('settings_app.urls')),
    # path('policies/security', include('security_policies_app.urls')),
    # path('policies/qos', include('qos_policies_app.urls')),
    # path('policies/nat', include('nat_policies_app.urls')),
    # path('policies/routing', include('routing_policies_app.urls')),
    # path('policies/authentication', include('auth_policies_app.urls')),
    # path('policies/', include('policies_app.urls')),
    # path('policies/', include('policies_app.urls')),

    ]


#####end /root/delta_api/delta_sase/delta_sase/urls_tenants.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/urls.py#####
"""
URL configuration for delta_sase project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]

#####end /root/delta_api/delta_sase/delta_sase/urls.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/.env#####
KEYCLOAK_PUBLIC_KEY="-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAly2mtHbJdSB4umYogMBOobeYjEK6yq4jQzkFfTVYH1qKcL/4Qw/nLsBkAXL3CCb7eYKq4vqFrHE3g/KKbYsBgkRePAZDensddFBDviFOxAyRn7WuH3d15KCm9SvyiWIC9JQlJJSk/1oHD0H/WP8SRmPXZ4dL3tCu6sTT6VcLXOPdSR5N22tuUSlY2cMLYzVvDacOhvrvGZIN5ALPfRqvNtCTH2dXznNt+9ZHwJE3O3tlTrp1Pl2QBkb8xMv87sMYGUDLFLbAxhJEmXhenlGPvMzYVWcSMvj5JPpez6FNXlBb7MegCVLl+pPBlryHB2H9JrELK4qG3V0QhnlHXr5V/QIDAQAB-----END PUBLIC KEY-----"
JWT_AUDIENCE="your-audience-here"

#####end /root/delta_api/delta_sase/delta_sase/.env#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/wsgi.py#####
"""
WSGI config for delta_sase project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'delta_sase.settings')

application = get_wsgi_application()

#####end /root/delta_api/delta_sase/delta_sase/wsgi.py#####
______________________________
#####start /root/delta_api/delta_sase/delta_sase/urls_public.py#####
#Public URL configuration for delta_api project.

from django.conf.urls import include
from django.urls import path, include
from django.contrib import admin

urlpatterns = [
    # path('', HomeView.as_view()),
    path('admin/', admin.site.urls),
    # path('api/v1/manage/staging/', include('staging_app.urls')),
    path('api/v1/', include('tenants_app.urls')),
]
#####end /root/delta_api/delta_sase/delta_sase/urls_public.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_system_app/apps.py#####
from django.apps import AppConfig


class StandardsSystemAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'standards_system_app'

#####end /root/delta_api/delta_sase/standards_system_app/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_system_app/__init__.py#####

#####end /root/delta_api/delta_sase/standards_system_app/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_system_app/views.py#####
from django.shortcuts import render

# Create your views here.

#####end /root/delta_api/delta_sase/standards_system_app/views.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_system_app/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/standards_system_app/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_system_app/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/standards_system_app/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_system_app/models.py#####
# standards_system_app/models.py
from django.db import models
from django.utils import timezone
from django.contrib.postgres.fields import JSONField
import uuid
from django.contrib.postgres.fields import ArrayField
from django.utils import timezone
from django.utils.deprecation import MiddlewareMixin
from django.core.exceptions import ValidationError 
from django.core.validators import MaxValueValidator
from resources_app.models import Certificate, SyslogServer, NTPServer, IPFixCollector, SNMPServer, DNSServer

import logging

logger = logging.getLogger(__name__)

class SysStandardTag(models.Model):
    key = models.CharField(max_length=100, unique=True)
    value = models.JSONField()

    class Meta:
        indexes = [
            models.Index(fields=['key']),
        ]

    def __str__(self):
        return f"{self.key}: {self.value}"
        
class SysStandardBase(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(verbose_name="Description", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.CharField(max_length=100, null=True, blank=True)
    modified_at = models.DateTimeField(auto_now=True)
    modified_by = models.CharField(max_length=100, null=True, blank=True)
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    tags = models.ManyToManyField(SysStandardTag, blank=True, related_name="%(class)s_tags")
    detail = JSONField()
    enabled = models.BooleanField(default=True)
    source_address_tag = models.CharField(max_length=100, blank=True, null=True)
    source_interface_tag = models.CharField(max_length=100, blank=True, null=True)
    logging = models.BooleanField(default=False)

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        if not self.pk:  # Object is being created
            self.created_by = user_id
        self.modified_by = user_id
        if self.tags.count() > 5:
            raise ValidationError("Maximum number of tags exceeded (5 tags allowed).")
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        self.deleted_at = timezone.now()
        self.deleted_by = user_id
        super().delete(*args, **kwargs)

class SyslogStandard(SysStandardBase):
    enabled = models.BooleanField(default=True)
    facility = models.CharField(max_length=50)
    severity = models.CharField(max_length=50)
    servers = models.ManyToManyField(SyslogServer, related_name='syslog_standards')
    def __str__(self):
        return self.name

class IPFIXStandard(SysStandardBase):
    export_interval = models.IntegerField(help_text='Interval in seconds')
    transport_protocol = models.CharField(max_length=10)
    template_refresh_time = models.IntegerField(help_text='Template refresh time in seconds')
    option_template = models.BooleanField(default=True)
    record_fields = models.TextField(help_text='Comma-separated record fields')
    collectors = models.ManyToManyField(IPFixCollector, related_name='ipfix_standards_collectors')

    def __str__(self):
        return self.name

class SNMPStandard(SysStandardBase):
    version = models.CharField(max_length=10)
    community_string = models.CharField(max_length=100, blank=True, null=True)
    authentication_protocol = models.CharField(max_length=50, blank=True, null=True)
    authentication_password = models.CharField(max_length=100, blank=True, null=True)
    encryption_protocol = models.CharField(max_length=50, blank=True, null=True)
    encryption_password = models.CharField(max_length=100, blank=True, null=True)
    security_level = models.CharField(max_length=50, blank=True, null=True)
    trap_receiver_port = models.IntegerField()
    engine_id = models.CharField(max_length=100, blank=True, null=True)
    contact = models.CharField(max_length=100)
    location = models.CharField(max_length=100)
    trap_receiver_ip = models.CharField(max_length=100)
    trap_receiver_port = models.IntegerField()

    def __str__(self):
        return self.name
    
class NTPStandard(SysStandardBase):
    server1 = models.ForeignKey(NTPServer, on_delete=models.PROTECT, )
    server2 = models.ForeignKey(NTPServer, on_delete=models.SET_NULL, null=True)
    server3 = models.ForeignKey(NTPServer, on_delete=models.SET_NULL, null=True)
    server4 = models.ForeignKey(NTPServer, on_delete=models.SET_NULL, null=True)

    def __str__(self):
        return self.name

class DNSService(SysStandardBase):
    caching = models.BooleanField(default=True)
    port = models.IntegerField(default=53)
    interface_tag = models.JSONField(blank=True, null=True)
    address_tag = models.CharField(max_length=100, blank=True, null=True)
    certificate = models.ForeignKey(Certificate, on_delete=models.SET_NULL, null=True, related_name='dnsservices')
    forwarding_servers = models.ManyToManyField(DNSServer, on_delete=models.PROTECT, related_name='dnsservice_servers')
    cache_size = models.CharField(max_length=50)
    max_ttl = models.IntegerField(help_text='Maximum time to live for DNS records')
    min_ttl = models.IntegerField(help_text='Minimum time to live for DNS records')
    neg_ttl = models.IntegerField(help_text='Negative caching time to live')
    max_entries = models.IntegerField(help_text='Maximum number of cache entries')
    static_entries = models.JSONField(blank=True, null=True)  # Storing static DNS entries as JSON

    def __str__(self):
        return self.name




#####end /root/delta_api/delta_sase/standards_system_app/models.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_system_app/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/standards_system_app/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/dashboard/apps.py#####
from django.apps import AppConfig


class DashboardConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'dashboard'

#####end /root/delta_api/delta_sase/dashboard/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/dashboard/__init__.py#####

#####end /root/delta_api/delta_sase/dashboard/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/dashboard/views.py#####
from django.shortcuts import render

# Create your views here.

#####end /root/delta_api/delta_sase/dashboard/views.py#####
______________________________
#####start /root/delta_api/delta_sase/dashboard/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/dashboard/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/dashboard/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/dashboard/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/dashboard/models.py#####
from django.db import models

# Create your models here.

#####end /root/delta_api/delta_sase/dashboard/models.py#####
______________________________
#####start /root/delta_api/delta_sase/dashboard/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/dashboard/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/scripts/create_customer.py#####
import requests
import argparse
import json
from termcolor import colored
import random
import string

# Setup command line arguments
parser = argparse.ArgumentParser(description="Create or delete objects in Delta SASE system.")
parser.add_argument("-c", "--customer", help="Customer name")
parser.add_argument("-d", "--delete", action="store_true", help="Delete the specified tenant and customer")
parser.add_argument("-n", "--num_customers", type=int, help="Number of customers to create")
args = parser.parse_args()

# API endpoint
API_ENDPOINT = "http://10.1.1.21:8053/api/v1/manage/"

def load_jwt_token(file_path):
    """Load JWT token from a file."""
    with open(file_path, 'r') as file:
        return file.read().strip()

jwt_token = load_jwt_token("/root/delta_api/JWT/amir_jwt.txt")

headers = {
    "Authorization": f"Bearer {jwt_token}",
    "Content-Type": "application/json"
}

# Tracking successful and failed API calls
successful_calls = []
failed_calls = []

def get_request(path):
    """Function to send GET request and return the response as JSON."""
    full_url = f"{API_ENDPOINT}{path}/"
    try:
        response = requests.get(full_url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        return []
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        return []

def delete_request(path):
    """Function to send DELETE request."""
    full_url = f"{API_ENDPOINT}{path}/"
    try:
        response = requests.delete(full_url, headers=headers)
        response.raise_for_status()
        print(f"Deleted: {full_url}")
        successful_calls.append(full_url)
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        failed_calls.append(full_url)
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        failed_calls.append(full_url)

def post_request(path, data):
    """Function to send POST request and handle errors."""
    full_url = f"{API_ENDPOINT}{path}/"
    json_data = json.dumps(data, indent=4)
    print("Data being sent as JSON:", json_data)  # Print formatted JSON data
    try:
        response = requests.post(full_url, json=data, headers=headers)
        response.raise_for_status()
        response_json = response.json()
        print("Response JSON:", json.dumps(response_json, indent=4))
        successful_calls.append(full_url)
        return response_json
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        failed_calls.append(full_url)
        return None
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        failed_calls.append(full_url)
        return None
    except ValueError:
        print("Invalid JSON response.")
        failed_calls.append(full_url)
        return None

def check_and_delete_existing(name, entity):
    """Function to check if a specific tenant or customer exists and delete if found."""
    # Construct the API endpoint based on the entity
    if entity == 'tenants':
        path = f"{entity}/?name={name}"
    elif entity == 'customers':
        path = f"{entity}/?name={name}&is_active=True"
    else:
        print("Invalid entity type.")
        return
    
    # Send GET request to check if the entity exists
    response = get_request(path)
    if response:
        if len(response) > 1:
            print(f"Multiple {entity} found with the name '{name}'. Cannot determine which one to delete.")
        else:
            item = response[0]
            item_id = item.get('id')
            item_name = item.get('name')
            print(f"{entity.capitalize()} '{item_name}' with ID '{item_id}' found. Deleting...")
            delete_request(f"{entity}/{item_id}")
    else:
        print(colored(f"No {entity} found with name '{name}'.", "yellow"))

def generate_random_string(length):
    """Generate a random string of given length."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def delete_customer_and_contacts(customer_id):
    """Delete customer and its contacts."""
    # Delete contacts first
    contacts = get_request(f"contacts/?customer={customer_id}")
    if contacts:
        for contact in contacts:
            delete_request(f"contacts/{contact['id']}")
    
    # Delete customer
    delete_request(f"customers/{customer_id}")


if args.delete:
    customers = get_request("customers")
    if customers:
        for customer in customers:
            delete_customer_and_contacts(customer['id'])
    else:
        print("No customers found to delete.")
else:
    if args.num_customers:
        for i in range(1, args.num_customers + 1):
            customer_name = args.customer + str(i) if args.customer else generate_random_string(8)
            customer_data = {"name": customer_name}
            customer = post_request("customers", customer_data)
            if customer:
                print(f"Customer {i} created with ID:", customer.get("id"))
                # Create contacts for the customer
                contact_data = [
                    {"name": f"Contact {i}", "customer": customer["id"], "role": "Primary Contact", "email": f"contact{i}@example.com"}
                ]
                for contact in contact_data:
                    response = post_request("contacts", contact)
                    if response is None:
                        print("Failed to create contact:", contact['name'])
    else:
        customer_name = args.customer if args.customer else generate_random_string(8)
        customer_data = {"name": customer_name}
        customer = post_request("customers", customer_data)
        if customer:
            print("Customer created with ID:", customer.get("id"))
            # Create contacts for the customer
            contact_data = [
                {"name": "John Doe", "customer": customer["id"], "role": "Primary Contact", "email": "john.doe@example.com"},
                {"name": "Jane Doe", "customer": customer["id"], "role": "Secondary Contact", "email": "jane.doe@example.com"}
            ]
            for contact in contact_data:
                response = post_request("contacts", contact)
                if response is None:
                    print("Failed to create contact:", contact['name'])

# Print successful and failed API calls
print("Successful API calls:")
for call in successful_calls:
    print(colored(call, "green"))
print("\nFailed API calls:")
for call in failed_calls:
    print(colored(call, "red"))

#####end /root/delta_api/delta_sase/scripts/create_customer.py#####
______________________________
#####start /root/delta_api/delta_sase/scripts/queries.sql#####
select * from "Tenant_1001"."network_app_vrf";
select * from "Tenant_1001"."network_app_transport";
INSERT INTO "Tenant_1001"."network_app_transport" (id, name, description,created_at, modified_at) 
VALUES 
(1, 'Internet', 'Internet Transport', '2023-07-13T08:27:56.253854', '2023-07-13T08:27:56.253865');

INSERT INTO "Tenant_1001"."interfacetypes" (type) 
VALUES 
('ethernet'),
('bonding'),
('dummy'),
('bridge'),
('openvpn'),
('loopback'),
('tunnel'),
('virtual-ethernet'),
('vti'),
('vxlan'),
('wireless'),
('wireguard'),
('wwan'),
('sstpc');

INSERT INTO "Tenant_1001"."interfaceroles" (role) 
VALUES 
('lan'),
('internet'),
('private_underlay'),
('v-internet'),
('v-ctrl'),
('sdwan'),
('sase'),
('mgmt'),
('ha'),
('ctrl');

INSERT INTO "Tenant_1001"."lacphashoptions"  (name) 
VALUES 
('layer2'),
('layer2+3'),
('layer3+4'),
('encap2+3'),
('encap3+4');

INSERT INTO "Tenant_1001"."edge_gateway_types" (type)
VALUES
('sg'),
('tg'),
('rag');


INSERT INTO "Tenant_1001"."base_devicemodels" (name)
VALUES
('virtual'),
('1100'),
('1200');

INSERT INTO "Tenant_1001"."base_softwareversions" (version)
VALUES
('1.0.0'),
('1.1.0'),
('1.1.1');

INSERT INTO "Tenant_1001"."vrfroles" (role)
VALUES
('ctrl'),
('lan'),
('underlay'),
('mgmt');

select * from "Tenant_1001"."network_app_vrf";

INSERT INTO "Tenant_1001"."network_app_vrf" (name, vrf_id ,role_id, created_at, modified_at) 
VALUES 
('ctrl', 100, 'ctrl', '2023-07-13T08:27:56.253854', '2023-07-13T08:27:56.253865'),
('mgmt', 199, 'mgmt', '2023-07-13T08:27:56.253854', '2023-07-13T08:27:56.253865'),
('lan', 200, 'lan', '2023-07-13T08:27:56.253854', '2023-07-13T08:27:56.253865'),
('inet1', 101, 'underlay', '2023-07-13T08:27:56.253854', '2023-07-13T08:27:56.253865'),
('inet2', 102, 'underlay', '2023-07-13T08:27:56.253854', '2023-07-13T08:27:56.253865');


INSERT INTO "Tenant_1001"."encryption" (name, description)
VALUES
    ('null', 'No encryption'),
    ('aes128', 'AES 128-bit encryption'),
    ('aes192', 'AES 192-bit encryption'),
    ('aes256', 'AES 256-bit encryption'),
    ('aes128ctr', 'AES 128-bit counter mode encryption'),
    ('aes192ctr', 'AES 192-bit counter mode encryption'),
    ('aes256ctr', 'AES 256-bit counter mode encryption'),
    ('aes128ccm64', 'AES 128-bit CCM encryption with 64-bit tag'),
    ('aes192ccm64', 'AES 192-bit CCM encryption with 64-bit tag'),
    ('aes256ccm64', 'AES 256-bit CCM encryption with 64-bit tag'),
    ('aes128ccm96', 'AES 128-bit CCM encryption with 96-bit tag'),
    ('aes192ccm96', 'AES 192-bit CCM encryption with 96-bit tag'),
    ('aes256ccm96', 'AES 256-bit CCM encryption with 96-bit tag'),
    ('aes128ccm128', 'AES 128-bit CCM encryption with 128-bit tag'),
    ('aes192ccm128', 'AES 192-bit CCM encryption with 128-bit tag'),
    ('aes256ccm128', 'AES 256-bit CCM encryption with 128-bit tag'),
    ('aes128gcm64', 'AES 128-bit GCM encryption with 64-bit tag'),
    ('aes192gcm64', 'AES 192-bit GCM encryption with 64-bit tag'),
    ('aes256gcm64', 'AES 256-bit GCM encryption with 64-bit tag'),
    ('aes128gcm96', 'AES 128-bit GCM encryption with 96-bit tag'),
    ('aes192gcm96', 'AES 192-bit GCM encryption with 96-bit tag'),
    ('aes256gcm96', 'AES 256-bit GCM encryption with 96-bit tag'),
    ('aes128gcm128', 'AES 128-bit GCM encryption with 128-bit tag'),
    ('aes192gcm128', 'AES 192-bit GCM encryption with 128-bit tag'),
    ('aes256gcm128', 'AES 256-bit GCM encryption with 128-bit tag'),
    ('aes128gmac', 'AES 128-bit GMAC encryption'),
    ('aes192gmac', 'AES 192-bit GMAC encryption'),
    ('aes256gmac', 'AES 256-bit GMAC encryption'),
    ('3des', 'Triple DES encryption'),
    ('blowfish128', 'Blowfish 128-bit encryption'),
    ('blowfish192', 'Blowfish 192-bit encryption'),
    ('blowfish256', 'Blowfish 256-bit encryption'),
    ('camellia128', 'Camellia 128-bit encryption'),
    ('camellia192', 'Camellia 192-bit encryption'),
    ('camellia256', 'Camellia 256-bit encryption'),
    ('camellia128ctr', 'Camellia 128-bit counter mode encryption'),
    ('camellia192ctr', 'Camellia 192-bit counter mode encryption'),
    ('camellia256ctr', 'Camellia 256-bit counter mode encryption'),
    ('camellia128ccm64', 'Camellia 128-bit CCM encryption with 64-bit tag'),
    ('camellia192ccm64', 'Camellia 192-bit CCM encryption with 64-bit tag'),
    ('camellia256ccm64', 'Camellia 256-bit CCM encryption with 64-bit tag'),
    ('camellia128ccm96', 'Camellia 128-bit CCM encryption with 96-bit tag'),
    ('camellia192ccm96', 'Camellia 192-bit CCM encryption with 96-bit tag'),
    ('camellia256ccm96', 'Camellia 256-bit CCM encryption with 96-bit tag'),
    ('camellia128ccm128', 'Camellia 128-bit CCM encryption with 128-bit tag'),
    ('camellia192ccm128', 'Camellia 192-bit CCM encryption with 128-bit tag'),
    ('camellia256ccm128', 'Camellia 256-bit CCM encryption with 128-bit tag'),
    ('serpent128', 'Serpent 128-bit encryption'),
    ('serpent192', 'Serpent 192-bit encryption'),
    ('serpent256', 'Serpent 256-bit encryption'),
    ('twofish128', 'Twofish 128-bit encryption'),
    ('twofish192', 'Twofish 192-bit encryption'),
    ('twofish256', 'Twofish 256-bit encryption'),
    ('cast128', 'CAST 128-bit encryption'),
    ('chacha20poly1305', 'ChaCha20-Poly1305 encryption');
   
  

INSERT INTO "Tenant_1001"."hash" (name, description)
VALUES
    ('md5', 'MD5 hash algorithm'),
    ('md5_128', 'MD5 hash algorithm with 128-bit output'),
    ('sha1', 'SHA-1 hash algorithm'),
    ('sha1_160', 'SHA-1 hash algorithm with 160-bit output'),
    ('sha256', 'SHA-256 hash algorithm'),
    ('sha256_96', 'SHA-256 hash algorithm with 96-bit output'),
    ('sha384', 'SHA-384 hash algorithm'),
    ('sha512', 'SHA-512 hash algorithm'),
    ('aesxcbc', 'AES-XCBC hash algorithm'),
    ('aescmac', 'AES-CMAC hash algorithm'),
    ('aes128gmac', 'AES 128-bit GMAC hash algorithm'),
    ('aes192gmac', 'AES 192-bit GMAC hash algorithm'),
    ('aes256gmac', 'AES 256-bit GMAC hash algorithm');

INSERT INTO "Tenant_1001"."dhgroup" ("group", description)
VALUES
    (1, 'Diffie-Hellman Group 1'),
    (2, 'Diffie-Hellman Group 2'),
    (5, 'Diffie-Hellman Group 5'),
    (14, 'Diffie-Hellman Group 14'),
    (15, 'Diffie-Hellman Group 15'),
    (16, 'Diffie-Hellman Group 16'),
    (17, 'Diffie-Hellman Group 17'),
    (18, 'Diffie-Hellman Group 18'),
    (19, 'Diffie-Hellman Group 19'),
    (20, 'Diffie-Hellman Group 20'),
    (21, 'Diffie-Hellman Group 21'),
    (22, 'Diffie-Hellman Group 22'),
    (23, 'Diffie-Hellman Group 23'),
    (24, 'Diffie-Hellman Group 24'),
    (25, 'Diffie-Hellman Group 25'),
    (26, 'Diffie-Hellman Group 26'),
    (27, 'Diffie-Hellman Group 27'),
    (28, 'Diffie-Hellman Group 28'),
    (29, 'Diffie-Hellman Group 29'),
    (30, 'Diffie-Hellman Group 30'),
    (31, 'Diffie-Hellman Group 31'),
    (32, 'Diffie-Hellman Group 32');
    
 
DO $$
DECLARE 
  ip text := '169.254.1.0';
  last inet := '169.254.253.255';
  parts text[];
  third_octet int;
  fourth_octet int;
BEGIN
  WHILE ip::inet <= last LOOP
    parts := string_to_array(ip, '.');
    third_octet := parts[3]::int;
    fourth_octet := parts[4]::int;
    
    IF fourth_octet % 2 = 0 THEN
      INSERT INTO "Tenant_1001"."available_ip" (address) VALUES (ip::inet);
    END IF;

    fourth_octet := fourth_octet + 1;

    IF fourth_octet > 255 THEN
      fourth_octet := 0;
      third_octet := third_octet + 1;
    END IF;

    parts[3] := third_octet::text;
    parts[4] := fourth_octet::text;

    ip := array_to_string(parts, '.');
  END LOOP;
END $$;


INSERT INTO "Tenant_1001".profiles_app_slaprofile 
(created_at, modified_at, name, delay, interval, period, jitter, timeout, success_count, threshold, mos, packetloss)
VALUES 
('2023-07-13T12:11:53.887518', '2023-07-13T12:11:53.887530', 'Default SLA profile', 150, 1000, 5, 30, 500, 100, 3, 4.5, 15.0);


INSERT INTO "Tenant_1001".profiles_app_underlayprofile 
(id, created_at, modified_at, name, transport_id, sla_profile_id, nat, shaping,control, priority,underlay_monitor  )
VALUES 
(1, '2023-07-13T12:11:53.887518', '2023-07-13T12:11:53.887530','Internet Default Underlay Profile', 1, 1, true, true, true, 100, true);

INSERT INTO "Tenant_1001".profiles_app_bfdprofile 
(id, created_at, modified_at, name, interval_receive, interval_transmit, multiplier, enabled)
VALUES 
(1, '2023-07-13T12:11:53.887518', '2023-07-13T12:11:53.887530','Default BFD Profile', 500, 500, 3, true);


INSERT INTO "Tenant_1001".profiles_app_ipsecprofile 
(id, created_at, modified_at, name, certificate_auth, dead_peer_detection, ike_lifetime, tunnel_mode)
VALUES 
(1, '2023-07-13T12:15:35.382102', '2023-07-13T12:15:35.382114', 'Default SNMP Profile', false, false, NULL, true);


 select * from "Tenant_1001"."available_ip";

 select * from "Tenant_1001"."sites_app_sdwanoverlay";
#####end /root/delta_api/delta_sase/scripts/queries.sql#####
______________________________
#####start /root/delta_api/delta_sase/scripts/db_cleanup.py#####
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import subprocess


# Connection parameters
host = '127.0.0.1'
port = '5432'
user = 'admin'
password = 'admin'

# Name of the database to delete and recreate
db_name = 'postgres'

# Create a connection to the PostgreSQL server
conn = psycopg2.connect(
    host=host,
    port=port,
    user=user,
    password=password
)

# Set the connection to autocommit mode to execute the 'CREATE DATABASE' command
conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)

# Create a cursor object
cur = conn.cursor()

try:
    # Disconnect all active connections to the database
    cur.execute(f"""
        SELECT pg_terminate_backend(pg_stat_activity.pid)
        FROM pg_stat_activity
        WHERE pg_stat_activity.datname = '{db_name}'
          AND pid <> pg_backend_pid();
    """)
    print(f"All active connections to database {db_name} have been disconnected.")
except psycopg2.Error as e:
    print(f"An error occurred while disconnecting active connections to database {db_name}: {e}")

try:
    # Delete the database
    cur.execute(f'DROP DATABASE IF EXISTS {db_name};')
    print(f"Database {db_name} deleted successfully.")
except psycopg2.Error as e:
    print(f"An error occurred while deleting database {db_name}: {e}")

try:
    # Recreate the database
    cur.execute(f'CREATE DATABASE {db_name};')
    print(f"Database {db_name} recreated successfully.")

    # After recreating the database, run the shell commands
    commands = [
        'find . -path "*/migrations/*.py" -not -name "__init__.py" -delete',
        'find . -path "*/migrations/*.pyc" -delete',
        'echo y | pip uninstall django',
        'pip install django',
        'python3 /root/delta_api/delta_sase/manage.py makemigrations',
        'python3 /root/delta_api/delta_sase/manage.py migrate',
        'python3 /root/delta_api/delta_sase/manage.py create_public',
        'python3 /root/delta_api/delta_sase/manage.py create_reserve',
        'python3 /root/delta_api/delta_sase/manage.py runserver 0.0.0.0:8053',
    ]
    for command in commands:
        subprocess.call(command, shell=True)
except psycopg2.Error as e:
    print(f"An error occurred while creating database {db_name}: {e}")

# Close the cursor and the connection
cur.close()
conn.close()
#####end /root/delta_api/delta_sase/scripts/db_cleanup.py#####
______________________________
#####start /root/delta_api/delta_sase/scripts/api_calls.py#####
import requests
import psycopg2
from psycopg2 import sql
import subprocess
import os
import time 
# n=30
# for i in range(n):
#     print("{:02d}".format(n-i), end='\r', flush=True)
#     time.sleep(1)
import threading

def get_input(input_list, user_has_responded):
    input("Press ENTER to continue...")
    user_has_responded.append(True)  # Flag that the user has responded

def countdown(n, user_has_responded):
    for i in range(n, 0, -1):
        if user_has_responded:
            break
        print(f"{i} seconds remaining...", end='\r', flush=True)
        time.sleep(1)

user_has_responded = []
input_thread = threading.Thread(target=get_input, args=([], user_has_responded))
countdown_thread = threading.Thread(target=countdown, args=(30, user_has_responded))

input_thread.start()
countdown_thread.start()

input_thread.join(timeout=30)
countdown_thread.join()

if input_thread.is_alive():
    print("Continuing after waiting for 30 seconds.")
else:
    print("User pressed ENTER.")





current_dir = os.path.dirname(os.path.abspath(__file__))
sql_file_path = os.path.join(current_dir, "queries.sql")

# Set the base url
base_url = 'http://192.168.172.71:8053'  # Replace with your base URL

# Function to post a new customer
def post_customer(url, data):
    response = requests.post(url, json=data)
    if response.status_code == 201:
        print("Customer creation successful")
        return response.json()
    else:
        print("Error in customer creation")
        return response.json()

# Function to post a new tenant
def post_tenant(url, data):
    response = requests.post(url, json=data)
    if response.status_code == 201:
        print("Tenant creation successful")
        return response.json()
    else:
        print("Error in tenant creation")
        return response.json()


def read_sql_file(file_path):
    with open(file_path, 'r') as file:
        return file.read()

# Function to post a new site
def post_call(url, data):
    response = requests.post(url, json=data)
    if response.status_code < 220:
        print("Object creation successful", response.json())
        return response.json()
    else:
        print("Error in object creation", response.json())
        return None

def execute_query(query):
    db_conn_str = "dbname='delta98' user='admin' host='192.168.172.71' password='admin' port='5433'"
    conn = None

    try:
        conn = psycopg2.connect(db_conn_str)
        cur = conn.cursor()
        cur.execute(query)
        conn.commit()
        print("Query executed successfully")
    except (Exception, psycopg2.DatabaseError) as error:
        print("Error while executing query", error)
    finally:
        if conn is not None:
            conn.close()


# # Customer data
customer_data = {"name": "Jane Smith1",
                 "email": "jane.smith1@example.com",
                 "contact_number": "0987654321",
                 "company_name": "Smith Industries",
                 "company_address": "456 Maple Ave, Anytown, USA",
                 "is_active": True}
                 

# Create customer
customer_dict = post_customer(f'{base_url}/manage/customers/', customer_data)
customer_id = customer_dict.get('id', None) if customer_dict else None

# Tenant data
tenant_data = {
    "name": "Customer 1",
    "description": "Customer 1",
    "customer_id": customer_id,
    "enabled": True,
    "production": True
}


# Create tenant
tenant_dict = post_tenant(f'{base_url}/manage/tenants/', tenant_data)
print(tenant_dict)
tenant_id = tenant_dict.get('tenant_id', None) if tenant_dict else None

    
sql_commands = read_sql_file(sql_file_path)
# print(sql_commands)
execute_query(sql_commands)


    
site_group_data = {
    "name": "Site Group 1",
    "tags": [{"name":"sitetesttag1", "value":{}}, {"name":"testtag2"}],
    "type": "hub-spoke",
    "description": "string"
}
site_group_dict = post_call(f'{base_url}/tenant/{tenant_id}/network/sitegroups/', site_group_data)
# tenant_id="1001"
# Site data
site_data = {
    "name": "Site 1",
    "tags": [{"name":"sitetesttag1", "value":{}}, {"name":"testtag2"}],
    "type": "hub",
    "description": "string",
    "site_group": ["Site Group 1"]
}
# Site data
site2_data = {
    "name": "Site 2",
    "tags": [{"name":"sitetesttag1", "value":{}}, {"name":"testtag2"}],
    "type": "branch",
    "description": "string",
    "site_group": ["Site Group 1"]
}
# Create site
site_dict = post_call(f'{base_url}/tenant/{tenant_id}/network/sites/', site_data)
site2_dict = post_call(f'{base_url}/tenant/{tenant_id}/network/sites/', site2_data)

# Site data
device_data = {
    "serial_number": "111111",
    "model": 1,
    "software": 1,
    "site": 1
}
# Site data
device2_data = {
    "serial_number": "22222",
    "model": 1,
    "software": 1,
}
# Create site
device_dict = post_call(f'{base_url}/tenant/{tenant_id}/network/devices/', device_data)
device2_dict = post_call(f'{base_url}/tenant/{tenant_id}/network/devices/', device2_data)


eth_data= {
  "name": "eth0",
  "mtu": 1500,
  "adjust_mss": 1460,
  "dhcp_client": False,
  "role": "lan",
  "type": "eth",
  "vrf": "200",
  "admin_state": True
}
eth_dict={}
for e in range(10):
    eth_data["name"]= "eth"+str(e) 
    eth_dict[e]=post_call(f'{base_url}/tenant/{tenant_id}/network/devices/{device_dict["id"]}/interfaces/', eth_data)
    print(f"interface eth{e} created \n")

bond_data= {
  "name": "bond2",
  "mtu": 1500,
  "adjust_mss": 1460,
  "dhcp_client": False,
  "role": "lan",
  "type": "bond",
  "vrf": "100",
  "admin_state": True,
  "hash": "layer2+3",
  "members": ["eth1", "eth2"]
}

bond_dict = post_call(f'{base_url}/tenant/{tenant_id}/network/devices/{device_dict["id"]}/interfaces/', bond_data)

bridge_data= {
  "name": "bridge1",
  "mtu": 1500,
  "adjust_mss": 1460,
  "dhcp_client": False,
  "role": "lan",
  "type": "bridge",
  "vrf": "100",
  "admin_state": True,
  "members":["eth3"]
}


bridge_dict = post_call(f'{base_url}/tenant/{tenant_id}/network/devices/{device_dict["id"]}/interfaces/', bridge_data)
#####end /root/delta_api/delta_sase/scripts/api_calls.py#####
______________________________
#####start /root/delta_api/delta_sase/scripts/create_support.py#####
import requests
import json
from termcolor import colored  # Added for colorizing output
import subprocess

# API endpoint
API_ENDPOINT = "http://10.1.1.21:8053/api/v1/"


def run_generate_jwt_script():
    """Function to run the generate_jwt.py script."""
    command = "python3 /root/delta_api/JWT/generate_jwt.py"
    try:
        subprocess.run(command, shell=True, check=True)
        print("generate_jwt.py script executed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")


def load_jwt_token(file_path):
    """Load JWT token from a file."""
    with open(file_path, 'r') as file:
        return file.read().strip()

run_generate_jwt_script()   
jwt_token = load_jwt_token("/root/delta_api/JWT/amir_jwt.txt")

# Common headers
headers = {
        "Authorization": f"Bearer {jwt_token}",
        "Content-Type": "application/json"
    }

def post_request(path, data):
    """Function to send POST request and handle errors."""
    full_url = f"{API_ENDPOINT}{path}/"
    json_data = json.dumps(data, indent=4)
    
    # Print formatted JSON data
    ## print("Data being sent as JSON:", json_data)
    try:
        response = requests.post(full_url, json=data, headers=headers)
        response.raise_for_status()
        response_json = response.json()
        # print("Response JSON:", json.dumps(response_json, indent=4))
        # Print success message in green color
        print(colored(f"Item {path} {data['name']} created!", "green"))
        return response_json
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        # Print failure message in red color
        print(colored(f"Item {path} {data['name']} failed to create", "red"))
        return None
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        # Print failure message in red color
        print(colored(f"Item {path} {data['name']} failed to create", "red"))
        return None
    except ValueError:
        print("Invalid JSON response.")
        # Print failure message in red color
        print(colored(f"Item {path} {data['name']} failed to create", "red"))
        return None

# Create regions
regions = ["us-east-1", "us-west-2", "eu-west-1", "ap-southeast-1", "sa-east-1"]
for region in regions:
    region_data = {"name": region, "cloud": "aws"}
    post_request("network/regions", region_data)

# Create products and categories
products = ["SDWAN", "Security", "CASB", "SASE", "Ingress"]
for product in products:
    product_data = {"name": product, "unit": "qt", "price": 1000}
    post_request("manage/products", product_data)

# IKE and ESP configurations
ike_encryptions = ["AES-128", "AES-256", "3DES"]
ike_hashes = ["SHA1", "SHA256", "MD5"]
ike_dh_groups = ["Group1", "Group2", "Group5"]
ike_rpfs = ["YES", "NO"]
esp_encryptions = ["AES-128", "AES-256", "3DES"]
esp_hashes = ["SHA1", "SHA256", "MD5"]
esp_dh_groups = ["Group1", "Group2", "Group5"]
esp_pfss = ["YES", "NO"]

# IKE and ESP configurations
for encryption in ike_encryptions:
    post_request("support/ike/encrypt", {"name": encryption})

for hash in ike_hashes:
    post_request("support/ike/hash", {"name": hash})

for dh_group in ike_dh_groups:
    post_request("support/ike/dh", {"name": dh_group})

for rpf in ike_rpfs:
    post_request("support/ike/rpf", {"name": rpf})

for encryption in esp_encryptions:
    post_request("support/esp/encrypt", {"name": encryption})

for hash in esp_hashes:
    post_request("support/esp/hash", {"name": hash})

for dh_group in esp_dh_groups:
    post_request("support/esp/dh", {"name": dh_group})

for pfs in esp_pfss:
    post_request("support/esp/pfs", {"name": pfs})

# Create Routing Protocols, Interface Roles, Device Models, VRF Roles, LACP Hash Options
routing_protocols = ["BGP", "Static", "OSPF", "ISIS"]
interface_roles = ["LAN", "Internet", "WAN", "HA", "MGMT", "Lo0", "Overlay",
                   "Bridge", "SVI", "LAG", "Eth", "VLAN", "Loopback", "Tunnel", "VTI", "Veth"]
device_models = ["DSN-1000", "DSN-3000", "DSN-2000"]
vrf_roles = ["LAN", "Internet", "WAN", "Overlay", "MGMT", "CTRL", "SASE"]
lacp_hash_options = ["src-l2", "src-dst-l2", "src-l3", "src-dst-l3", "src-l4", "src-dst-l4"]

# Routing Protocols
for protocol in routing_protocols:
    protocol_data = {"name": protocol}
    post_request("support/protocols/routing", protocol_data)

# Interface Roles
for role in interface_roles:
    role_data = {"name": role}
    post_request("support/interfaces/roles", role_data)

# Device Models
for model in device_models:
    model_data = {"name": model}
    post_request("support/devices/models", model_data)

# VRF Roles
for vrf_role in vrf_roles:
    vrf_role_data = {"name": vrf_role}
    post_request("support/vrf/role", vrf_role_data)

# LACP Hash Options
for option in lacp_hash_options:
    option_data = {"name": option}
    post_request("support/lacp/hash", option_data)

print("All configurations and objects created successfully.")

#####end /root/delta_api/delta_sase/scripts/create_support.py#####
______________________________
#####start /root/delta_api/delta_sase/scripts/create_tenant.py#####
import requests
import argparse
import json
import random
from termcolor import colored

# Setup command line arguments
parser = argparse.ArgumentParser(description="Create or delete objects in Delta SASE system.")
parser.add_argument("-n", "--number", type=int, help="Number of tenants to create")
parser.add_argument("-t", "--tenant", help="Specify a single tenant to create")
parser.add_argument("-d", "--delete", help="Delete a specific tenant by name or delete all tenants with IDs greater than the specified value")
args = parser.parse_args()

# API endpoint
API_ENDPOINT = "http://10.1.1.21:8053/api/v1/manage/"

def load_jwt_token(file_path):
    """Load JWT token from a file."""
    with open(file_path, 'r') as file:
        return file.read().strip()

jwt_token = load_jwt_token("/root/delta_api/JWT/amir_jwt.txt")

headers = {
    "Authorization": f"Bearer {jwt_token}",
    "Content-Type": "application/json"
}

# Tracking successful and failed API calls
successful_calls = []
failed_calls = []

def get_request(path):
    """Function to send GET request and return the response as JSON."""
    full_url = f"{API_ENDPOINT}{path}/"
    try:
        response = requests.get(full_url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        return []
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        return []

def patch_request(path, data):
    """Function to send PATCH request and handle errors."""
    full_url = f"{API_ENDPOINT}{path}/"
    json_data = json.dumps(data, indent=4)
    print("Data being sent as JSON:", json_data)  # Print formatted JSON data
    try:
        response = requests.patch(full_url, json=data, headers=headers)
        response.raise_for_status()
        response_json = response.json()
        print("Response JSON:", json.dumps(response_json, indent=4))
        successful_calls.append("PATCH "+full_url)
        return response_json
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        failed_calls.append("PATCH "+full_url)
        return None
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        failed_calls.append("PATCH "+full_url)
        return None
    except ValueError:
        print("Invalid JSON response.")
        failed_calls.append("PATCH "+full_url)
        return None
    
def delete_request(path):
    """Function to send DELETE request."""
    full_url = f"{API_ENDPOINT}{path}/"
    try:
        response = requests.delete(full_url, headers=headers)
        response.raise_for_status()
        print(f"Deleted: {full_url}")
        successful_calls.append("DELETE "+full_url)
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        failed_calls.append("DELETE "+full_url)
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        failed_calls.append("DELETE "+full_url)

def post_request(path, data):
    """Function to send POST request and handle errors."""
    full_url = f"{API_ENDPOINT}{path}/"
    json_data = json.dumps(data, indent=4)
    print("Data being sent as JSON:", json_data)  # Print formatted JSON data
    try:
        response = requests.post(full_url, json=data, headers=headers)
        response.raise_for_status()
        response_json = response.json()
        print("Response JSON:", json.dumps(response_json, indent=4))
        successful_calls.append("POST "+full_url)
        return response_json
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        failed_calls.append("POST "+full_url)
        return None
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
        failed_calls.append("POST "+full_url)
        return None
    except ValueError:
        print("Invalid JSON response.")
        failed_calls.append("POST "+full_url)
        return None

def create_tenant(name, customer_id):
    """Function to create a tenant."""
    tenant_data = {
        "name": name,
        "customer": customer_id,
        "tags": [
            {"key": "Environment", "value": "Test"},
            {"key": "Priority", "value": "High"}
        ]
    }
    tenant = post_request("tenants", tenant_data)
    if tenant:
        print("Tenant created with ID:", tenant.get("id"))

# Handle tenant creation
if args.number:
    customers = get_request("customers")
    if not customers:
        print("No customers found. Please create customers first.")
    else:
        for _ in range(args.number):
            random_customer = random.choice(customers)
            create_tenant(f"Tenant_{random.randint(1, 100)}", random_customer["id"])
elif args.tenant:
    customers = get_request("customers")
    if not customers:
        print("No customers found. Please create customers first.")
    else:
        random_customer = random.choice(customers)
        create_tenant(args.tenant, random_customer["id"])
else:
    customers = get_request("customers")
    if not customers:
        print("No customers found. Please create customers first.")
    else:
        random_customer = random.choice(customers)
        create_tenant(f"Tenant_{random.randint(1, 100)}", random_customer["id"])

# Handle tenant deletion
if args.delete:
    if args.delete == '0':
        # Delete all tenants with IDs greater than 2
        tenants = get_request("tenants")
        if tenants:
            for tenant in tenants:
                if tenant["id"] > 2:
                    patch_request(f"tenants/{tenant['id']}", {"enabled": False})
                    delete_request(f"tenants/{tenant['id']}")
    else:
        # Delete a specific tenant by name
        tenants = get_request(f"tenants/?name={args.delete}")
        if tenants:
            for tenant in tenants:
                patch_request(f"tenants/{tenant['id']}", {"enabled": False})
                delete_request(f"tenants/{tenant['id']}")

# Print successful and failed API calls
print("Successful API calls:")
for call in successful_calls:
    print(colored(call, "green"))
print("\nFailed API calls:")
for call in failed_calls:
    print(colored(call, "red"))

#####end /root/delta_api/delta_sase/scripts/create_tenant.py#####
______________________________
#####start /root/delta_api/delta_sase/scripts/tests/tenants_app.py#####
import requests

# Configuration
base_url = 'http://10.1.1.21:8053/api/v1/'  # Adjust this to your actual API endpoint
headers = {'Content-Type': 'application/json', 'user_id': 'test@deltasase.com'}  # Include your actual user_id or authentication token

# Helper function to send requests
def send_request(method, url, data=None):
    try:
        response = requests.request(method, url, json=data, headers=headers)
        response.raise_for_status()  # Will raise an HTTPError for bad responses
        if response.text:
            return response.json()  # Return JSON if there is a response body
        return {}
    except requests.exceptions.HTTPError as http_err:
        print(f'HTTP error occurred: {http_err} - {response.text}')
    except Exception as err:
        print(f'Other error occurred: {err}')

# Create, update, and delete resources
def manage_resources():
    try:
        # Create Customer
        customer_data = {"name": "Customer A", "company_name": "Company A"}
        customer = send_request('POST', f'{base_url}manage/customers/', customer_data)
        customer_id = customer.get('id')

        # Create Contact for Customer
        contact_data = {"customer": customer_id, "name": "Contact A", "email": "contact@example.com"}
        contact = send_request('POST', f'{base_url}manage/contacts/', contact_data)
        contact_id = contact.get('id')

        # Create Tenant for Customer
        tenant_data = {"customer": customer_id, "name": "Tenant A", "schema_name": "tenant_a"}
        tenant = send_request('POST', f'{base_url}manage/tenants/', tenant_data)
        tenant_id = tenant.get('id')

        # Create SDWAN Software
        sdwan_data = {"name": "SDWAN Product A", "url": "http://sdwan-product-a.com"}
        sdwan_product = send_request('POST', f'{base_url}support/sdwan/software/', sdwan_data)
        sdwan_product_id = sdwan_product.get('id')

        # Create License
        license_data = {"name": "License A","unit": "qt",  "price": 100.00}
        license = send_request('POST', f'{base_url}manage/licenses/', license_data)
        license_id = license.get('id')

        # Update Customer
        updated_customer_data = {"company_name": "Updated Company A"}
        send_request('PATCH', f'{base_url}manage/customers/{customer_id}/', updated_customer_data)

        # Update Tenant to include products and licenses
        updated_tenant_data = {"products": [sdwan_product_id], "licenses": [license_id]}
        send_request('PUT', f'{base_url}manage/tenants/{tenant_id}/', updated_tenant_data)

        # Cleanup resources in reverse order of creation
        send_request('DELETE', f'{base_url}manage/tenants/{tenant_id}/')
        send_request('DELETE', f'{base_url}manage/licenses/{license_id}/')
        send_request('DELETE', f'{base_url}support/sdwan/software/{sdwan_product_id}/')
        send_request('DELETE', f'{base_url}manage/contacts/{contact_id}/')
        send_request('DELETE', f'{base_url}manage/customers/{customer_id}/')

        print("All operations completed successfully.")

    except Exception as e:
        print(f'Failed to manage resources due to: {e}')

# Execute the resource management function
manage_resources()

#####end /root/delta_api/delta_sase/scripts/tests/tenants_app.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/apps.py#####
# # tenants_app/apps.py
# from django.apps import AppConfig

# class TenantsAppConfig(AppConfig):
#     default_auto_field = 'django.db.models.BigAutoField'
#     name = 'tenants_app'

#     def ready(self):
#         # Import your signals here
#         import tenants_app.signals  # replace 'tenants_app' with your app's actual name

#####end /root/delta_api/delta_sase/tenants_app/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/tenant_create.py#####
"""

interfaces_app_interfacerole
interfaces_app_interfacetype
"""
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import sys


def execute_query(ip, port, username, password, db_name, query):
    conn = None
    try:
        # Establish connection to PostgreSQL database
        conn = psycopg2.connect(
            host=ip,
            port=port,
            user=username,
            password=password,
            dbname=db_name
        )
        cur = conn.cursor()
        cur.execute(query)
        rows = cur.fetchall()
        for row in rows:
            print(row)
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print("Error", error)
    finally:
        if conn is not None:
            conn.close()

def create_interface_types(ip, port, username, password, db_name):
    query = f"""
        INSERT INTO "{schema_name}"."interfaces_app_interfacetype" (type) 
        VALUES 
        ('ethernet'),
        ('bonding'),
        ('dummy'),
        ('bridge'),
        ('openvpn'),
        ('loopback'),
        ('tunnel'),
        ('virtual-ethernet'),
        ('vti'),
        ('vxlan'),
        ('wireless'),
        ('wireguard'),
        ('wwan'),
        ('sstpc');
    """
    execute_query(ip, port, username, password, db_name, query)


def create_interface_types(schema_name, ip, port, username, password, db_name):
    query = f"""
        INSERT INTO "{schema_name}"."interfaces_app_interfacetype" (type) 
        VALUES 
        ('ethernet'),
        ('bonding'),
        ('dummy'),
        ('bridge'),
        ('openvpn'),
        ('loopback'),
        ('tunnel'),
        ('virtual-ethernet'),
        ('vti'),
        ('vxlan'),
        ('wireless'),
        ('wireguard'),
        ('wwan'),
        ('sstpc');
    """
    execute_query(ip, port, username, password, db_name, query)


def create_interface_roles(schema_name, ip, port, username, password, db_name):
    query = f"""
        INSERT INTO "{schema_name}"."interfaces_app_interfacerole" (role) 
        VALUES 
        ('lan'),
        ('internet'),
        ('private_underlay'),
        ('v-internet'),
        ('v-ctrl'),
        ('mgmt'),
        ('sdwan'),
        ('sase'),
        ('ctrl');
        """
    execute_query(ip, port, username, password, db_name, query)


if __name__ == "__main__":
    # These variables should come from your application's configuration
    db_name = 'delta98'  # replace with your database name
    username = 'admin'  # replace with your username
    password = 'admin'  # replace with your password
    ip = '192.168.172.71'  # replace with your host
    port = '5433'  # replace with your port

    # schema_name will come as a command line argument
    if len(sys.argv) > 1:
        schema_name = sys.argv[1]
        # create_interface_types(schema_name, ip, port, username, password, db_name)
        # create_interface_roles(schema_name, ip, port, username, password, db_name)

        query = f"""
            INSERT INTO "{schema_name}"."interfaces_app_interfacetype" (type) 
            VALUES 
            ('ethernet'),
            ('bonding'),
            ('dummy'),
            ('bridge'),
            ('openvpn'),
            ('loopback'),
            ('tunnel'),
            ('virtual-ethernet'),
            ('vti'),
            ('vxlan'),
            ('wireless'),
            ('wireguard'),
            ('wwan'),
            ('sstpc');
        """
        execute_query(ip, port, username, password, db_name, query)
    else:
        print("Please provide a schema name as an argument when running the script.")

#####end /root/delta_api/delta_sase/tenants_app/tenant_create.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/__init__.py#####

#####end /root/delta_api/delta_sase/tenants_app/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/serializers.py#####
# tenants_app/serializers.py
from rest_framework import serializers
from .models import (ShareBase, Product, ProductCategory, License, Region, SCE, SASEController,
                     SDWANController, Contact, Customer, AdminUser, Tenant, ShareTag,
                     IKEEncryption, IKEHash, IKEDHGroup, IKERPF, ESPEncryption,
                     InterfaceType, InterfaceRole, VRFRole, LACPHashOption, DeviceModel,
                     ESPHash, ESPDHGroup, ESPPFS, RoutingProtocol, SDWANSoftware)
from django.core.exceptions import ValidationError  # Import ValidationError
import logging

logger = logging.getLogger(__name__)

class ShareTagSerializer(serializers.ModelSerializer):
    class Meta:
        model = ShareTag
        fields = ['key', 'value']

class ErrorHandlingMixin:
    def is_valid(self, raise_exception=False):
        try:
            super().is_valid(raise_exception=True)
        except ValidationError as e:
            logger.error(f"Validation error: {e.detail}")
            raise ValidationError({'error': 'Validation failed', 'details': e.detail})

class SharedBaseModelSerializer(ErrorHandlingMixin, serializers.ModelSerializer):
    tags = ShareTagSerializer(many=True, required=False)
    object_id = serializers.CharField(read_only=True) 
    uuid = serializers.CharField(read_only=True) 
    created_by = serializers.CharField(read_only=True)
    modified_by = serializers.CharField(read_only=True)
    created_at = serializers.DateTimeField(read_only=True)  # Ensure created_at is read-only
    modified_at = serializers.DateTimeField(read_only=True)  # Ensure modified_at is read-only
    
    class Meta:
        model = ShareBase
        exclude = ['id']
        read_only_fields = ['uuid', 'object_id', 'created_at', 'modified_at', 'modified_by', 'created_by']    

    def create(self, validated_data):
        tags_data = validated_data.pop('tags', [])
        instance = super().create(validated_data)
        self.update_or_create_tags(instance, tags_data)
        return instance

    def update(self, instance, validated_data):
        tags_data = validated_data.pop('tags', [])
        instance = super().update(instance, validated_data)
        self.update_or_create_tags(instance, tags_data)
        return instance

    def update_or_create_tags(self, instance, tags_data):
        instance.tags.clear()
        for tag_data in tags_data:
            tag, created = ShareTag.objects.get_or_create(
                key=tag_data['key'],
                defaults={'value': tag_data['value']}
            )
            instance.tags.add(tag)


class ProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = '__all__'

class ProductCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = ProductCategory
        fields = '__all__'

class LicenseSerializer(serializers.ModelSerializer):
    class Meta:
        model = License
        fields = '__all__'

class RegionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Region
        fields = '__all__'

class SCESerializer(serializers.ModelSerializer):
    class Meta:
        model = SCE
        fields = '__all__'

class SASEControllerSerializer(serializers.ModelSerializer):
    class Meta:
        model = SASEController
        fields = '__all__'

class SDWANControllerSerializer(serializers.ModelSerializer):
    class Meta:
        model = SDWANController
        fields = '__all__'

class ContactSerializer(serializers.ModelSerializer):
    class Meta:
        model = Contact
        fields = '__all__'

class AdminUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = AdminUser
        fields = '__all__'

class SDWANSoftwareSerializer(serializers.ModelSerializer):
    class Meta:
        model = SDWANSoftware
        fields = '__all__'

class InterfaceTypeSerializer(serializers.ModelSerializer):
    class Meta:
        model = InterfaceType
        fields = '__all__'

class InterfaceRoleSerializer(serializers.ModelSerializer):
    class Meta:
        model = InterfaceRole
        fields = '__all__'

class VRFRoleSerializer(serializers.ModelSerializer):
    class Meta:
        model = VRFRole
        fields = '__all__'

class LACPHashOptionSerializer(serializers.ModelSerializer):
    class Meta:
        model = LACPHashOption
        fields = '__all__'

class DeviceModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = DeviceModel
        fields = '__all__'

class IKEEncryptionSerializer(serializers.ModelSerializer):
    class Meta:
        model = IKEEncryption
        fields = '__all__'

class IKEHashSerializer(serializers.ModelSerializer):
    class Meta:
        model = IKEHash
        fields = '__all__'

class IKEDHGroupSerializer(serializers.ModelSerializer):
    class Meta:
        model = IKEDHGroup
        fields = '__all__'

class IKERPFSerializer(serializers.ModelSerializer):
    class Meta:
        model = IKERPF
        fields = '__all__'

class ESPEncryptionSerializer(serializers.ModelSerializer):
    class Meta:
        model = ESPEncryption
        fields = '__all__'

class ESPHashSerializer(serializers.ModelSerializer):
    class Meta:
        model = ESPHash
        fields = '__all__'

class ESPDHGroupSerializer(serializers.ModelSerializer):
    class Meta:
        model = ESPDHGroup
        fields = '__all__'

class ESPPFSSerializer(serializers.ModelSerializer):
    class Meta:
        model = ESPPFS
        fields = '__all__'

class RoutingProtocolSerializer(serializers.ModelSerializer):
    class Meta:
        model = RoutingProtocol
        fields = '__all__'

class TenantSerializer(serializers.ModelSerializer):
    admins = AdminUserSerializer(many=True, required=False)
    products = ProductSerializer(many=True, required=False)
    licenses = LicenseSerializer(many=True, required=False)
    softwares = SDWANSoftwareSerializer(many=True, required=False)
    tags = ShareTagSerializer(many=True, required=False)
    
    class Meta:
        model = Tenant
        fields = '__all__'
        read_only_fields = ('schema_name', 'tenant_id')  # Make these fields read-only

    def create(self, validated_data):
        admins_data = validated_data.pop('admins', [])
        products_data = validated_data.pop('products', [])
        licenses_data = validated_data.pop('licenses', [])
        softwares_data = validated_data.pop('softwares', [])
        tags_data = validated_data.pop('tags', [])
        user_id = self.context.get('user_id')
        print("USER_ID is : ",user_id)

        # Create the Tenant object and manually set `created_by` and `modified_by`
        tenant = Tenant(**validated_data)
        if user_id:
            tenant.created_by = user_id
            tenant.modified_by = user_id
        tenant.save()

        self._handle_related_objects(tenant, admins_data, products_data, licenses_data, softwares_data, tags_data)
        return tenant
    
    def update(self, instance, validated_data):
        # Custom update logic, can ensure schema_name and tenant_id are not updated
        # This is just extra safeguarding; 'read_only_fields' already handles it
        instance.name = validated_data.get('name', instance.name)
        instance.description = validated_data.get('description', instance.description)
        user_id = self.context.get('user_id')
        instance.modified_by = user_id
        # Ensure no updates to schema_name or tenant_id here
        return super().update(instance, validated_data)

    def _handle_related_objects(self, tenant, admins_data, products_data, licenses_data, softwares_data, tags_data):
        for admin_data in admins_data:
            admin, created = AdminUser.objects.get_or_create(**admin_data)
            tenant.admins.add(admin)

        for product_data in products_data:
            product, created = Product.objects.get_or_create(**product_data)
            tenant.products.add(product)

        for license_data in licenses_data:
            license, created = License.objects.get_or_create(**license_data)
            tenant.licenses.add(license)

        for software_data in softwares_data:
            software, created = SDWANSoftware.objects.get_or_create(**software_data)
            tenant.softwares.add(software)

        for tag_data in tags_data:
            tag, created = ShareTag.objects.get_or_create(**tag_data)
            tenant.tags.add(tag)

class CustomerSerializer(serializers.ModelSerializer):
    contacts = ContactSerializer(many=True, read_only=True)

    class Meta:
        model = Customer
        fields = '__all__'
#####end /root/delta_api/delta_sase/tenants_app/serializers.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/forms.py#####
from django import forms


class GenerateUsersForm(forms.Form):
    pass

#####end /root/delta_api/delta_sase/tenants_app/forms.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/views.py#####
# tenants_app/views.py
from rest_framework import viewsets, status, serializers
from rest_framework.decorators import action
from rest_framework.response import Response
from django.utils import timezone
from django.db import transaction
from .models import (Product, ProductCategory, License, Region, SCE, SASEController,
                     SDWANController, Contact, Customer, AdminUser, Tenant, ShareTag,
                     IKEEncryption, IKEHash, IKEDHGroup, IKERPF, ESPEncryption, DeletedTenant,
                     InterfaceType, InterfaceRole, VRFRole, LACPHashOption, DeviceModel,
                     ESPHash, ESPDHGroup, ESPPFS, RoutingProtocol, Domain, SDWANSoftware)
from .serializers import (ProductSerializer, ProductCategorySerializer, LicenseSerializer,
                          RegionSerializer, SCESerializer, SASEControllerSerializer,
                          SDWANControllerSerializer, ContactSerializer, CustomerSerializer,
                          AdminUserSerializer, TenantSerializer, ShareTagSerializer,
                          IKEEncryptionSerializer, IKEHashSerializer, IKEDHGroupSerializer,
                          IKERPFSerializer, ESPEncryptionSerializer, ESPHashSerializer,
                          InterfaceTypeSerializer, InterfaceRoleSerializer, VRFRoleSerializer, LACPHashOptionSerializer, DeviceModelSerializer,
                          ESPDHGroupSerializer, ESPPFSSerializer, RoutingProtocolSerializer, SDWANSoftwareSerializer)

from django.db import connection
from django.db.utils import ProgrammingError
import logging
from .default_settings import copy_data_from_default

logger = logging.getLogger(__name__)

class TenantViewSet(viewsets.ModelViewSet):
    queryset = Tenant.objects.all()
    serializer_class = TenantSerializer

    def perform_create(self, serializer):
        try:
            tenant = serializer.save()  # Create the tenant
            domain = Domain(domain=str(tenant.tenant_id), tenant=tenant, is_primary=True)
            domain.save()
            # copy_data_from_default(tenant)  # Uncomment and handle this properly
            logger.info(f"Created new Tenant {tenant.name} with domain {domain.domain}")
        except Exception as e:
            logger.error(f"Failed to create tenant or domain: {str(e)}")
            raise serializers.ValidationError("Failed to create tenant or domain")
    @transaction.atomic
    def perform_destroy(self, instance):
        try:
            logger.info(f"Attempting to delete tenant: {instance.name}")
            DeletedTenant.objects.create(
                tenant_id=instance.tenant_id,
                schema_name=instance.schema_name,
                name=instance.name,
                description=instance.description,
                deleted_by=self.request.user_id,
                deleted_at=timezone.now(),
                customer=instance.customer,
                config=instance.config,
                snapshot=instance.snapshot,
                detail=instance.detail
            )
            # This deletes the domain and tenant, including dropping the schema if auto_drop_schema is True
            instance.domains.all().delete()  # Clean up related domains first
            instance.delete()  # This should also drop the schema due to auto_drop_schema being True
            logger.info(f"Hard deleted tenant {instance.name} and its schema.")
        except Exception as e:
            logger.error(f"Failed to delete tenant {instance.name}: {str(e)}")
            raise serializers.ValidationError("Failed to delete tenant")

    @action(detail=True, methods=['get'])
    def children(self, request, pk=None):
        tenant = self.get_object()
        children = TenantSerializer(tenant.get_children(), many=True).data
        return Response(children, status=status.HTTP_200_OK)

    def get_serializer_context(self):
        """
        Extra context provided to the serializer class.
        """
        context = super(TenantViewSet, self).get_serializer_context()
        context['user_id'] = self.request.user_id  # Assuming `user_id` is set in the request by middleware
        return context

class SDWANSoftwareViewSet(viewsets.ModelViewSet):
    queryset = SDWANSoftware.objects.all()
    serializer_class = SDWANSoftwareSerializer

class CustomerViewSet(viewsets.ModelViewSet):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer

class ShareTagViewSet(viewsets.ModelViewSet):
    queryset = ShareTag.objects.all()
    serializer_class = ShareTagSerializer

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductCategoryViewSet(viewsets.ModelViewSet):
    queryset = ProductCategory.objects.all()
    serializer_class = ProductCategorySerializer

class LicenseViewSet(viewsets.ModelViewSet):
    queryset = License.objects.all()
    serializer_class = LicenseSerializer

class RegionViewSet(viewsets.ModelViewSet):
    queryset = Region.objects.all()
    serializer_class = RegionSerializer

class SCEViewSet(viewsets.ModelViewSet):
    queryset = SCE.objects.all()
    serializer_class = SCESerializer

class SASEControllerViewSet(viewsets.ModelViewSet):
    queryset = SASEController.objects.all()
    serializer_class = SASEControllerSerializer

class SDWANControllerViewSet(viewsets.ModelViewSet):
    queryset = SDWANController.objects.all()
    serializer_class = SDWANControllerSerializer

class ContactViewSet(viewsets.ModelViewSet):
    queryset = Contact.objects.all()
    serializer_class = ContactSerializer

class AdminUserViewSet(viewsets.ModelViewSet):
    queryset = AdminUser.objects.all()
    serializer_class = AdminUserSerializer

class IKEEncryptionViewSet(viewsets.ModelViewSet):
    queryset = IKEEncryption.objects.all()
    serializer_class = IKEEncryptionSerializer

class IKEHashViewSet(viewsets.ModelViewSet):
    queryset = IKEHash.objects.all()
    serializer_class = IKEHashSerializer

class IKEDHGroupViewSet(viewsets.ModelViewSet):
    queryset = IKEDHGroup.objects.all()
    serializer_class = IKEDHGroupSerializer

class IKERPFViewSet(viewsets.ModelViewSet):
    queryset = IKERPF.objects.all()
    serializer_class = IKERPFSerializer

class ESPEncryptionViewSet(viewsets.ModelViewSet):
    queryset = ESPEncryption.objects.all()
    serializer_class = ESPEncryptionSerializer

class ESPHashViewSet(viewsets.ModelViewSet):
    queryset = ESPHash.objects.all()
    serializer_class = ESPHashSerializer

class ESPDHGroupViewSet(viewsets.ModelViewSet):
    queryset = ESPDHGroup.objects.all()
    serializer_class = ESPDHGroupSerializer

class ESPPFSViewSet(viewsets.ModelViewSet):
    queryset = ESPPFS.objects.all()
    serializer_class = ESPPFSSerializer

class RoutingProtocolViewSet(viewsets.ModelViewSet):
    queryset = RoutingProtocol.objects.all()
    serializer_class = RoutingProtocolSerializer

class InterfaceTypeViewSet(viewsets.ModelViewSet):
    queryset = InterfaceType.objects.all()
    serializer_class = InterfaceTypeSerializer

class InterfaceRoleViewSet(viewsets.ModelViewSet):
    queryset = InterfaceRole.objects.all()
    serializer_class = InterfaceRoleSerializer

class VRFRoleViewSet(viewsets.ModelViewSet):
    queryset = VRFRole.objects.all()
    serializer_class = VRFRoleSerializer

class LACPHashOptionViewSet(viewsets.ModelViewSet):
    queryset = LACPHashOption.objects.all()
    serializer_class = LACPHashOptionSerializer

class DeviceModelViewSet(viewsets.ModelViewSet):
    queryset = DeviceModel.objects.all()
    serializer_class = DeviceModelSerializer

#####end /root/delta_api/delta_sase/tenants_app/views.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/default_settings.py#####
# default_settings.py
from django.db import connection

def get_table_names():
    with connection.cursor() as cursor:
        cursor.execute("""SELECT table_name FROM information_schema.tables WHERE table_schema = 'default'""")
        return [row[0] for row in cursor.fetchall()]

def copy_data_from_default(tenant):
    table_names = get_table_names()
    with connection.cursor() as cursor:
        for table in table_names:
            cursor.execute(f"""
                INSERT INTO {tenant.schema_name}.{table} 
                SELECT * FROM default.{table}
            """)

#####end /root/delta_api/delta_sase/tenants_app/default_settings.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/tenants_app/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/tenants_app/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/signals.py#####
# # signals.py
# from django.db.models.signals import post_save
# from django.dispatch import receiver
# from .models import Tenant
# from . import default_settings


# @receiver(post_save, sender=Tenant)
# def tenant_created(sender, instance, created, **kwargs):
#     if created:
#         default_settings.create_objects(instance.id)
#####end /root/delta_api/delta_sase/tenants_app/signals.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/models.py#####
# Tenants_app models
from django.db import models ,transaction
from django_tenants.models import TenantMixin, DomainMixin
from django.core.exceptions import ValidationError  # Import ValidationError
from django.db.models import Max
from django.utils import timezone
from django.utils.deprecation import MiddlewareMixin
import logging

logger = logging.getLogger(__name__)

class ShareBase(models.Model):
    name = models.CharField(max_length=255, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.CharField(max_length=100, null=True, blank=True)
    modified_at = models.DateTimeField(auto_now=True)
    modified_by = models.CharField(max_length=100, null=True, blank=True)
    deleted_at = models.DateTimeField(null=True, blank=True)
    deleted_by = models.CharField(max_length=100, null=True, blank=True)
    detail = models.JSONField(null=True, blank=True)
    active = models.BooleanField(default=True)

    class Meta:
        abstract = True
    
    def save(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        if not self.pk:  # Object is being created
            self.created_by = user_id
        self.modified_by = user_id
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        self.deleted_at = timezone.now()
        self.deleted_by = user_id
        super().delete(*args, **kwargs)

class ShareTag(models.Model):
    key = models.CharField(max_length=100)
    value = models.JSONField()
    
    def __str__(self):
        return f"{self.key}: {self.value}"

class SDWANSoftware(ShareBase):
    tags = models.ManyToManyField(ShareTag, related_name='sdwan_software_tags', null=True, blank=True)
    production = models.BooleanField(default=True)
    url= models.URLField()

    def __str__(self):
        return f"{self.name} v{self.version}"

class Product(ShareBase):
    unit = models.CharField(max_length=100, null=True, blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    category = models.ForeignKey('ProductCategory', on_delete=models.SET_NULL, null=True, blank=True)
    tags = models.ManyToManyField(ShareTag, related_name='products_tags', null=True, blank=True)
    
    def __str__(self):
        return self.name

class ProductCategory(ShareBase):
    unit = models.CharField(max_length=100)
    ppu = models.DecimalField(max_digits=10, decimal_places=2)
    
    def __str__(self):
        return self.name

class License(ShareBase):
    unit = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    tags = models.ManyToManyField(ShareTag, related_name='licenses', null=True, blank=True)
    
    def __str__(self):
        return self.name

class Region(ShareBase):
    cloud = models.CharField(max_length=100)
    tags = models.ManyToManyField(ShareTag, related_name='regions', null=True, blank=True)
    
    def __str__(self):
        return self.name

class SCE(ShareBase):
    region = models.ForeignKey(Region, on_delete=models.CASCADE)
    total_capacity = models.IntegerField()
    available_capacity = models.IntegerField()
    mgmt_ip = models.GenericIPAddressField()
    mgmt_url = models.URLField()
    certificate = models.TextField()
    enabled = models.BooleanField(default=True)
    dedicated = models.BooleanField(default=False)
    tags = models.ManyToManyField(ShareTag, related_name='sces', null=True, blank=True)
    
    def __str__(self):
        return self.name

class SASEController(ShareBase):
    region = models.ForeignKey(Region, on_delete=models.CASCADE)
    mgmt_ip = models.GenericIPAddressField()
    mgmt_url = models.URLField()
    pub_ip = models.GenericIPAddressField()
    pub_url = models.URLField()
    certificate = models.TextField()
    enabled = models.BooleanField(default=True)
    dedicated = models.BooleanField(default=False)
    tags = models.ManyToManyField(ShareTag, related_name='sase_controllers', null=True, blank=True)
    
    def __str__(self):
        return self.name

class SDWANController(ShareBase):
    region = models.ForeignKey(Region, on_delete=models.CASCADE)
    mgmt_ip = models.GenericIPAddressField()
    mgmt_url = models.URLField()
    pub_ip = models.GenericIPAddressField()
    pub_url = models.URLField()
    certificate = models.TextField()
    enabled = models.BooleanField(default=True)
    dedicated = models.BooleanField(default=False)
    tags = models.ManyToManyField(ShareTag, related_name='sdwan_controllers', null=True, blank=True)
    
    def __str__(self):
        return self.name

class Contact(ShareBase):
    customer = models.ForeignKey('Customer', on_delete=models.CASCADE)
    email = models.EmailField(max_length=200)
    number = models.CharField(max_length=15, null=True, blank=True)
    address = models.TextField(null=True, blank=True)
    tags = models.ManyToManyField(ShareTag, related_name='contacts_tags', null=True, blank=True)
    name = models.CharField(max_length=255)

    class Meta:
        unique_together = ('name', 'customer')

    def __str__(self):
        return self.name

class Customer(models.Model):
    name = models.CharField(unique=True, max_length=200, db_index=True)
    company_name = models.CharField(max_length=200, null=True, blank=True)
    is_active = models.BooleanField(default=True)
    tags = models.ManyToManyField(ShareTag, related_name='customers_tags', null=True, blank=True)
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        return self.name

class AdminUser(ShareBase):
    username = models.CharField(max_length=255)
    external_id = models.CharField(max_length=255)  # Keycloak UUID for the user

class Tenant(TenantMixin):
    tenant_id = models.IntegerField(unique=True, db_index=True)
    schema_name = models.CharField(max_length=255, unique=True)
    name = models.CharField(unique=True, max_length=255, db_index=True)
    description = models.TextField(max_length=200, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.CharField(max_length=100, null=True, blank=True)
    modified_at = models.DateTimeField(auto_now=True)
    modified_by = models.CharField(max_length=100, null=True, blank=True)
    snapshot = models.TextField(max_length=200, null=True, blank=True)
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    enabled = models.BooleanField(default=True)
    production = models.BooleanField(default=True)
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children')
    detail = models.JSONField(null=True, blank=True)
    admins = models.ManyToManyField('AdminUser', related_name='tenant_admins')
    products = models.ManyToManyField(Product, related_name='tenant_products')
    licenses = models.ManyToManyField(License, related_name='tenant_licenses')
    softwares = models.ManyToManyField(SDWANSoftware, related_name='tenant_softwares')
    tags = models.ManyToManyField(ShareTag, related_name='tenants_tags', null=True, blank=True)
    config = models.URLField(blank=True)
    auto_drop_schema = True

    def __str__(self):
        return self.schema_name

    def get_children(self):
        return self.children.all()

    @transaction.atomic
    def save(self, *args, **kwargs):
        try:
            if self.schema_name == "public":
                logger.debug("Setting schema name to 'public'")
                self.tenant_id = 1
                self.schema_name = 'public'
            elif self.schema_name == "reserved1000":
                logger.debug("Setting schema name to 'reserved1000'")
                self.tenant_id = 1000
                self.schema_name = 'reserved1000'
            else:
                if self.pk is None:  # This is a new record
                    max_id = Tenant.objects.all().aggregate(Max('tenant_id'))['tenant_id__max']
                    if max_id is None:  # This is the first record
                        self.tenant_id = 1
                    else:
                        self.tenant_id = max_id + 1
                    self.schema_name = 'Tenant_' + str(self.tenant_id)
                    
            super(Tenant, self).save(*args, **kwargs)
        except Exception as e:
            logger.error("Error saving tenant: %s", e)
            raise
    @transaction.atomic
    def delete(self, *args, **kwargs):
        if self.children.exists():
            logger.error("Attempt to delete tenant with existing children")
            raise Exception("Cannot delete tenant because it has child tenants.")
        if self.enabled:
            logger.error("Attempt to delete tenant that is enabled")
            raise Exception("Cannot delete tenant because it is currently enabled.")
        super(Tenant, self).delete(*args, **kwargs)

class Domain(DomainMixin):
    pass

class IKEEncryption(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class IKEHash(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class IKEDHGroup(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class IKERPF(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class ESPEncryption(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class ESPHash(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class ESPDHGroup(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class ESPPFS(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class RoutingProtocol(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class InterfaceType(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name
    
class InterfaceRole(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name
    
class VRFRole(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name
    
class LACPHashOption(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name
    
class DeviceModel(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name
    
class DeletedTenant(models.Model):
    tenant_id = models.IntegerField(db_index=True)
    schema_name = models.CharField(max_length=255)
    name = models.CharField(max_length=255, db_index=True)
    description = models.TextField(max_length=200, null=True, blank=True)
    deleted_at = models.DateTimeField(null=True, blank=True)
    deleted_by = models.CharField(max_length=100, null=True, blank=True)
    snapshot = models.TextField(max_length=200, null=True, blank=True)
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    config = models.URLField(blank=True)
    detail = models.JSONField(null=True, blank=True)
    

    def __str__(self):
        return self.schema_name
#####end /root/delta_api/delta_sase/tenants_app/models.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/urls.py#####
# tenants_app/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
# from .views import CustomerViewSet, TenantViewSet
from .views import (TenantViewSet, SDWANSoftwareViewSet, CustomerViewSet, ShareTagViewSet,
                    ProductViewSet, ProductCategoryViewSet, LicenseViewSet, RegionViewSet,
                    SCEViewSet, SASEControllerViewSet, SDWANControllerViewSet, ContactViewSet,
                    AdminUserViewSet, IKEEncryptionViewSet, IKEHashViewSet, IKEDHGroupViewSet,
                    IKERPFViewSet, ESPEncryptionViewSet, ESPHashViewSet, ESPDHGroupViewSet,
                    ESPPFSViewSet, RoutingProtocolViewSet, InterfaceTypeViewSet,
                    InterfaceRoleViewSet, VRFRoleViewSet, LACPHashOptionViewSet, DeviceModelViewSet)

router = DefaultRouter()
router.register(r'manage/customers', CustomerViewSet, basename='customers')
router.register(r'manage/tenants', TenantViewSet, basename='tenants')
router.register(r'support/sdwan/software', SDWANSoftwareViewSet)
router.register(r'manage/products', ProductViewSet)
router.register(r'manage/products/categories', ProductCategoryViewSet)
router.register(r'manage/contacts', ContactViewSet)
router.register(r'manage/licenses', LicenseViewSet)
router.register(r'network/regions', RegionViewSet)
router.register(r'network/sase/sces', SCEViewSet)
router.register(r'network/sase/controllers', SASEControllerViewSet)
router.register(r'network/sdwan/controllers', SDWANControllerViewSet)
router.register(r'manage/users', AdminUserViewSet)
router.register(r'support/ike/encrypt', IKEEncryptionViewSet)
router.register(r'support/ike/hash', IKEHashViewSet)
router.register(r'support/ike/dh', IKEDHGroupViewSet)
router.register(r'support/ike/rpf', IKERPFViewSet)
router.register(r'support/esp/encrypt', ESPEncryptionViewSet)
router.register(r'support/esp/hash', ESPHashViewSet)
router.register(r'support/esp/dh', ESPDHGroupViewSet)
router.register(r'support/esp/pfs', ESPPFSViewSet)
router.register(r'support/protocols/routing', RoutingProtocolViewSet)
router.register(r'support/interfaces/types', InterfaceTypeViewSet)
router.register(r'support/interfaces/roles', InterfaceRoleViewSet)
router.register(r'support/vrf/role', VRFRoleViewSet)
router.register(r'support/lacp/hash', LACPHashOptionViewSet)
router.register(r'support/devices/models', DeviceModelViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

#####end /root/delta_api/delta_sase/tenants_app/urls.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/middleware.py#####
# tenants_app/middleware.py
from django.http import JsonResponse
import jwt
from django.conf import settings
import logging

logger = logging.getLogger(__name__)

class ExceptionHandlingMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        return response

    def process_exception(self, request, exception):
        logger.error(f"Unhandled exception occurred: {str(exception)}", exc_info=True)
        return JsonResponse({
            'error': 'Internal server error',
            'details': str(exception)
        }, status=500)


class JWTAuthenticationMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        jwt_token = request.headers.get('Authorization')
        if jwt_token:
            try:
                # Split the token from 'Bearer' space
                token = jwt_token.split(' ')[1]
                # Decode the token with verification
                decoded_token = jwt.decode(
                    token,
                    settings.KEYCLOAK_PUBLIC_KEY,
                    algorithms=["RS256"],
                    audience=settings.JWT_AUDIENCE,
                    options={"verify_signature": True}
                )
                # Set the user information to request
                request.user_id = decoded_token.get('user_id')
                request.user_role = decoded_token.get('role')

                logger.info("JWT decoded successfully with user_id: {} and user_role: {}".format(
                    request.user_id, request.user_role))
            except (jwt.ExpiredSignatureError, jwt.DecodeError, jwt.InvalidTokenError) as e:
                logger.error("JWT validation error: {}".format(str(e)))
                return JsonResponse({'error': 'Invalid token'}, status=401)
        else:
            logger.warning("No JWT found in the request headers")
            return JsonResponse({'error': 'Authorization token not provided'}, status=401)

        response = self.get_response(request)
        return response
    
class LoggingMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        self.logger = logging.getLogger(__name__)

    def __call__(self, request):
        self.logger.info('Request: %s %s', request.method, request.get_full_path())
        response = self.get_response(request)
        self.logger.info('Response: %s', response.status_code)
        return response

#####end /root/delta_api/delta_sase/tenants_app/middleware.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/postgres.py#####
import psycopg2

def execute_query(ip, port, username, password, db_name, schema_name, query):
    conn = None
    try:
        # Establish connection to PostgreSQL database
        conn = psycopg2.connect(
            host=ip,
            port=port,
            user=username,
            password=password,
            dbname=db_name
        )

        # Create a cursor object
        cur = conn.cursor()

        # Set the schema 
        cur.execute(f"SET search_path TO {schema_name}")

        # Execute the SQL query
        cur.execute(query)

        # Fetch all the records
        rows = cur.fetchall()

        for row in rows:
            print(row)

        # Close the communication with the PostgreSQL database server
        cur.close()
        
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)

    finally:
        if conn is not None:
            conn.close()

# # Test the function
# execute_query('192.168.172.71', 5433, 'admin', 'admin', 'delta98', 'Tenant_1001',
#  "SELECT * FROM information_schema.tables WHERE table_schema = 'Tenant_1001' AND table_name = 'interfaces_app_interfacetype';")

execute_query('192.168.172.71', 5433, 'admin', 'admin', 'delta98', 'Tenant_1001',
 'select * from "Tenant_1001"."interfaces_app_interfacetype"')

#####end /root/delta_api/delta_sase/tenants_app/postgres.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/management/__init__.py#####

#####end /root/delta_api/delta_sase/tenants_app/management/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/management/commands/create_public.py#####
from django.core.management.base import BaseCommand
from tenants_app.models import Tenant, Domain, Customer, Contact

class Command(BaseCommand):
    help = "Generate the public tenant"

    def add_arguments(self, parser):
        parser.add_argument(
            "--domain",
            default="localhost",
            type=str,
            help="Domain for the public domain. Don't add your port or www here! On a local server, you'll want to use localhost here (default)."
        )
        parser.add_argument(
            "--enabled",
            action='store_true',
            help="Flag to specify if the tenant should be enabled. Defaults to True.",
            default=True
        )
        parser.add_argument(
            "--production",
            action='store_true',
            help="Flag to specify if the tenant should be marked as production. Defaults to True.",
            default=True
        )

    def handle(self, *args, **options):
        # Check if the public tenant already exists
        if Tenant.objects.filter(schema_name="public").exists():
            self.stdout.write(self.style.WARNING('Public tenant already exists'))
            return
        
        # Create contact
        # contact = Contact.objects.create(
        #     name='Admin Contact',
        #     email='admin@deltasase.com',  # Assuming email is a field in Contact model
        #     number='5134432021',  # Assuming number is a field in Contact model
        #     address='Test Address',  # Assuming address is a field in Contact model
        #     detail={} 
        # )

        # Create customer and link the contact
        customer = Customer.objects.create(
            name='DeltaSASE LLC',
            company_name='DeltaSASE LLC',
            is_active=True,
        )
        # customer.contacts.add(contact)
        
        # Create the public tenant with the created customer
        tenant = Tenant.objects.create(
            schema_name="public",
            name="Delta SASE",
            customer=customer,
            description="Public tenant for Delta SASE company itself",
            enabled=options['enabled'],
            production=options['production'],
            detail={} 
        )

        # Add one or more domains for the tenant
        domain = Domain.objects.create(
            domain=options["domain"],
            tenant=tenant,
            is_primary=True
        )

        self.stdout.write(self.style.SUCCESS('Successfully created public tenant with domain: {}'.format(options["domain"])))
        self.stdout.write(self.style.SUCCESS('Tenant Enabled: {}'.format(options["enabled"])))
        self.stdout.write(self.style.SUCCESS('Tenant Production: {}'.format(options["production"])))

#####end /root/delta_api/delta_sase/tenants_app/management/commands/create_public.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/management/commands/__init__.py#####

#####end /root/delta_api/delta_sase/tenants_app/management/commands/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/management/commands/create_reserve.py#####
from django.core.management.base import BaseCommand
from tenants_app.models import Customer, Tenant, Domain

class Command(BaseCommand):
    help = "Generate a reserved tenant"

    def add_arguments(self, parser):
        parser.add_argument(
            "--domain",
            default="1000",
            type=str,
            help="Domain for the reserved tenant. "
            "Don't add your port or www here! on a local server you'll want to use localhost here (default)",
        )

    def handle(self, *args, **kwargs):
        # create your reserved tenant
        if Tenant.objects.filter(schema_name="reserved1000").first():
            self.stdout.write(self.style.ERROR('Tenant with schema_name reserved1000 already exists.'))
            return
        
        
        # get or create customer
        customer = Customer.objects.get(name= "DeltaSASE LLC").id
            # email='admin@deltasase.com',
            # defaults={
            #     'name': 'DeltaSASE LLC',
            #     'contact_number': '5134432021',
            #     'company_name': 'DeltaSASE LLC',
            #     'company_address': 'Test Address',
            # }
        # )

        tenant = Tenant(schema_name="reserved1000", name="Reserved 1000", customer_id=customer, detail={})
        tenant.save()

        # Add one or more domains for the tenant
        domain = Domain()
        domain.domain = kwargs["domain"]
        domain.tenant = tenant
        domain.is_primary = True
        domain.save()

#####end /root/delta_api/delta_sase/tenants_app/management/commands/create_reserve.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/tenants_app/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/tenants_app/migrations/0001_initial.py#####
# Generated by Django 5.0.6 on 2024-05-12 12:25

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('username', models.CharField(max_length=255)),
                ('external_id', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ESPDHGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ESPEncryption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ESPHash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ESPPFS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='IKEDHGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='IKEEncryption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='IKEHash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='IKERPF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='InterfaceRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='InterfaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LACPHashOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('unit', models.CharField(max_length=100)),
                ('ppu', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('cloud', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoutingProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ShareTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100)),
                ('value', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='VRFRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('company_name', models.CharField(blank=True, max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants_app.customer')),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='customers_tags', to='tenants_app.sharetag')),
            ],
        ),
        migrations.CreateModel(
            name='DeletedTenant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_id', models.IntegerField(db_index=True)),
                ('schema_name', models.CharField(max_length=255)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True, max_length=200, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('snapshot', models.TextField(blank=True, max_length=200, null=True)),
                ('config', models.URLField(blank=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenants_app.customer')),
            ],
        ),
        migrations.CreateModel(
            name='SDWANSoftware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('production', models.BooleanField(default=True)),
                ('url', models.URLField()),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='sdwan_software_tags', to='tenants_app.sharetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SDWANController',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('mgmt_ip', models.GenericIPAddressField()),
                ('mgmt_url', models.URLField()),
                ('pub_ip', models.GenericIPAddressField()),
                ('pub_url', models.URLField()),
                ('certificate', models.TextField()),
                ('enabled', models.BooleanField(default=True)),
                ('dedicated', models.BooleanField(default=False)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenants_app.region')),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='sdwan_controllers', to='tenants_app.sharetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SCE',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('total_capacity', models.IntegerField()),
                ('available_capacity', models.IntegerField()),
                ('mgmt_ip', models.GenericIPAddressField()),
                ('mgmt_url', models.URLField()),
                ('certificate', models.TextField()),
                ('enabled', models.BooleanField(default=True)),
                ('dedicated', models.BooleanField(default=False)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenants_app.region')),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='sces', to='tenants_app.sharetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SASEController',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('mgmt_ip', models.GenericIPAddressField()),
                ('mgmt_url', models.URLField()),
                ('pub_ip', models.GenericIPAddressField()),
                ('pub_url', models.URLField()),
                ('certificate', models.TextField()),
                ('enabled', models.BooleanField(default=True)),
                ('dedicated', models.BooleanField(default=False)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenants_app.region')),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='sase_controllers', to='tenants_app.sharetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='region',
            name='tags',
            field=models.ManyToManyField(blank=True, null=True, related_name='regions', to='tenants_app.sharetag'),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('unit', models.CharField(blank=True, max_length=100, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenants_app.productcategory')),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='products_tags', to='tenants_app.sharetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('unit', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='licenses', to='tenants_app.sharetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_id', models.IntegerField(db_index=True, unique=True)),
                ('schema_name', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('description', models.TextField(blank=True, max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('snapshot', models.TextField(blank=True, max_length=200, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('production', models.BooleanField(default=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('config', models.URLField(blank=True)),
                ('admins', models.ManyToManyField(related_name='tenant_admins', to='tenants_app.adminuser')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenants_app.customer')),
                ('licenses', models.ManyToManyField(related_name='tenant_licenses', to='tenants_app.license')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tenants_app.tenant')),
                ('products', models.ManyToManyField(related_name='tenant_products', to='tenants_app.product')),
                ('softwares', models.ManyToManyField(related_name='tenant_softwares', to='tenants_app.sdwansoftware')),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='tenants_tags', to='tenants_app.sharetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, max_length=253, unique=True)),
                ('is_primary', models.BooleanField(db_index=True, default=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='tenants_app.tenant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=100, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=100, null=True)),
                ('detail', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('email', models.EmailField(max_length=200)),
                ('number', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenants_app.customer')),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='contacts_tags', to='tenants_app.sharetag')),
            ],
            options={
                'unique_together': {('name', 'customer')},
            },
        ),
    ]

#####end /root/delta_api/delta_sase/tenants_app/migrations/0001_initial.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_service_app/apps.py#####
from django.apps import AppConfig


class StandardsServiceAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'standards_service_app'

#####end /root/delta_api/delta_sase/standards_service_app/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_service_app/__init__.py#####

#####end /root/delta_api/delta_sase/standards_service_app/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_service_app/views.py#####
from django.shortcuts import render

# Create your views here.

#####end /root/delta_api/delta_sase/standards_service_app/views.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_service_app/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/standards_service_app/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_service_app/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/standards_service_app/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_service_app/models.py#####
# standards_service_app/models.py
from django.db import models
from django.utils import timezone
from django.contrib.postgres.fields import JSONField
import uuid
from django.contrib.postgres.fields import ArrayField
from django.utils import timezone
from django.utils.deprecation import MiddlewareMixin
from django.core.exceptions import ValidationError 
from django.core.validators import MaxValueValidator
from resources_app.models import Certificate ,DNSServer

import logging

logger = logging.getLogger(__name__)

class ServStandardTag(models.Model):
    key = models.CharField(max_length=100, unique=True)
    value = models.JSONField()

    class Meta:
        indexes = [
            models.Index(fields=['key']),
        ]

    def __str__(self):
        return f"{self.key}: {self.value}"
        
class ServStandardBase(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(verbose_name="Description", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.CharField(max_length=100, null=True, blank=True)
    modified_at = models.DateTimeField(auto_now=True)
    modified_by = models.CharField(max_length=100, null=True, blank=True)
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    tags = models.ManyToManyField(ServStandardTag, blank=True, related_name="%(class)s_tags")
    detail = JSONField(default=dict)
    enabled = models.BooleanField(default=True)
    source_address_tag = models.CharField(max_length=100, blank=True, null=True)
    source_interface_tag = models.CharField(max_length=100, blank=True, null=True)
    logging = models.BooleanField(default=False)

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        if not self.pk:  # Object is being created
            self.created_by = user_id
        self.modified_by = user_id
        if self.tags.count() > 5:
            raise ValidationError("Maximum number of tags exceeded (5 tags allowed).")
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        self.deleted_at = timezone.now()
        self.deleted_by = user_id
        super().delete(*args, **kwargs)

class DNSService(ServStandardBase):
    caching = models.BooleanField(default=True)
    port = models.IntegerField(default=53)
    interface_tag = models.JSONField(blank=True, null=True)
    address_tag = models.CharField(max_length=100, blank=True, null=True)
    certificate = models.ForeignKey(Certificate, on_delete=models.SET_NULL, null=True, related_name='dnsservices')
    forwarding_servers = models.ManyToManyField(DNSServer, on_delete=models.PROTECT, related_name='dnsservice_servers')
    cache_size = models.CharField(max_length=50)
    max_ttl = models.IntegerField(help_text='Maximum time to live for DNS records')
    min_ttl = models.IntegerField(help_text='Minimum time to live for DNS records')
    neg_ttl = models.IntegerField(help_text='Negative caching time to live')
    max_entries = models.IntegerField(help_text='Maximum number of cache entries')
    static_entries = models.JSONField(blank=True, null=True)  # Storing static DNS entries as JSON

    def __str__(self):
        return self.name

class DHCPRelayStandard(ServStandardBase):
    servers = JSONField(default=dict) #it should be json with priority as key and server address as value
    options = models.JSONField(default=dict, help_text="Additional DHCP options in JSON format")

    def __str__(self):
        return self.name

class DHCPServerStandard(ServStandardBase):
    ip_start_count = models.GenericIPAddressField(blank=True, null=True, help_text="Exclude count from Start")
    ip_end_count = models.GenericIPAddressField(blank=True, null=True, help_text="Exclude count from End")
    ip_start_percent = models.GenericIPAddressField(blank=True, null=True, help_text="percent of subnet exclud from end")
    ip_end_percent = models.GenericIPAddressField(blank=True, null=True, help_text="percent of subnet exclud from end")
    default_gateway_self = models.BooleanField(default=True)
    dns_self = models.BooleanField(default=True)
    lease_time = models.IntegerField(default=86400, help_text="Lease time in seconds")
    dns_servers = models.ManyToManyField(DNSServer, on_delete=models.PROTECT, related_name='dnsservice_servers')
    wins_servers = models.CharField(max_length=255, blank=True, help_text="Comma-separated WINS servers")
    options = models.JSONField(default=dict, help_text="Additional DHCP options in JSON format")

    def __str__(self):
        return self.name
#####end /root/delta_api/delta_sase/standards_service_app/models.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_service_app/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/standards_service_app/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/config/apps.py#####
from django.apps import AppConfig


class ConfigConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'config'

#####end /root/delta_api/delta_sase/config/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/config/__init__.py#####

#####end /root/delta_api/delta_sase/config/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/config/views.py#####
from django.shortcuts import render

# Create your views here.

#####end /root/delta_api/delta_sase/config/views.py#####
______________________________
#####start /root/delta_api/delta_sase/config/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/config/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/config/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/config/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/config/models.py#####
from django.db import models

# Create your models here.

#####end /root/delta_api/delta_sase/config/models.py#####
______________________________
#####start /root/delta_api/delta_sase/config/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/config/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_network_app/apps.py#####
from django.apps import AppConfig


class StandardsNetworkAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'standards_network_app'

#####end /root/delta_api/delta_sase/standards_network_app/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_network_app/__init__.py#####

#####end /root/delta_api/delta_sase/standards_network_app/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_network_app/views.py#####
from django.shortcuts import render

# Create your views here.

#####end /root/delta_api/delta_sase/standards_network_app/views.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_network_app/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/standards_network_app/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_network_app/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/standards_network_app/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_network_app/models.py#####
# standards_network_app/models.py
from django.db import models
from django.utils import timezone
from django.contrib.postgres.fields import JSONField
import uuid
from django.contrib.postgres.fields import ArrayField
from django.utils import timezone
from django.utils.deprecation import MiddlewareMixin
from django.core.exceptions import ValidationError 
from django.core.validators import MaxValueValidator

import logging

logger = logging.getLogger(__name__)

class NetStandardTag(models.Model):
    key = models.CharField(max_length=100, unique=True)
    value = models.JSONField()

    class Meta:
        indexes = [
            models.Index(fields=['key']),
        ]

    def __str__(self):
        return f"{self.key}: {self.value}"
        
class NetStandardBase(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(verbose_name="Description", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.CharField(max_length=100, null=True, blank=True)
    modified_at = models.DateTimeField(auto_now=True)
    modified_by = models.CharField(max_length=100, null=True, blank=True)
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    tags = models.ManyToManyField(NetStandardTag, blank=True, related_name="%(class)s_tags")
    detail = JSONField()

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        if not self.pk:  # Object is being created
            self.created_by = user_id
        self.modified_by = user_id
        if self.tags.count() > 5:
            raise ValidationError("Maximum number of tags exceeded (5 tags allowed).")
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        user_id = kwargs.pop('user_id', None)  # Receive user_id from the view
        self.deleted_at = timezone.now()
        self.deleted_by = user_id
        super().delete(*args, **kwargs)

class SLAStandard(NetStandardBase):
    interval = models.IntegerField(help_text='Interval in seconds', blank=True, null=True)
    threshold = models.FloatField(help_text='Threshold value', blank=True, null=True)
    wait_time = models.IntegerField(help_text='Wait time in seconds', blank=True, null=True)
    loss = models.FloatField(help_text='Acceptable packet loss percentage', blank=True, null=True)
    jitter = models.FloatField(help_text='Acceptable jitter in milliseconds', blank=True, null=True)
    mos = models.FloatField(help_text='Minimum Mean Opinion Score (MOS)', blank=True, null=True)

    def __str__(self):
        return self.name

class UnderlayStandard(NetStandardBase):
    up_bw = models.IntegerField(help_text='Upstream bandwidth in Mbps', blank=True, null=True)
    down_bw = models.IntegerField(help_text='Downstream bandwidth in Mbps', blank=True, null=True)
    shaping = models.BooleanField(default=False)
    metered = models.BooleanField(default=False)
    transport = models.CharField(max_length=50, blank=True, null=True)
    sla_target = models.CharField(max_length=100, blank=True, null=True)
    sla_standard = models.ForeignKey(SLAStandard, on_delete=models.SET_NULL, null=True, blank=True, related_name='underlays')

    def __str__(self):
        return self.name

class IPsecStandard(NetStandardBase):
    encryption_algorithm = models.CharField(max_length=50, blank=True, null=True)
    integrity_algorithm = models.CharField(max_length=50, blank=True, null=True)
    dh_group = models.CharField(max_length=50, blank=True, null=True)
    pfs_group = models.CharField(max_length=50, blank=True, null=True)
    lifetime_seconds = models.IntegerField(help_text='Lifetime of the security association in seconds', blank=True, null=True)
    lifetime_kilobytes = models.IntegerField(help_text='Lifetime of the security association in kilobytes', blank=True, null=True)

    def __str__(self):
        return self.name
    
class IKEStandard(NetStandardBase):
    description = models.TextField(blank=True, null=True)
    version = models.IntegerField(default=2, help_text='IKE version')
    authentication_method = models.CharField(max_length=100, blank=True, null=True)
    psk = models.CharField(max_length=100, blank=True, null=True, verbose_name='Pre-Shared Key')
    random_psk= models.BooleanField(default=False)
    local_identity = models.CharField(max_length=100, blank=True, null=True)
    remote_identity = models.CharField(max_length=100, blank=True, null=True)
    dh_group = models.CharField(max_length=50, blank=True, null=True)
    encryption_algorithm = models.CharField(max_length=100, blank=True, null=True)
    hash_algorithm = models.CharField(max_length=100, blank=True, null=True)
    lifetime_seconds = models.IntegerField(blank=True, null=True, help_text='Lifetime of the security association in seconds')
    mobike = models.BooleanField(default=False, help_text='Support for MOBIKE protocol')
    nat_t = models.BooleanField(default=True, help_text='Support for NAT Traversal')

    def __str__(self):
        return self.name

#####end /root/delta_api/delta_sase/standards_network_app/models.py#####
______________________________
#####start /root/delta_api/delta_sase/standards_network_app/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/standards_network_app/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/objects_app/apps.py#####
from django.apps import AppConfig


class ObjectsAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'objects_app'

#####end /root/delta_api/delta_sase/objects_app/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/objects_app/__init__.py#####

#####end /root/delta_api/delta_sase/objects_app/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/objects_app/views.py#####
from django.shortcuts import render

# Create your views here.

#####end /root/delta_api/delta_sase/objects_app/views.py#####
______________________________
#####start /root/delta_api/delta_sase/objects_app/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/objects_app/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/objects_app/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/objects_app/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/objects_app/models.py#####
# objects_app/models.py
from django.db import models
from django.utils import timezone
from django.contrib.postgres.fields import JSONField
import uuid
from django.contrib.postgres.fields import ArrayField
from django.utils import timezone
from django.utils.deprecation import MiddlewareMixin
from django.core.exceptions import ValidationError 
from django.core.validators import MaxValueValidator
from base.models import BaseModel ,BasePolymorphic

import logging

logger = logging.getLogger(__name__)
        
class ObjectBase(BaseModel):
    name = models.CharField(max_length=255)
    description = models.TextField(verbose_name="Description", blank=True, null=True)
    detail = JSONField()

    class Meta:
        abstract = True

class ObjectPolymorphic(BasePolymorphic):
    name = models.CharField(max_length=255)
    description = models.TextField(verbose_name="Description", blank=True, null=True)
    detail = JSONField()

    class Meta:
        abstract = True
        
class Zone(ObjectBase):
    role= models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Address(ObjectPolymorphic):
    address = models.CharField(max_length=255)

    def __str__(self):
        return self.name

class AddressSubnet(Address):
    type = models.CharField(max_length=20, default='subnet')
    mask = models.CharField(max_length=3, blank=True, null=True)

class AddressRange(Address):
    type = models.CharField(max_length=20, default='range')
    end_address = models.CharField(max_length=255)
    
class AddressGroup(ObjectBase):
    addresses = models.ManyToManyField(Address)
    def __str__(self):
        return self.name
    
class URL(ObjectBase):
    url = models.CharField(max_length=255)
    def __str__(self):
        return self.name
    
class URLGroup(ObjectBase):
    urls = models.ManyToManyField(URL)
    def __str__(self):
        return self.name
    
class PrefixList(ObjectBase):

    def __str__(self):
        return self.name

class PrefixListRule(models.Model):
    seq = models.PositiveIntegerField()
    permit = models.BooleanField(default=True)  # True for permit, False for deny
    prefix = models.CharField(max_length=255)  # Typically an IP address range in CIDR format
    ge = models.PositiveIntegerField(blank=True, null=True)  # Greater than or equal prefix length
    le = models.PositiveIntegerField(blank=True, null=True)  # Less than or equal prefix length
    prefix_list = models.ForeignKey(PrefixList, related_name='rules', on_delete=models.CASCADE)

    def __str__(self):
        return self.name

class Application(ObjectBase):
    app_id = models.CharField(max_length=100)
    app_category = models.CharField(max_length=100)
    priority = models.IntegerField(validators=[MaxValueValidator(999999)])
    source_ip = models.CharField(max_length=15)
    destination_ip = models.CharField(max_length=15)
    urls = ArrayField(models.CharField(max_length=255), size=10, blank=True)  # Can have up to 10 URLs
    port = models.CharField(max_length=10)  # Stores only one port number
    protocol = models.CharField(max_length=10)  # Stores only one protocol
    packet_payload = models.TextField(blank=True, null=True)
    ssl_certificates = ArrayField(models.CharField(max_length=255), blank=True)
    user_agents = ArrayField(models.CharField(max_length=255), blank=True)
    parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True)  # Optional reference to another Application

    def __str__(self):
        return self.name

class Secret(ObjectBase):
    path = models.CharField(max_length=255)
    
    def __str__(self):
        return self.name
#####end /root/delta_api/delta_sase/objects_app/models.py#####
______________________________
#####start /root/delta_api/delta_sase/objects_app/urls.py#####
#base.urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import  AvailableOverlayIPViewSet, CandidateConfigViewSet, SnapshotConfigViewSet, TenantSettingViewSet

router = DefaultRouter()
router.register(r'addresses', CandidateConfigViewSet)
router.register(r'addrgroups', SnapshotConfigViewSet)
router.register(r'zones', TenantSettingViewSet)
router.register(r'urls', TenantSettingViewSet)
router.register(r'urlgroups', TenantSettingViewSet)
router.register(r'applications', TenantSettingViewSet)
router.register(r'prefixlists', TenantSettingViewSet)
router.register(r'secrets', TenantSettingViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

#####end /root/delta_api/delta_sase/objects_app/urls.py#####
______________________________
#####start /root/delta_api/delta_sase/objects_app/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/objects_app/migrations/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/policies_security_app/apps.py#####
from django.apps import AppConfig


class PoliciesSecurityAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'policies_security_app'

#####end /root/delta_api/delta_sase/policies_security_app/apps.py#####
______________________________
#####start /root/delta_api/delta_sase/policies_security_app/__init__.py#####

#####end /root/delta_api/delta_sase/policies_security_app/__init__.py#####
______________________________
#####start /root/delta_api/delta_sase/policies_security_app/views.py#####
from django.shortcuts import render

# Create your views here.

#####end /root/delta_api/delta_sase/policies_security_app/views.py#####
______________________________
#####start /root/delta_api/delta_sase/policies_security_app/admin.py#####
from django.contrib import admin

# Register your models here.

#####end /root/delta_api/delta_sase/policies_security_app/admin.py#####
______________________________
#####start /root/delta_api/delta_sase/policies_security_app/tests.py#####
from django.test import TestCase

# Create your tests here.

#####end /root/delta_api/delta_sase/policies_security_app/tests.py#####
______________________________
#####start /root/delta_api/delta_sase/policies_security_app/models.py#####
from django.db import models

# Create your models here.

#####end /root/delta_api/delta_sase/policies_security_app/models.py#####
______________________________
#####start /root/delta_api/delta_sase/policies_security_app/migrations/__init__.py#####

#####end /root/delta_api/delta_sase/policies_security_app/migrations/__init__.py#####
______________________________
